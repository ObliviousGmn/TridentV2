## -+- Marcos Configs
## --- Consildate smaller macros 

## -+- Beeper Beep beeps -+-
[gcode_macro BEEP]
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
    {% set freq = params.FREQ|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.

    {% for iteration in range(i|int) %}
        SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
        G4 P{dur}
        SET_PIN PIN=beeper VALUE=0
        G4 P{dur}
    {% endfor %}
## -//-

[gcode_macro BEEP_SUCCESS]
gcode: 
    BEEP I=1 DUR=100 FREQ=1000                      
## -//-

[gcode_macro BEEP_ERROR]
gcode:
   BEEP I=3 DUR=350 FREQ=100
## -//-

## -+- Conditional G28 -+-
[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G90                            ; absolute positioning
        G28                            ; Home Axes
    {% endif %}
## -//-

[gcode_macro CHOME]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G90                            ; absolute positioning
        G28                            ; Home Axes
    {% endif %}
## -//-

## -+- Probe Accuracy Check -+-
[gcode_macro CENTER_ACCURACY]
gcode:
    M400                           ; wait for buffer to clear
    CG28
    G90                            ; absolute positioning
    ATTACH_PROBE
    G0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000            
    PROBE_ACCURACY
## -//-


[gcode_macro PID_HOTEND]
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=260
## -//-

[gcode_macro PID_BED]
gcode:
  PID_CALIBRATE HEATER=heater_bed TARGET=110
## -//-

[gcode_macro MANUAL_FLOW_CALIBRATION]
gcode:
    M221 S{params.FLOW}
    SET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}
## -//-

## -+- Pressure Advance Macro -+-
# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# Used in conjunction with Marlin's linear advance calibration tool: 
# https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
	# Parameters
	{% set pa = params.K|float %}
	
	SET_PRESSURE_ADVANCE ADVANCE={pa}
## -//-

#####################################################################
#    Heatsoak Timer
#####################################################################
[delayed_gcode HEATSOAK_DELAY]
gcode:
    {% if printer.idle_timeout.state != "Printing" %}
       park_center
       SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110
       G4 P{15 * 60000} ; Dwell for 15 min
       SET_FAN_SPEED FAN=BedFans SPEED=0.4
       SET_FAN_SPEED FAN=BoomBox SPEED=0.4
    {% endif %}

[gcode_macro HEATSOAK_TIMER]
gcode:
     {% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}
     UPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}
## -//-

[gcode_shell_command backup_cfg]
 command: /usr/bin/bash /home/pi/printer_data/config/autocommit.sh
 timeout: 30
 verbose: True

[gcode_macro BACKUP_CFG]
description: Backs up config directory GitHub
gcode:
     RUN_SHELL_COMMAND CMD=backup_cfg


[gcode_macro _CASELIGHT_ON]
description: Helper: Light on
gcode:
  SET_PIN PIN=caselight VALUE=0.25
  {action_respond_info("Caselight on")}
    
[gcode_macro _CASELIGHT_OFF]
description: Helper: Light off
gcode:
  SET_PIN PIN=caselight VALUE=0.0
  {action_respond_info("Caselight off")}

[gcode_macro CASELIGHT]
description: Toggle light
gcode: {% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}

[gcode_macro XYBelt_Tension]
description: A macro that assists with repeatable belt tensioning.
variable_y_tensioning_position: 115       #Position the printhead needs to be to have 150mm of belt length exposed for belt tensioning.
gcode:
    {% set x_max = printer.configfile.settings.stepper_x.position_max %}
    {% set travel_speed = printer.configfile.settings.printer.max_velocity %}
    G0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}
    { action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }
