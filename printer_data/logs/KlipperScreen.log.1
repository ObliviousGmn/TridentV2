2024-02-07 18:04:26,888 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-07 18:04:26,888 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-88-gc832c90
2024-02-07 18:04:26,888 [functions.py:log_start()] - Python version: 3.11
2024-02-07 18:04:27,006 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-07 18:04:27,006 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-07 18:04:27,023 [config.py:log_config()] -  ===== Config File =====
[printer Zarya]

[menu __main my_macros_menu]
name = Macros

[menu __main my_macros_menu sub_macro_item]
name = PARK CENTER
method = printer.gcode.script
params = {"script":"PARK_CENTER"}

[menu __main my_macros_menu sub_macro_item2]
name = Force Bed Down
method = printer.gcode.script
params = {"script":"force_bed_down DISTANCE=4"}

[menu __main my_macros_menu sub_macro_item3]
name = HEATSOAKER
method = printer.gcode.script
params = {"script":"HEATSOAKER"}
=======================
2024-02-07 18:04:27,028 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
screen_blanking = 300
24htime = False
side_macro_shortcut = False
font_size = large
only_heaters = True
invert_z = True
move_speed_xy = 199

[displayed_macros Printer]
attach_probe = False
bed_mesh_calibrate = False
attach_probe_lock = False
center_toolhead = False
dock_probe = False
g32 = False
dock_probe_unlock = False
jessie_tan = False
center_accuracy = False
filament_reset = False
jessie_soulblack = False
m900 = False
preheat = False
polyterra_white = False
nmfan_on = False
polyterra_marble = False
polylite_black = False
purgeline = False
probe_calibrate = False
probe_accuracy = False
polyterra_gray = False
polylite_gray = False
polyterra_black = False
status_busy = False
print_start = False
status_meshing = False
status_calibrating_z = False
test_speed = False
status_off = False
status_leveling = False
status_ready = False
set_nozzle_leds_on = False
set_nozzle_leds_off = False
set_logo_leds_off = False
status_heating = False
status_homing = False
status_cleaning = False
status_printing = False
abs_offset = False
beep = False
blk_paramount = False
cg28 = False
polyterra_blue = False
pause = False
measure_resonnances_x = False
m600 = False
measure_resonnances_y = False
polyterra_candy = False
polyterra_purp = False
sparta_black = False
query_air_filter = False
print_end = False
z_tilt_adjust = False
reset_air_filter = False
polylite_black_asa = False
ziro_marble = False
ziro_sparkle = False
sparta_purple = False
status_caution = False
sparta_gray = False
calibrate_z = False
cancel_print = False
axes_shaper_calibration = False
beep_error = False
belts_shaper_calibration = False
beep_success = False
excitate_axis_at_freq = False
compute_flow_multiplier = False
flow_multiplier_calibration = False
manual_flow_calibration = False
line_purge = False
prime_blob = False
polylite_black_abs = False
polylite_yellow_asa = False
pressure_advance_calibration = False
setup_kamp_meshing = False
sparta_reset = False
setup_line_purge = False
sparta_offset = False
print_reset = False

[graph Printer]
heater_bed = False
extruder = False

=======================
2024-02-07 18:04:27,029 [config.py:__init__()] - Configured printers: [
  {
    "Zarya": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-07 18:04:27,079 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-07 18:04:27,079 [config.py:install_language()] - Using lang en
2024-02-07 18:04:27,091 [screen.py:__init__()] - Screen resolution: 800x480
2024-02-07 18:04:27,092 [KlippyGtk.py:__init__()] - Font size: 18.0 (large)
2024-02-07 18:04:27,675 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 300
2024-02-07 18:04:27,683 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-07 18:04:27,690 [screen.py:initial_connection()] - Default printer: None
2024-02-07 18:04:27,721 [screen.py:connect_printer()] - Connecting to printer: Zarya
2024-02-07 18:04:27,722 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-07 18:04:27,758 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-07 18:04:27,766 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-07 18:04:27,776 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-07 18:04:27,784 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-07 18:04:27,785 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-07 18:04:27,792 [_logging.py:info()] - Websocket connected
2024-02-07 18:04:27,792 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-07 18:04:27,874 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-07 18:04:27,881 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-07 18:04:27,881 [printer.py:configure_cameras()] - Cameras: []
2024-02-07 18:04:27,882 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ['[update_manager]: Failed to load extension KlipperScreen: Invalid path for option `path` in section [update_manager KlipperScreen]: Path `/home/pi/KlipperScreen` does not exist', "Unparsed config option 'origin: https://github.com/KlipperScreen/KlipperScreen.git' detected in section [update_manager KlipperScreen].  This may be an option no longer available or could be the result of a module that failed to load.  In the future this will result in a startup error.", "Unparsed config option 'virtualenv: ~/.KlipperScreen-env' detected in section [update_manager KlipperScreen].  This may be an option no longer available or could be the result of a module that failed to load.  In the future this will result in a startup error.", "Unparsed config option 'requirements: scripts/KlipperScreen-requirements.txt' detected in section [update_manager KlipperScreen].  This may be an option no longer available or could be the result of a module that failed to load.  In the future this will result in a startup error.", "Unparsed config option 'system_dependencies: scripts/system-dependencies.json' detected in section [update_manager KlipperScreen].  This may be an option no longer available or could be the result of a module that failed to load.  In the future this will result in a startup error.", "Unparsed config option 'managed_services: KlipperScreen' detected in section [update_manager KlipperScreen].  This may be an option no longer available or could be the result of a module that failed to load.  In the future this will result in a startup error."], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-07 18:04:27,888 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-07 18:04:28,005 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-07 18:04:28,008 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_prefix': '\\\\'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pauses Print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'gcode_macro POLYLITE_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026'}, 'gcode_macro POLYLITE_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro SPARTA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325'}, 'gcode_macro SPARTA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300'}, 'gcode_macro SPARTA_PURPLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro POLYLITE_BLACK_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510'}, 'gcode_macro POLYLITE_BLACK_ABS': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYLITE_YELLOW_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro FILAMENT_RESET': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro ABS_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0'}, 'gcode_macro PRINT_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0'}, 'gcode_macro PRINT_RESET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0'}, 'gcode_macro Clean_Filament_Cold_Pull': {'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince', 'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0'}, 'gcode_macro Manual_Clean': {'description': 'Grab a Brush ready, Start Scrubbing!', 'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0'}, 'gcode_macro LOAD_FILAMENT_PLA': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro LOAD_FILAMENT_ABS': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_PLA': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_ABS': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro POLYTERRA_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031'}, 'gcode_macro POLYTERRA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro POLYTERRA_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550'}, 'gcode_macro POLYTERRA_CANDY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035'}, 'gcode_macro POLYTERRA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYTERRA_BLUE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445'}, 'gcode_macro POLYTERRA_LAV': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054'}, 'gcode_macro ZIRO_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252'}, 'gcode_macro JESSIE_TAN': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029'}, 'gcode_macro SUNLU_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066'}, 'gcode_macro M600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Run standard input shaper test for all axes', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Run custom demi-axe test to analyze belts on CoreXY printers', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations', 'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400'}, 'gcode_macro XYBelt_Tension': {'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115', 'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': '300.0', 'verbose': 'True'}, 'heater_bed': {'pwm_cycle_time': '0.0166', 'heater_pin': 'HEATER_BED', 'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_BED', 'max_power': '0.5', 'min_temp': '-20', 'max_temp': '120', 'control': 'pid', 'pid_kp': '33.946', 'pid_ki': '0.997', 'pid_kd': '288.961'}, 'extruder': {'step_pin': 'nhk:gpio23', 'dir_pin': 'nhk:gpio24', 'enable_pin': '!nhk:gpio25', 'rotation_distance': '47.088', 'gear_ratio': '9:1', 'microsteps': '16', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'nhk:gpio9', 'sensor_pin': 'nhk:gpio29', 'pullup_resistor': '2200', 'sensor_type': 'PT1000', 'min_temp': '10', 'max_temp': '280', 'max_power': '1.0', 'min_extrude_temp': '10', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'control': 'pid', 'pid_kp': '26.239', 'pid_ki': '1.965', 'pid_kd': '87.574'}, 'tmc2209 extruder': {'stealthchop_threshold': '0', 'run_current': '0.6', 'interpolate': 'false', 'sense_resistor': '0.100', 'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1'}, 'firmware_retraction': {'retract_length': '0.5', 'retract_speed': '30', 'unretract_speed': '30'}, 'heater_fan hotend_fan': {'pin': 'nhk:gpio5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'nhk:gpio6', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.010'}, 'output_pin caselight': {'pin': 'HEATER_LED', 'pwm': 'true', 'cycle_time': '0.01', 'value': '0.15'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_CHM', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'temperature_sensor Pi': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'heater_fan Vent': {'pin': 'BAY_1', 'max_power': '1', 'kick_start_time': '0.5', 'shutdown_speed': '0', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '0.40', 'cycle_time': '0.008'}, 'fan_generic BoomBox': {'pin': 'NMFAN', 'shutdown_speed': '0.0', 'hardware_pwm': 'False', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.008'}, 'fan_generic BedFans': {'pin': 'BEDFAN', 'kick_start_time': '0.5', 'cycle_time': '0.008'}, 'output_pin beeper': {'pin': 'BUZZ', 'value': '0', 'shutdown_value': '0', 'pwm': 'True', 'cycle_time': '0.0005'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00'}, 'board_pins': {'aliases': '\n\n\nB_MOTOR_EN=PF14,  B_MOTOR_STEP=PF13,  B_MOTOR_DIR=PF12,  B_MOTOR_UART=PC4,\n\nA_MOTOR_EN=PF15,  A_MOTOR_STEP=PG0,  A_MOTOR_DIR=PG1,  A_MOTOR_UART=PD11,\n\nEXTRUDER_EN=PG5,  EXTRUDER_STEP=PF11,  EXTRUDER_DIR=PG3,  EXTRUDER_UART=PC6,\n\n\n\nZ_ZERO_EN=PF1,  Z_ZERO_STEP=PC13,  Z_ZERO_DIR=PF0,  Z_ZERO_UART=PE4,\n\nZ_ONE_EN=PD4,  Z_ONE_STEP=PE2,  Z_ONE_DIR=PE3,  Z_ONE_UART=PE1,\n\nZ_TWO_EN=PE0,  Z_TWO_STEP=PE6,  Z_TWO_DIR=PA14, Z_TWO_UART=PD3,\n\n\n\nHEATER_BED=PA3, HEATER_HE=PA2, HEATER_LED=PB10,\n\nTEMP_BED=PF3, TEMP_HE=PF4, TEMP_CHM=PF5,\n\nBAY_1=PD12, BEDFAN=PA8, NMFAN=PE5, BUZZ=PD15,\n\nENDSTOP_Z=PG10,  ENDSTOP_X=PG6,  ENDSTOP_Y=PG9, PROBE=PG13, BTTFS=PG14, RGBLED=PB0'}, 'stepper_z': {'endstop_pin': 'probe:z_virtual_endstop', 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'enable_pin': '!Z_ZERO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200', 'position_max': '200', 'position_min': '-10', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'probe': {'pin': 'nhk:gpio10', 'z_offset': '7.180', 'x_offset': '0', 'y_offset': '19.75', 'speed': '8.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.0075', 'samples_tolerance_retries': '3'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '120', 'retries': '3', 'retry_tolerance': '0.0075', 'horizontal_move_z': '10'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '8', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'probe_count': '5,5', 'zero_reference_position': '150, 150', 'algorithm': 'bicubic', 'fade_start': '0.6', 'fade_end': '10', 'fade_target': '0'}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': '3', 'color_order': 'RGBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'stepper_x': {'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'enable_pin': '!B_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true', 'endstop_pin': 'nhk:gpio12'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'enable_pin': '!A_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'ENDSTOP_Y', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'enable_pin': '!Z_ONE_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'enable_pin': '!Z_TWO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00'}, 'output_pin act_led': {'pin': '!nhk:gpio8'}, 'adxl345': {'cs_pin': 'nhk:gpio21', 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_mosi_pin': 'nhk:gpio20', 'spi_software_miso_pin': 'nhk:gpio19'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n155, 155, 20'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor Nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'sensor_pin': 'nhk:gpio26', 'pullup_resistor': '2200', 'min_temp': '0', 'max_temp': '100'}, 'filament_motion_sensor filament_sensor': {'detection_length': '14', 'extruder': 'extruder', 'switch_pin': '^BTTFS', 'pause_on_runout': 'True', 'insert_gcode': '\nNozzle_ON', 'runout_gcode': '\nBEEP_ERROR\nPAUSE'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_OFF': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_ON': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1'}, 'gcode_macro _AIR_FILTER_VARIABLES': {'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1', 'gcode': ''}, 'gcode_macro RESET_AIR_FILTER': {'description': 'Resets the air-filter replacement timer', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }'}, 'gcode_macro QUERY_AIR_FILTER': {'description': 'Displays the amount of time the air filter has run since it was last reset.', 'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }'}, 'delayed_gcode _AIR_FILTER_TIMER': {'initial_duration': '1', 'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1"}, 'delayed_gcode _AIR_FILTER_FLUSH_TIMER': {'initial_duration': '300', 'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300"}, 'gcode_macro HEATSOAKER': {'description': 'HeatSoak for an Hour', 'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999'}, 'gcode_macro BEEP': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}'}, 'gcode_macro BEEP_SUCCESS': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000'}, 'gcode_macro BEEP_ERROR': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100'}, 'gcode_macro CG28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CHOME': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CENTER_ACCURACY': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY'}, 'gcode_macro Lights_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro Lights_ON': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25'}, 'gcode_macro PID_HOTEND': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260'}, 'gcode_macro PID_BED': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110'}, 'gcode_macro MANUAL_FLOW_CALIBRATION': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'delayed_gcode HEATSOAK_DELAY': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}'}, 'gcode_macro HEATSOAK_TIMER': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}'}, 'gcode_macro PARK_FRONT': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT'}, 'gcode_macro PARK_FRONT_LOW': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW'}, 'gcode_macro PARK_REAR': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR'}, 'gcode_macro PARK_CENTER': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER'}, 'gcode_macro PARK_BED': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED'}, 'gcode_macro FORCE_BED_DOWN': {'description': 'Force move bed down without homing', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_UP': {'description': 'Force move bed down without homing.', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_LOCK': {'description': 'Active Z steppers to lock down the bed, Without Homing', 'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90'}, 'gcode_macro FORCE_BED_UNLOCK': {'description': 'Unlocks the Bed', 'gcode': '\nM84'}, 'delayed_gcode FILTER_AIR_STOP': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}'}, 'gcode_macro PRIME_BLOB': {'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.', 'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state'}, 'gcode_macro RINGING_TOWER': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_MZV': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_EI': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro PRIMING': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107'}, 'gcode_macro CLEAN': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro Z_TILT_ADJUST': {'rename_existing': '_Z_TILT_ADJUST', 'description': '', 'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro Smart_Park': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'exclude_object': {}, 'skew_correction': {}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '10000', 'max_z_velocity': '15', 'max_z_accel': '50', 'square_corner_velocity': '5.0'}, 'input_shaper': {'shaper_freq_x': '82.96', 'shaper_freq_y': '66.66'}, 'bed_mesh default': {'version': '1', 'points': '\n0.048750, 0.068750, 0.040000, 0.078750, 0.070000\n0.050000, 0.067500, 0.053750, 0.063750, 0.090000\n0.006250, 0.036250, 0.000000, 0.045000, 0.075000\n0.021250, 0.082500, 0.071250, 0.081250, 0.098750\n-0.025000, 0.068750, 0.046250, 0.088750, 0.078750', 'tension': '0.2', 'min_x': '40.0', 'algo': 'bicubic', 'y_count': '5', 'mesh_y_pps': '2', 'min_y': '40.0', 'x_count': '5', 'max_y': '260.0', 'mesh_x_pps': '2', 'max_x': '260.0'}, 'skew_correction my_skew_profile': {'xy_skew': '-0.000802972249612', 'xz_skew': '0.0', 'yz_skew': '0.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': '\\\\'}, 'gcode_macro cancel_print': {'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}', 'rename_existing': 'BASE_PAUSE', 'description': 'Pauses Print'}, 'gcode_macro resume': {'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'rename_existing': 'BASE_RESUME', 'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro polylite_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026', 'description': 'G-Code macro'}, 'gcode_macro polylite_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro sparta_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325', 'description': 'G-Code macro'}, 'gcode_macro sparta_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300', 'description': 'G-Code macro'}, 'gcode_macro sparta_purple': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_abs': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polylite_yellow_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro filament_reset': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro abs_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_reset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro clean_filament_cold_pull': {'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0', 'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince'}, 'gcode_macro manual_clean': {'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0', 'description': 'Grab a Brush ready, Start Scrubbing!'}, 'gcode_macro load_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro load_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro polyterra_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031', 'description': 'G-Code macro'}, 'gcode_macro polyterra_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro polyterra_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550', 'description': 'G-Code macro'}, 'gcode_macro polyterra_candy': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035', 'description': 'G-Code macro'}, 'gcode_macro polyterra_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polyterra_blue': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445', 'description': 'G-Code macro'}, 'gcode_macro polyterra_lav': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054', 'description': 'G-Code macro'}, 'gcode_macro ziro_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252', 'description': 'G-Code macro'}, 'gcode_macro jessie_tan': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029', 'description': 'G-Code macro'}, 'gcode_macro sunlu_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER', 'description': 'Run standard input shaper test for all axes'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS', 'description': 'Run custom demi-axe test to analyze belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400', 'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations'}, 'gcode_macro xybelt_tension': {'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }', 'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': 300.0, 'verbose': True}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_BED', 'min_temp': -20.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.5, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 33.946, 'pid_ki': 0.997, 'pid_kd': 288.961, 'heater_pin': 'HEATER_BED', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'tmc2209 extruder': {'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.1, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'PT1000', 'pullup_resistor': 2200.0, 'sensor_pin': 'nhk:gpio29', 'min_temp': 10.0, 'max_temp': 280.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.239, 'pid_ki': 1.965, 'pid_kd': 87.574, 'heater_pin': 'nhk:gpio9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'nhk:gpio23', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'nhk:gpio24', 'rotation_distance': 47.088, 'full_steps_per_rotation': 200, 'gear_ratio': [[9.0, 1.0]], 'enable_pin': '!nhk:gpio25'}, 'firmware_retraction': {'retract_length': 0.5, 'retract_speed': 30.0, 'unretract_extra_length': 0.0, 'unretract_speed': 30.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'nhk:gpio5', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'nhk:gpio6'}, 'output_pin caselight': {'pwm': True, 'pin': 'HEATER_LED', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.15, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_CHM', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'temperature_sensor pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'heater_fan vent': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BAY_1', 'fan_speed': 0.4}, 'fan_generic boombox': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'NMFAN'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BEDFAN'}, 'output_pin beeper': {'pwm': True, 'pin': 'BUZZ', 'cycle_time': 0.0005, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['B_MOTOR_EN', 'PF14'], ['B_MOTOR_STEP', 'PF13'], ['B_MOTOR_DIR', 'PF12'], ['B_MOTOR_UART', 'PC4'], ['A_MOTOR_EN', 'PF15'], ['A_MOTOR_STEP', 'PG0'], ['A_MOTOR_DIR', 'PG1'], ['A_MOTOR_UART', 'PD11'], ['EXTRUDER_EN', 'PG5'], ['EXTRUDER_STEP', 'PF11'], ['EXTRUDER_DIR', 'PG3'], ['EXTRUDER_UART', 'PC6'], ['Z_ZERO_EN', 'PF1'], ['Z_ZERO_STEP', 'PC13'], ['Z_ZERO_DIR', 'PF0'], ['Z_ZERO_UART', 'PE4'], ['Z_ONE_EN', 'PD4'], ['Z_ONE_STEP', 'PE2'], ['Z_ONE_DIR', 'PE3'], ['Z_ONE_UART', 'PE1'], ['Z_TWO_EN', 'PE0'], ['Z_TWO_STEP', 'PE6'], ['Z_TWO_DIR', 'PA14'], ['Z_TWO_UART', 'PD3'], ['HEATER_BED', 'PA3'], ['HEATER_HE', 'PA2'], ['HEATER_LED', 'PB10'], ['TEMP_BED', 'PF3'], ['TEMP_HE', 'PF4'], ['TEMP_CHM', 'PF5'], ['BAY_1', 'PD12'], ['BEDFAN', 'PA8'], ['NMFAN', 'PE5'], ['BUZZ', 'PD15'], ['ENDSTOP_Z', 'PG10'], ['ENDSTOP_X', 'PG6'], ['ENDSTOP_Y', 'PG9'], ['PROBE', 'PG13'], ['BTTFS', 'PG14'], ['RGBLED', 'PB0']]}, 'probe': {'z_offset': 7.18, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'nhk:gpio10', 'speed': 8.0, 'lift_speed': 8.0, 'x_offset': 0.0, 'y_offset': 19.75, 'samples': 3, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.0075, 'samples_tolerance_retries': 3}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 3, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 120.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [150.0, 150.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 8.0, 'speed': 150.0, 'fade_start': 0.6, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.04875, 0.06875, 0.04, 0.07875, 0.07], [0.05, 0.0675, 0.05375, 0.06375, 0.09], [0.00625, 0.03625, 0.0, 0.045, 0.075], [0.02125, 0.0825, 0.07125, 0.08125, 0.09875], [-0.025, 0.06875, 0.04625, 0.08875, 0.07875]], 'min_x': 40.0, 'max_x': 260.0, 'min_y': 40.0, 'max_y': 260.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': 3, 'color_order': ['RGBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!B_MOTOR_EN', 'endstop_pin': 'nhk:gpio12', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!A_MOTOR_EN', 'endstop_pin': 'ENDSTOP_Y', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ZERO_EN', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 200.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ONE_EN'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_TWO_EN'}, 'output_pin act_led': {'pwm': False, 'pin': '!nhk:gpio8', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'nhk:gpio21', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_miso_pin': 'nhk:gpio19', 'spi_software_mosi_pin': 'nhk:gpio20'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[155.0, 155.0, 20.0]], 'accel_chip': 'adxl345'}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'pullup_resistor': 2200.0, 'inline_resistor': 0.0, 'sensor_pin': 'nhk:gpio26', 'min_temp': 0.0, 'max_temp': 100.0}, 'filament_motion_sensor filament_sensor': {'switch_pin': '^BTTFS', 'extruder': 'extruder', 'detection_length': 14.0, 'pause_on_runout': True, 'runout_gcode': '\nBEEP_ERROR\nPAUSE', 'insert_gcode': '\nNozzle_ON', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro fs_off': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro fs_on': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro _air_filter_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1'}, 'gcode_macro reset_air_filter': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }', 'description': 'Resets the air-filter replacement timer'}, 'gcode_macro query_air_filter': {'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }', 'description': 'Displays the amount of time the air filter has run since it was last reset.'}, 'delayed_gcode _air_filter_timer': {'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1", 'initial_duration': 1.0}, 'delayed_gcode _air_filter_flush_timer': {'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300", 'initial_duration': 300.0}, 'gcode_macro heatsoaker': {'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999', 'description': 'HeatSoak for an Hour'}, 'gcode_macro beep': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro beep_success': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000', 'description': 'G-Code macro'}, 'gcode_macro beep_error': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100', 'description': 'G-Code macro'}, 'gcode_macro cg28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro chome': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro center_accuracy': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro lights_on': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25', 'description': 'G-Code macro'}, 'gcode_macro pid_hotend': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260', 'description': 'G-Code macro'}, 'gcode_macro pid_bed': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110', 'description': 'G-Code macro'}, 'gcode_macro manual_flow_calibration': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'delayed_gcode heatsoak_delay': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro heatsoak_timer': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}', 'description': 'G-Code macro'}, 'gcode_macro park_front': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT', 'description': 'G-Code macro'}, 'gcode_macro park_front_low': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW', 'description': 'G-Code macro'}, 'gcode_macro park_rear': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR', 'description': 'G-Code macro'}, 'gcode_macro park_center': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER', 'description': 'G-Code macro'}, 'gcode_macro park_bed': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED', 'description': 'G-Code macro'}, 'gcode_macro force_bed_down': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing'}, 'gcode_macro force_bed_up': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing.'}, 'gcode_macro force_bed_lock': {'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90', 'description': 'Active Z steppers to lock down the bed, Without Homing'}, 'gcode_macro force_bed_unlock': {'gcode': '\nM84', 'description': 'Unlocks the Bed'}, 'delayed_gcode filter_air_stop': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro print_end': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro prime_blob': {'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state', 'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.'}, 'gcode_macro ringing_tower': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_mzv': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_ei': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro priming': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000', 'description': 'G-Code macro'}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount'}, 'gcode_macro z_tilt_adjust': {'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0', 'rename_existing': '_Z_TILT_ADJUST', 'description': ''}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'skew_correction my_skew_profile': {'xy_skew': -0.000802972249612, 'xz_skew': 0.0, 'yz_skew': 0.0}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 82.96, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 66.66}, 'printer': {'max_velocity': 300.0, 'max_accel': 10000.0, 'max_accel_to_decel': 5000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 50.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-07 18:04:28,013 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 18:04:28,014 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-07 18:04:28,014 [printer.py:reinit()] - # Extruders: 1
2024-02-07 18:04:28,014 [printer.py:reinit()] - # Temperature devices: 5
2024-02-07 18:04:28,014 [printer.py:reinit()] - # Fans: 5
2024-02-07 18:04:28,014 [printer.py:reinit()] - # Output pins: 3
2024-02-07 18:04:28,014 [printer.py:reinit()] - # Leds: 1
2024-02-07 18:04:28,026 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-07 18:04:28,028 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-07 18:04:28,313 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor Pi&temperature_sensor Octopus&temperature_sensor Nitehawk&fan&fan_generic BoomBox&fan_generic BedFans&heater_fan hotend_fan&heater_fan Vent&filament_motion_sensor filament_sensor&output_pin caselight&output_pin beeper&output_pin act_led&neopixel sb_leds
2024-02-07 18:04:28,317 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-07 18:04:28,317 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-07 18:04:28,317 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-07 18:04:28,318 [screen.py:init_klipper()] - Printer initialized
2024-02-07 18:04:28,318 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-07 18:04:28,318 [printer.py:change_state()] - Adding callback for state: ready
2024-02-07 18:04:28,323 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-07 18:04:28,405 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-07 18:04:28,422 [main_menu.py:add_device()] - Adding device: extruder
2024-02-07 18:04:28,427 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-07 18:04:28,431 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-07 18:04:28,432 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-07 18:04:28,432 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-07 18:04:28,432 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-07 18:04:28,456 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-07 18:04:28,465 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-07 18:04:28,473 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor Pi', 'temperature_sensor Octopus', 'temperature_sensor Nitehawk', 'extruder']
2024-02-07 18:04:28,481 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-07 18:04:28,481 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-07 18:04:33,291 [screen.py:_go_to_submenu()] - #### Go to submenu my_macros_menu
2024-02-07 18:04:33,292 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-07 18:04:33,295 [screen.py:_load_panel()] - Loading panel: menu
2024-02-07 18:04:33,371 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > my_macros_menu
2024-02-07 18:04:35,894 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-07 18:04:35,916 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-07 18:07:57,367 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-07 18:07:57,367 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-07 18:07:57,373 [screen.py:_load_panel()] - Loading panel: menu
2024-02-07 18:07:57,565 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-07 18:07:57,580 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-07 18:07:57,597 [menu.py:arrangeMenuItems()] - X > more power
2024-02-07 18:07:57,599 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-07 18:07:57,609 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-07 18:08:05,283 [screen.py:_load_panel()] - Loading panel: system
2024-02-07 18:08:05,318 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/machine/system_info
2024-02-07 18:08:05,370 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > system
2024-02-07 18:08:05,395 [system.py:get_updates()] - {'jsonrpc': '2.0', 'result': {'github_rate_limit': None, 'github_requests_remaining': None, 'github_limit_reset_time': None, 'version_info': {'system': {'package_count': 39, 'package_list': ['bluez', 'firmware-atheros', 'firmware-brcm80211', 'firmware-libertas', 'firmware-misc-nonfree', 'firmware-realtek', 'kms++-utils', 'libbluetooth3', 'libc-bin', 'libc-dev-bin', 'libc-devtools', 'libc-l10n', 'libc6', 'libc6-dbg', 'libc6-dev', 'libcamera-apps-lite', 'libkms++0', 'linux-headers-rpi-2712', 'linux-headers-rpi-v8', 'linux-image-rpi-2712', 'linux-image-rpi-v8', 'linux-kbuild-6.1', 'linux-libc-dev', 'locales', 'openssh-client', 'openssh-server', 'openssh-sftp-server', 'raspberrypi-net-mods', 'raspberrypi-sys-mods', 'raspi-config', 'raspi-firmware', 'rpi-eeprom', 'rpicam-apps-lite', 'ssh', 'linux-headers-6.1.0-rpi8-common-rpi', 'linux-headers-6.1.0-rpi8-rpi-2712', 'linux-headers-6.1.0-rpi8-rpi-v8', 'linux-image-6.1.0-rpi8-rpi-2712', 'linux-image-6.1.0-rpi8-rpi-v8']}, 'moonraker': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Arksine', 'repo_name': 'moonraker', 'remote_url': 'https://github.com/Arksine/moonraker.git', 'recovery_url': 'https://github.com/Arksine/moonraker.git', 'version': 'v0.8.0-309', 'remote_version': 'v0.8.0-309', 'rollback_version': 'v0.8.0-309', 'current_hash': 'f946e6a28d7506d8da16851cbf730fa89b267926', 'remote_hash': 'f946e6a28d7506d8da16851cbf730fa89b267926', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.8.0-309-gf946e6a2', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'klipper': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Klipper3d', 'repo_name': 'klipper', 'remote_url': 'https://github.com/Klipper3d/klipper', 'recovery_url': 'https://github.com/Klipper3d/klipper', 'version': 'v0.12.0-102', 'remote_version': 'v0.12.0-102', 'rollback_version': 'v0.12.0-102', 'current_hash': '9f41f53c5e364694b9b41279b3b3aee34250b93a', 'remote_hash': '9f41f53c5e364694b9b41279b3b3aee34250b93a', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.12.0-102-g9f41f53c', 'pristine': False, 'corrupt': False, 'warnings': [], 'anomalies': ["Repo has untracked source files: ['klippy/extras/gcode_shell_command.py']"]}}, 'busy': False}, 'id': 4}
2024-02-07 18:08:05,402 [system.py:_needs_update()] - system  -> 39
2024-02-07 18:08:08,836 [KlippyGtk.py:Dialog()] - Showing dialog Shutdown (width=800, height=480)
2024-02-07 18:08:13,403 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-07 18:08:31,921 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-07 18:08:31,921 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-88-gc832c90
2024-02-07 18:08:31,921 [functions.py:log_start()] - Python version: 3.11
2024-02-07 18:08:32,044 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-07 18:08:32,044 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-07 18:08:32,062 [config.py:log_config()] -  ===== Config File =====
[printer Zarya]

[menu __main my_macros_menu]
name = Macros

[menu __main my_macros_menu sub_macro_item]
name = PARK CENTER
method = printer.gcode.script
params = {"script":"PARK_CENTER"}

[menu __main my_macros_menu sub_macro_item2]
name = Force Bed Down
method = printer.gcode.script
params = {"script":"force_bed_down DISTANCE=4"}

[menu __main my_macros_menu sub_macro_item3]
name = HEATSOAKER
method = printer.gcode.script
params = {"script":"HEATSOAKER"}
=======================
2024-02-07 18:08:32,068 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
screen_blanking = 300
24htime = False
side_macro_shortcut = False
font_size = large
only_heaters = True
invert_z = True
move_speed_xy = 199

[displayed_macros Printer]
attach_probe = False
bed_mesh_calibrate = False
attach_probe_lock = False
center_toolhead = False
dock_probe = False
g32 = False
dock_probe_unlock = False
jessie_tan = False
center_accuracy = False
filament_reset = False
jessie_soulblack = False
m900 = False
preheat = False
polyterra_white = False
nmfan_on = False
polyterra_marble = False
polylite_black = False
purgeline = False
probe_calibrate = False
probe_accuracy = False
polyterra_gray = False
polylite_gray = False
polyterra_black = False
status_busy = False
print_start = False
status_meshing = False
status_calibrating_z = False
test_speed = False
status_off = False
status_leveling = False
status_ready = False
set_nozzle_leds_on = False
set_nozzle_leds_off = False
set_logo_leds_off = False
status_heating = False
status_homing = False
status_cleaning = False
status_printing = False
abs_offset = False
beep = False
blk_paramount = False
cg28 = False
polyterra_blue = False
pause = False
measure_resonnances_x = False
m600 = False
measure_resonnances_y = False
polyterra_candy = False
polyterra_purp = False
sparta_black = False
query_air_filter = False
print_end = False
z_tilt_adjust = False
reset_air_filter = False
polylite_black_asa = False
ziro_marble = False
ziro_sparkle = False
sparta_purple = False
status_caution = False
sparta_gray = False
calibrate_z = False
cancel_print = False
axes_shaper_calibration = False
beep_error = False
belts_shaper_calibration = False
beep_success = False
excitate_axis_at_freq = False
compute_flow_multiplier = False
flow_multiplier_calibration = False
manual_flow_calibration = False
line_purge = False
prime_blob = False
polylite_black_abs = False
polylite_yellow_asa = False
pressure_advance_calibration = False
setup_kamp_meshing = False
sparta_reset = False
setup_line_purge = False
sparta_offset = False
print_reset = False

[graph Printer]
heater_bed = False
extruder = False

=======================
2024-02-07 18:08:32,068 [config.py:__init__()] - Configured printers: [
  {
    "Zarya": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-07 18:08:32,130 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-07 18:08:32,130 [config.py:install_language()] - Using lang en
2024-02-07 18:08:32,143 [screen.py:__init__()] - Screen resolution: 800x480
2024-02-07 18:08:32,143 [KlippyGtk.py:__init__()] - Font size: 18.0 (large)
2024-02-07 18:08:32,859 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 300
2024-02-07 18:08:32,866 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-07 18:08:32,872 [screen.py:initial_connection()] - Default printer: None
2024-02-07 18:08:32,905 [screen.py:connect_printer()] - Connecting to printer: Zarya
2024-02-07 18:08:32,906 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-07 18:08:32,945 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-07 18:08:32,954 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-07 18:08:32,967 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-07 18:08:32,976 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-07 18:08:32,977 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-07 18:08:32,984 [_logging.py:info()] - Websocket connected
2024-02-07 18:08:32,984 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-07 18:08:33,079 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-07 18:08:33,086 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-07 18:08:33,086 [printer.py:configure_cameras()] - Cameras: []
2024-02-07 18:08:33,086 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-07 18:08:33,094 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-07 18:08:33,346 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-07 18:08:33,350 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_prefix': '\\\\'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pauses Print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'gcode_macro POLYLITE_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026'}, 'gcode_macro POLYLITE_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro SPARTA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325'}, 'gcode_macro SPARTA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300'}, 'gcode_macro SPARTA_PURPLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro POLYLITE_BLACK_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510'}, 'gcode_macro POLYLITE_BLACK_ABS': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYLITE_YELLOW_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro FILAMENT_RESET': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro ABS_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0'}, 'gcode_macro PRINT_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0'}, 'gcode_macro PRINT_RESET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0'}, 'gcode_macro Clean_Filament_Cold_Pull': {'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince', 'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0'}, 'gcode_macro Manual_Clean': {'description': 'Grab a Brush ready, Start Scrubbing!', 'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0'}, 'gcode_macro LOAD_FILAMENT_PLA': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro LOAD_FILAMENT_ABS': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_PLA': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_ABS': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro POLYTERRA_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031'}, 'gcode_macro POLYTERRA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro POLYTERRA_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550'}, 'gcode_macro POLYTERRA_CANDY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035'}, 'gcode_macro POLYTERRA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYTERRA_BLUE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445'}, 'gcode_macro POLYTERRA_LAV': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054'}, 'gcode_macro ZIRO_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252'}, 'gcode_macro JESSIE_TAN': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029'}, 'gcode_macro SUNLU_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066'}, 'gcode_macro M600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Run standard input shaper test for all axes', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Run custom demi-axe test to analyze belts on CoreXY printers', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations', 'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400'}, 'gcode_macro XYBelt_Tension': {'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115', 'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': '300.0', 'verbose': 'True'}, 'heater_bed': {'pwm_cycle_time': '0.0166', 'heater_pin': 'HEATER_BED', 'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_BED', 'max_power': '0.5', 'min_temp': '-20', 'max_temp': '120', 'control': 'pid', 'pid_kp': '33.946', 'pid_ki': '0.997', 'pid_kd': '288.961'}, 'extruder': {'step_pin': 'nhk:gpio23', 'dir_pin': 'nhk:gpio24', 'enable_pin': '!nhk:gpio25', 'rotation_distance': '47.088', 'gear_ratio': '9:1', 'microsteps': '16', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'nhk:gpio9', 'sensor_pin': 'nhk:gpio29', 'pullup_resistor': '2200', 'sensor_type': 'PT1000', 'min_temp': '10', 'max_temp': '280', 'max_power': '1.0', 'min_extrude_temp': '10', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'control': 'pid', 'pid_kp': '26.239', 'pid_ki': '1.965', 'pid_kd': '87.574'}, 'tmc2209 extruder': {'stealthchop_threshold': '0', 'run_current': '0.6', 'interpolate': 'false', 'sense_resistor': '0.100', 'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1'}, 'firmware_retraction': {'retract_length': '0.5', 'retract_speed': '30', 'unretract_speed': '30'}, 'heater_fan hotend_fan': {'pin': 'nhk:gpio5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'nhk:gpio6', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.010'}, 'output_pin caselight': {'pin': 'HEATER_LED', 'pwm': 'true', 'cycle_time': '0.01', 'value': '0.15'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_CHM', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'temperature_sensor Pi': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'heater_fan Vent': {'pin': 'BAY_1', 'max_power': '1', 'kick_start_time': '0.5', 'shutdown_speed': '0', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '0.40', 'cycle_time': '0.008'}, 'fan_generic BoomBox': {'pin': 'NMFAN', 'shutdown_speed': '0.0', 'hardware_pwm': 'False', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.008'}, 'fan_generic BedFans': {'pin': 'BEDFAN', 'kick_start_time': '0.5', 'cycle_time': '0.008'}, 'output_pin beeper': {'pin': 'BUZZ', 'value': '0', 'shutdown_value': '0', 'pwm': 'True', 'cycle_time': '0.0005'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00'}, 'board_pins': {'aliases': '\n\n\nB_MOTOR_EN=PF14,  B_MOTOR_STEP=PF13,  B_MOTOR_DIR=PF12,  B_MOTOR_UART=PC4,\n\nA_MOTOR_EN=PF15,  A_MOTOR_STEP=PG0,  A_MOTOR_DIR=PG1,  A_MOTOR_UART=PD11,\n\nEXTRUDER_EN=PG5,  EXTRUDER_STEP=PF11,  EXTRUDER_DIR=PG3,  EXTRUDER_UART=PC6,\n\n\n\nZ_ZERO_EN=PF1,  Z_ZERO_STEP=PC13,  Z_ZERO_DIR=PF0,  Z_ZERO_UART=PE4,\n\nZ_ONE_EN=PD4,  Z_ONE_STEP=PE2,  Z_ONE_DIR=PE3,  Z_ONE_UART=PE1,\n\nZ_TWO_EN=PE0,  Z_TWO_STEP=PE6,  Z_TWO_DIR=PA14, Z_TWO_UART=PD3,\n\n\n\nHEATER_BED=PA3, HEATER_HE=PA2, HEATER_LED=PB10,\n\nTEMP_BED=PF3, TEMP_HE=PF4, TEMP_CHM=PF5,\n\nBAY_1=PD12, BEDFAN=PA8, NMFAN=PE5, BUZZ=PD15,\n\nENDSTOP_Z=PG10,  ENDSTOP_X=PG6,  ENDSTOP_Y=PG9, PROBE=PG13, BTTFS=PG14, RGBLED=PB0'}, 'stepper_z': {'endstop_pin': 'probe:z_virtual_endstop', 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'enable_pin': '!Z_ZERO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200', 'position_max': '200', 'position_min': '-10', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'probe': {'pin': 'nhk:gpio10', 'z_offset': '7.180', 'x_offset': '0', 'y_offset': '19.75', 'speed': '8.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.0075', 'samples_tolerance_retries': '3'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '120', 'retries': '3', 'retry_tolerance': '0.0075', 'horizontal_move_z': '10'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '8', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'probe_count': '5,5', 'zero_reference_position': '150, 150', 'algorithm': 'bicubic', 'fade_start': '0.6', 'fade_end': '10', 'fade_target': '0'}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': '3', 'color_order': 'RGBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'stepper_x': {'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'enable_pin': '!B_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true', 'endstop_pin': 'nhk:gpio12'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'enable_pin': '!A_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'ENDSTOP_Y', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'enable_pin': '!Z_ONE_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'enable_pin': '!Z_TWO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00'}, 'output_pin act_led': {'pin': '!nhk:gpio8'}, 'adxl345': {'cs_pin': 'nhk:gpio21', 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_mosi_pin': 'nhk:gpio20', 'spi_software_miso_pin': 'nhk:gpio19'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n155, 155, 20'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor Nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'sensor_pin': 'nhk:gpio26', 'pullup_resistor': '2200', 'min_temp': '0', 'max_temp': '100'}, 'filament_motion_sensor filament_sensor': {'detection_length': '14', 'extruder': 'extruder', 'switch_pin': '^BTTFS', 'pause_on_runout': 'True', 'insert_gcode': '\nNozzle_ON', 'runout_gcode': '\nBEEP_ERROR\nPAUSE'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_OFF': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_ON': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1'}, 'gcode_macro _AIR_FILTER_VARIABLES': {'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1', 'gcode': ''}, 'gcode_macro RESET_AIR_FILTER': {'description': 'Resets the air-filter replacement timer', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }'}, 'gcode_macro QUERY_AIR_FILTER': {'description': 'Displays the amount of time the air filter has run since it was last reset.', 'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }'}, 'delayed_gcode _AIR_FILTER_TIMER': {'initial_duration': '1', 'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1"}, 'delayed_gcode _AIR_FILTER_FLUSH_TIMER': {'initial_duration': '300', 'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300"}, 'gcode_macro HEATSOAKER': {'description': 'HeatSoak for an Hour', 'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999'}, 'gcode_macro BEEP': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}'}, 'gcode_macro BEEP_SUCCESS': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000'}, 'gcode_macro BEEP_ERROR': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100'}, 'gcode_macro CG28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CHOME': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CENTER_ACCURACY': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY'}, 'gcode_macro Lights_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro Lights_ON': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25'}, 'gcode_macro PID_HOTEND': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260'}, 'gcode_macro PID_BED': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110'}, 'gcode_macro MANUAL_FLOW_CALIBRATION': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'delayed_gcode HEATSOAK_DELAY': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}'}, 'gcode_macro HEATSOAK_TIMER': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}'}, 'gcode_macro PARK_FRONT': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT'}, 'gcode_macro PARK_FRONT_LOW': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW'}, 'gcode_macro PARK_REAR': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR'}, 'gcode_macro PARK_CENTER': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER'}, 'gcode_macro PARK_BED': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED'}, 'gcode_macro FORCE_BED_DOWN': {'description': 'Force move bed down without homing', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_UP': {'description': 'Force move bed down without homing.', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_LOCK': {'description': 'Active Z steppers to lock down the bed, Without Homing', 'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90'}, 'gcode_macro FORCE_BED_UNLOCK': {'description': 'Unlocks the Bed', 'gcode': '\nM84'}, 'delayed_gcode FILTER_AIR_STOP': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}'}, 'gcode_macro PRIME_BLOB': {'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.', 'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state'}, 'gcode_macro RINGING_TOWER': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_MZV': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_EI': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro PRIMING': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107'}, 'gcode_macro CLEAN': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro Z_TILT_ADJUST': {'rename_existing': '_Z_TILT_ADJUST', 'description': '', 'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro Smart_Park': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'exclude_object': {}, 'skew_correction': {}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '10000', 'max_z_velocity': '15', 'max_z_accel': '50', 'square_corner_velocity': '5.0'}, 'input_shaper': {'shaper_freq_x': '82.96', 'shaper_freq_y': '66.66'}, 'bed_mesh default': {'version': '1', 'points': '\n0.048750, 0.068750, 0.040000, 0.078750, 0.070000\n0.050000, 0.067500, 0.053750, 0.063750, 0.090000\n0.006250, 0.036250, 0.000000, 0.045000, 0.075000\n0.021250, 0.082500, 0.071250, 0.081250, 0.098750\n-0.025000, 0.068750, 0.046250, 0.088750, 0.078750', 'tension': '0.2', 'min_x': '40.0', 'algo': 'bicubic', 'y_count': '5', 'mesh_y_pps': '2', 'min_y': '40.0', 'x_count': '5', 'max_y': '260.0', 'mesh_x_pps': '2', 'max_x': '260.0'}, 'skew_correction my_skew_profile': {'xy_skew': '-0.000802972249612', 'xz_skew': '0.0', 'yz_skew': '0.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': '\\\\'}, 'gcode_macro cancel_print': {'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}', 'rename_existing': 'BASE_PAUSE', 'description': 'Pauses Print'}, 'gcode_macro resume': {'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'rename_existing': 'BASE_RESUME', 'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro polylite_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026', 'description': 'G-Code macro'}, 'gcode_macro polylite_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro sparta_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325', 'description': 'G-Code macro'}, 'gcode_macro sparta_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300', 'description': 'G-Code macro'}, 'gcode_macro sparta_purple': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_abs': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polylite_yellow_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro filament_reset': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro abs_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_reset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro clean_filament_cold_pull': {'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0', 'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince'}, 'gcode_macro manual_clean': {'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0', 'description': 'Grab a Brush ready, Start Scrubbing!'}, 'gcode_macro load_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro load_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro polyterra_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031', 'description': 'G-Code macro'}, 'gcode_macro polyterra_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro polyterra_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550', 'description': 'G-Code macro'}, 'gcode_macro polyterra_candy': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035', 'description': 'G-Code macro'}, 'gcode_macro polyterra_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polyterra_blue': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445', 'description': 'G-Code macro'}, 'gcode_macro polyterra_lav': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054', 'description': 'G-Code macro'}, 'gcode_macro ziro_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252', 'description': 'G-Code macro'}, 'gcode_macro jessie_tan': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029', 'description': 'G-Code macro'}, 'gcode_macro sunlu_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER', 'description': 'Run standard input shaper test for all axes'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS', 'description': 'Run custom demi-axe test to analyze belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400', 'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations'}, 'gcode_macro xybelt_tension': {'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }', 'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': 300.0, 'verbose': True}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_BED', 'min_temp': -20.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.5, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 33.946, 'pid_ki': 0.997, 'pid_kd': 288.961, 'heater_pin': 'HEATER_BED', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'tmc2209 extruder': {'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.1, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'PT1000', 'pullup_resistor': 2200.0, 'sensor_pin': 'nhk:gpio29', 'min_temp': 10.0, 'max_temp': 280.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.239, 'pid_ki': 1.965, 'pid_kd': 87.574, 'heater_pin': 'nhk:gpio9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'nhk:gpio23', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'nhk:gpio24', 'rotation_distance': 47.088, 'full_steps_per_rotation': 200, 'gear_ratio': [[9.0, 1.0]], 'enable_pin': '!nhk:gpio25'}, 'firmware_retraction': {'retract_length': 0.5, 'retract_speed': 30.0, 'unretract_extra_length': 0.0, 'unretract_speed': 30.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'nhk:gpio5', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'nhk:gpio6'}, 'output_pin caselight': {'pwm': True, 'pin': 'HEATER_LED', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.15, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_CHM', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'temperature_sensor pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'heater_fan vent': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BAY_1', 'fan_speed': 0.4}, 'fan_generic boombox': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'NMFAN'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BEDFAN'}, 'output_pin beeper': {'pwm': True, 'pin': 'BUZZ', 'cycle_time': 0.0005, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['B_MOTOR_EN', 'PF14'], ['B_MOTOR_STEP', 'PF13'], ['B_MOTOR_DIR', 'PF12'], ['B_MOTOR_UART', 'PC4'], ['A_MOTOR_EN', 'PF15'], ['A_MOTOR_STEP', 'PG0'], ['A_MOTOR_DIR', 'PG1'], ['A_MOTOR_UART', 'PD11'], ['EXTRUDER_EN', 'PG5'], ['EXTRUDER_STEP', 'PF11'], ['EXTRUDER_DIR', 'PG3'], ['EXTRUDER_UART', 'PC6'], ['Z_ZERO_EN', 'PF1'], ['Z_ZERO_STEP', 'PC13'], ['Z_ZERO_DIR', 'PF0'], ['Z_ZERO_UART', 'PE4'], ['Z_ONE_EN', 'PD4'], ['Z_ONE_STEP', 'PE2'], ['Z_ONE_DIR', 'PE3'], ['Z_ONE_UART', 'PE1'], ['Z_TWO_EN', 'PE0'], ['Z_TWO_STEP', 'PE6'], ['Z_TWO_DIR', 'PA14'], ['Z_TWO_UART', 'PD3'], ['HEATER_BED', 'PA3'], ['HEATER_HE', 'PA2'], ['HEATER_LED', 'PB10'], ['TEMP_BED', 'PF3'], ['TEMP_HE', 'PF4'], ['TEMP_CHM', 'PF5'], ['BAY_1', 'PD12'], ['BEDFAN', 'PA8'], ['NMFAN', 'PE5'], ['BUZZ', 'PD15'], ['ENDSTOP_Z', 'PG10'], ['ENDSTOP_X', 'PG6'], ['ENDSTOP_Y', 'PG9'], ['PROBE', 'PG13'], ['BTTFS', 'PG14'], ['RGBLED', 'PB0']]}, 'probe': {'z_offset': 7.18, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'nhk:gpio10', 'speed': 8.0, 'lift_speed': 8.0, 'x_offset': 0.0, 'y_offset': 19.75, 'samples': 3, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.0075, 'samples_tolerance_retries': 3}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 3, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 120.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [150.0, 150.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 8.0, 'speed': 150.0, 'fade_start': 0.6, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.04875, 0.06875, 0.04, 0.07875, 0.07], [0.05, 0.0675, 0.05375, 0.06375, 0.09], [0.00625, 0.03625, 0.0, 0.045, 0.075], [0.02125, 0.0825, 0.07125, 0.08125, 0.09875], [-0.025, 0.06875, 0.04625, 0.08875, 0.07875]], 'min_x': 40.0, 'max_x': 260.0, 'min_y': 40.0, 'max_y': 260.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': 3, 'color_order': ['RGBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!B_MOTOR_EN', 'endstop_pin': 'nhk:gpio12', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!A_MOTOR_EN', 'endstop_pin': 'ENDSTOP_Y', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ZERO_EN', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 200.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ONE_EN'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_TWO_EN'}, 'output_pin act_led': {'pwm': False, 'pin': '!nhk:gpio8', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'nhk:gpio21', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_miso_pin': 'nhk:gpio19', 'spi_software_mosi_pin': 'nhk:gpio20'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[155.0, 155.0, 20.0]], 'accel_chip': 'adxl345'}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'pullup_resistor': 2200.0, 'inline_resistor': 0.0, 'sensor_pin': 'nhk:gpio26', 'min_temp': 0.0, 'max_temp': 100.0}, 'filament_motion_sensor filament_sensor': {'switch_pin': '^BTTFS', 'extruder': 'extruder', 'detection_length': 14.0, 'pause_on_runout': True, 'runout_gcode': '\nBEEP_ERROR\nPAUSE', 'insert_gcode': '\nNozzle_ON', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro fs_off': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro fs_on': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro _air_filter_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1'}, 'gcode_macro reset_air_filter': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }', 'description': 'Resets the air-filter replacement timer'}, 'gcode_macro query_air_filter': {'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }', 'description': 'Displays the amount of time the air filter has run since it was last reset.'}, 'delayed_gcode _air_filter_timer': {'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1", 'initial_duration': 1.0}, 'delayed_gcode _air_filter_flush_timer': {'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300", 'initial_duration': 300.0}, 'gcode_macro heatsoaker': {'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999', 'description': 'HeatSoak for an Hour'}, 'gcode_macro beep': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro beep_success': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000', 'description': 'G-Code macro'}, 'gcode_macro beep_error': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100', 'description': 'G-Code macro'}, 'gcode_macro cg28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro chome': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro center_accuracy': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro lights_on': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25', 'description': 'G-Code macro'}, 'gcode_macro pid_hotend': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260', 'description': 'G-Code macro'}, 'gcode_macro pid_bed': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110', 'description': 'G-Code macro'}, 'gcode_macro manual_flow_calibration': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'delayed_gcode heatsoak_delay': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro heatsoak_timer': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}', 'description': 'G-Code macro'}, 'gcode_macro park_front': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT', 'description': 'G-Code macro'}, 'gcode_macro park_front_low': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW', 'description': 'G-Code macro'}, 'gcode_macro park_rear': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR', 'description': 'G-Code macro'}, 'gcode_macro park_center': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER', 'description': 'G-Code macro'}, 'gcode_macro park_bed': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED', 'description': 'G-Code macro'}, 'gcode_macro force_bed_down': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing'}, 'gcode_macro force_bed_up': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing.'}, 'gcode_macro force_bed_lock': {'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90', 'description': 'Active Z steppers to lock down the bed, Without Homing'}, 'gcode_macro force_bed_unlock': {'gcode': '\nM84', 'description': 'Unlocks the Bed'}, 'delayed_gcode filter_air_stop': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro print_end': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro prime_blob': {'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state', 'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.'}, 'gcode_macro ringing_tower': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_mzv': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_ei': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro priming': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000', 'description': 'G-Code macro'}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount'}, 'gcode_macro z_tilt_adjust': {'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0', 'rename_existing': '_Z_TILT_ADJUST', 'description': ''}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'skew_correction my_skew_profile': {'xy_skew': -0.000802972249612, 'xz_skew': 0.0, 'yz_skew': 0.0}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 82.96, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 66.66}, 'printer': {'max_velocity': 300.0, 'max_accel': 10000.0, 'max_accel_to_decel': 5000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 50.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-07 18:08:33,354 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 18:08:33,356 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-07 18:08:33,356 [printer.py:reinit()] - # Extruders: 1
2024-02-07 18:08:33,356 [printer.py:reinit()] - # Temperature devices: 5
2024-02-07 18:08:33,356 [printer.py:reinit()] - # Fans: 5
2024-02-07 18:08:33,356 [printer.py:reinit()] - # Output pins: 3
2024-02-07 18:08:33,356 [printer.py:reinit()] - # Leds: 1
2024-02-07 18:08:33,369 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-07 18:08:33,371 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-07 18:08:33,596 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor Pi&temperature_sensor Octopus&temperature_sensor Nitehawk&fan&fan_generic BoomBox&fan_generic BedFans&heater_fan hotend_fan&heater_fan Vent&filament_motion_sensor filament_sensor&output_pin caselight&output_pin beeper&output_pin act_led&neopixel sb_leds
2024-02-07 18:08:33,600 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-07 18:08:33,600 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-07 18:08:33,600 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-07 18:08:33,601 [screen.py:init_klipper()] - Printer initialized
2024-02-07 18:08:33,601 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-07 18:08:33,601 [printer.py:change_state()] - Adding callback for state: ready
2024-02-07 18:08:33,606 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-07 18:08:33,678 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-07 18:08:33,695 [main_menu.py:add_device()] - Adding device: extruder
2024-02-07 18:08:33,702 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-07 18:08:33,706 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-07 18:08:33,707 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-07 18:08:33,707 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-07 18:08:33,707 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-07 18:08:33,730 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-07 18:08:33,736 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-07 18:08:33,744 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor Pi', 'temperature_sensor Octopus', 'temperature_sensor Nitehawk', 'extruder']
2024-02-07 18:08:33,751 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-07 18:08:33,751 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-07 18:08:38,052 [screen.py:_load_panel()] - Loading panel: extrude
2024-02-07 18:08:38,152 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-02-07 18:08:38,155 [extrude.py:process_update()] - filament_motion_sensor filament_sensor: {'filament_detected': True, 'enabled': False}
2024-02-07 18:08:39,414 [screen.py:_load_panel()] - Loading panel: temperature
2024-02-07 18:08:39,443 [temperature.py:add_device()] - Adding device: extruder
2024-02-07 18:08:39,447 [temperature.py:add_device()] - Adding device: heater_bed
2024-02-07 18:08:39,452 [temperature.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-07 18:08:39,453 [temperature.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-07 18:08:39,453 [temperature.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-07 18:08:39,453 [temperature.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-07 18:08:39,455 [temperature.py:select_heater()] - Selecting extruder
2024-02-07 18:08:39,456 [temperature.py:select_heater()] - Selecting heater_bed
2024-02-07 18:08:39,484 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2024-02-07 18:08:43,366 [temperature.py:verify_max_temp()] - 250/280
2024-02-07 18:08:43,367 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S250
2024-02-07 18:09:20,413 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-07 18:09:20,436 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-02-07 18:09:20,438 [extrude.py:process_update()] - filament_motion_sensor filament_sensor: {'filament_detected': True, 'enabled': False}
2024-02-07 18:09:32,386 [extrude.py:change_distance()] - ### Distance 25
2024-02-07 18:09:33,154 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-07 18:09:33,155 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F120'}
2024-02-07 18:09:40,685 [extrude.py:process_update()] - filament_motion_sensor filament_sensor: {'filament_detected': False, 'enabled': False}
2024-02-07 18:10:01,798 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-07 18:10:01,802 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F120'}
2024-02-07 18:10:52,689 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-07 18:10:52,689 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-07 18:10:52,690 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-07 18:10:52,690 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 18:10:52,694 [screen.py:show_panel()] - Reinitializing panel
2024-02-07 18:10:52,757 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-07 18:10:56,452 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-07 18:10:56,459 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-07 18:10:56,460 [printer.py:configure_cameras()] - Cameras: []
2024-02-07 18:10:56,460 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-07 18:10:56,466 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-07 18:10:56,490 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-07 18:10:56,494 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_prefix': '\\\\'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pauses Print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'gcode_macro POLYLITE_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026'}, 'gcode_macro POLYLITE_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro SPARTA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325'}, 'gcode_macro SPARTA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300'}, 'gcode_macro SPARTA_PURPLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro POLYLITE_BLACK_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510'}, 'gcode_macro POLYLITE_BLACK_ABS': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYLITE_YELLOW_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro FILAMENT_RESET': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro ABS_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0'}, 'gcode_macro PRINT_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0'}, 'gcode_macro PRINT_RESET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0'}, 'gcode_macro Clean_Filament_Cold_Pull': {'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince', 'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0'}, 'gcode_macro Manual_Clean': {'description': 'Grab a Brush ready, Start Scrubbing!', 'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0'}, 'gcode_macro LOAD_FILAMENT_PLA': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro LOAD_FILAMENT_ABS': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_PLA': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_ABS': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro POLYTERRA_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031'}, 'gcode_macro POLYTERRA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro POLYTERRA_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550'}, 'gcode_macro POLYTERRA_CANDY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035'}, 'gcode_macro POLYTERRA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYTERRA_BLUE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445'}, 'gcode_macro POLYTERRA_LAV': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054'}, 'gcode_macro ZIRO_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252'}, 'gcode_macro JESSIE_TAN': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029'}, 'gcode_macro SUNLU_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066'}, 'gcode_macro M600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Run standard input shaper test for all axes', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Run custom demi-axe test to analyze belts on CoreXY printers', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations', 'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400'}, 'gcode_macro XYBelt_Tension': {'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115', 'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': '300.0', 'verbose': 'True'}, 'heater_bed': {'pwm_cycle_time': '0.0166', 'heater_pin': 'HEATER_BED', 'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_BED', 'max_power': '0.5', 'min_temp': '-20', 'max_temp': '120', 'control': 'pid', 'pid_kp': '33.946', 'pid_ki': '0.997', 'pid_kd': '288.961'}, 'extruder': {'step_pin': 'nhk:gpio23', 'dir_pin': '!nhk:gpio24', 'enable_pin': '!nhk:gpio25', 'rotation_distance': '47.088', 'gear_ratio': '9:1', 'microsteps': '16', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'nhk:gpio9', 'sensor_pin': 'nhk:gpio29', 'pullup_resistor': '2200', 'sensor_type': 'PT1000', 'min_temp': '10', 'max_temp': '280', 'max_power': '1.0', 'min_extrude_temp': '10', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'control': 'pid', 'pid_kp': '26.239', 'pid_ki': '1.965', 'pid_kd': '87.574'}, 'tmc2209 extruder': {'stealthchop_threshold': '0', 'run_current': '0.6', 'interpolate': 'false', 'sense_resistor': '0.100', 'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1'}, 'firmware_retraction': {'retract_length': '0.5', 'retract_speed': '30', 'unretract_speed': '30'}, 'heater_fan hotend_fan': {'pin': 'nhk:gpio5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'nhk:gpio6', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.010'}, 'output_pin caselight': {'pin': 'HEATER_LED', 'pwm': 'true', 'cycle_time': '0.01', 'value': '0.15'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_CHM', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'temperature_sensor Pi': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'heater_fan Vent': {'pin': 'BAY_1', 'max_power': '1', 'kick_start_time': '0.5', 'shutdown_speed': '0', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '0.40', 'cycle_time': '0.008'}, 'fan_generic BoomBox': {'pin': 'NMFAN', 'shutdown_speed': '0.0', 'hardware_pwm': 'False', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.008'}, 'fan_generic BedFans': {'pin': 'BEDFAN', 'kick_start_time': '0.5', 'cycle_time': '0.008'}, 'output_pin beeper': {'pin': 'BUZZ', 'value': '0', 'shutdown_value': '0', 'pwm': 'True', 'cycle_time': '0.0005'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00'}, 'board_pins': {'aliases': '\n\n\nB_MOTOR_EN=PF14,  B_MOTOR_STEP=PF13,  B_MOTOR_DIR=PF12,  B_MOTOR_UART=PC4,\n\nA_MOTOR_EN=PF15,  A_MOTOR_STEP=PG0,  A_MOTOR_DIR=PG1,  A_MOTOR_UART=PD11,\n\nEXTRUDER_EN=PG5,  EXTRUDER_STEP=PF11,  EXTRUDER_DIR=PG3,  EXTRUDER_UART=PC6,\n\n\n\nZ_ZERO_EN=PF1,  Z_ZERO_STEP=PC13,  Z_ZERO_DIR=PF0,  Z_ZERO_UART=PE4,\n\nZ_ONE_EN=PD4,  Z_ONE_STEP=PE2,  Z_ONE_DIR=PE3,  Z_ONE_UART=PE1,\n\nZ_TWO_EN=PE0,  Z_TWO_STEP=PE6,  Z_TWO_DIR=PA14, Z_TWO_UART=PD3,\n\n\n\nHEATER_BED=PA3, HEATER_HE=PA2, HEATER_LED=PB10,\n\nTEMP_BED=PF3, TEMP_HE=PF4, TEMP_CHM=PF5,\n\nBAY_1=PD12, BEDFAN=PA8, NMFAN=PE5, BUZZ=PD15,\n\nENDSTOP_Z=PG10,  ENDSTOP_X=PG6,  ENDSTOP_Y=PG9, PROBE=PG13, BTTFS=PG14, RGBLED=PB0'}, 'stepper_z': {'endstop_pin': 'probe:z_virtual_endstop', 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'enable_pin': '!Z_ZERO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200', 'position_max': '200', 'position_min': '-10', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'probe': {'pin': 'nhk:gpio10', 'z_offset': '7.180', 'x_offset': '0', 'y_offset': '19.75', 'speed': '8.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.0075', 'samples_tolerance_retries': '3'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '120', 'retries': '3', 'retry_tolerance': '0.0075', 'horizontal_move_z': '10'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '8', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'probe_count': '5,5', 'zero_reference_position': '150, 150', 'algorithm': 'bicubic', 'fade_start': '0.6', 'fade_end': '10', 'fade_target': '0'}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': '3', 'color_order': 'RGBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'stepper_x': {'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'enable_pin': '!B_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true', 'endstop_pin': 'nhk:gpio12'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'enable_pin': '!A_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'ENDSTOP_Y', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'enable_pin': '!Z_ONE_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'enable_pin': '!Z_TWO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00'}, 'output_pin act_led': {'pin': '!nhk:gpio8'}, 'adxl345': {'cs_pin': 'nhk:gpio21', 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_mosi_pin': 'nhk:gpio20', 'spi_software_miso_pin': 'nhk:gpio19'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n155, 155, 20'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor Nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'sensor_pin': 'nhk:gpio26', 'pullup_resistor': '2200', 'min_temp': '0', 'max_temp': '100'}, 'filament_motion_sensor filament_sensor': {'detection_length': '14', 'extruder': 'extruder', 'switch_pin': '^BTTFS', 'pause_on_runout': 'True', 'insert_gcode': '\nNozzle_ON', 'runout_gcode': '\nBEEP_ERROR\nPAUSE'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_OFF': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_ON': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1'}, 'gcode_macro _AIR_FILTER_VARIABLES': {'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1', 'gcode': ''}, 'gcode_macro RESET_AIR_FILTER': {'description': 'Resets the air-filter replacement timer', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }'}, 'gcode_macro QUERY_AIR_FILTER': {'description': 'Displays the amount of time the air filter has run since it was last reset.', 'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }'}, 'delayed_gcode _AIR_FILTER_TIMER': {'initial_duration': '1', 'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1"}, 'delayed_gcode _AIR_FILTER_FLUSH_TIMER': {'initial_duration': '300', 'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300"}, 'gcode_macro HEATSOAKER': {'description': 'HeatSoak for an Hour', 'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999'}, 'gcode_macro BEEP': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}'}, 'gcode_macro BEEP_SUCCESS': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000'}, 'gcode_macro BEEP_ERROR': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100'}, 'gcode_macro CG28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CHOME': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CENTER_ACCURACY': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY'}, 'gcode_macro Lights_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro Lights_ON': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25'}, 'gcode_macro PID_HOTEND': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260'}, 'gcode_macro PID_BED': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110'}, 'gcode_macro MANUAL_FLOW_CALIBRATION': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'delayed_gcode HEATSOAK_DELAY': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}'}, 'gcode_macro HEATSOAK_TIMER': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}'}, 'gcode_macro PARK_FRONT': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT'}, 'gcode_macro PARK_FRONT_LOW': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW'}, 'gcode_macro PARK_REAR': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR'}, 'gcode_macro PARK_CENTER': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER'}, 'gcode_macro PARK_BED': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED'}, 'gcode_macro FORCE_BED_DOWN': {'description': 'Force move bed down without homing', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_UP': {'description': 'Force move bed down without homing.', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_LOCK': {'description': 'Active Z steppers to lock down the bed, Without Homing', 'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90'}, 'gcode_macro FORCE_BED_UNLOCK': {'description': 'Unlocks the Bed', 'gcode': '\nM84'}, 'delayed_gcode FILTER_AIR_STOP': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}'}, 'gcode_macro PRIME_BLOB': {'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.', 'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state'}, 'gcode_macro RINGING_TOWER': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_MZV': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_EI': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro PRIMING': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107'}, 'gcode_macro CLEAN': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro Z_TILT_ADJUST': {'rename_existing': '_Z_TILT_ADJUST', 'description': '', 'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro Smart_Park': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'exclude_object': {}, 'skew_correction': {}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '10000', 'max_z_velocity': '15', 'max_z_accel': '50', 'square_corner_velocity': '5.0'}, 'input_shaper': {'shaper_freq_x': '82.96', 'shaper_freq_y': '66.66'}, 'bed_mesh default': {'version': '1', 'points': '\n0.048750, 0.068750, 0.040000, 0.078750, 0.070000\n0.050000, 0.067500, 0.053750, 0.063750, 0.090000\n0.006250, 0.036250, 0.000000, 0.045000, 0.075000\n0.021250, 0.082500, 0.071250, 0.081250, 0.098750\n-0.025000, 0.068750, 0.046250, 0.088750, 0.078750', 'tension': '0.2', 'min_x': '40.0', 'algo': 'bicubic', 'y_count': '5', 'mesh_y_pps': '2', 'min_y': '40.0', 'x_count': '5', 'max_y': '260.0', 'mesh_x_pps': '2', 'max_x': '260.0'}, 'skew_correction my_skew_profile': {'xy_skew': '-0.000802972249612', 'xz_skew': '0.0', 'yz_skew': '0.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': '\\\\'}, 'gcode_macro cancel_print': {'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}', 'rename_existing': 'BASE_PAUSE', 'description': 'Pauses Print'}, 'gcode_macro resume': {'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'rename_existing': 'BASE_RESUME', 'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro polylite_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026', 'description': 'G-Code macro'}, 'gcode_macro polylite_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro sparta_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325', 'description': 'G-Code macro'}, 'gcode_macro sparta_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300', 'description': 'G-Code macro'}, 'gcode_macro sparta_purple': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_abs': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polylite_yellow_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro filament_reset': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro abs_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_reset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro clean_filament_cold_pull': {'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0', 'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince'}, 'gcode_macro manual_clean': {'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0', 'description': 'Grab a Brush ready, Start Scrubbing!'}, 'gcode_macro load_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro load_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro polyterra_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031', 'description': 'G-Code macro'}, 'gcode_macro polyterra_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro polyterra_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550', 'description': 'G-Code macro'}, 'gcode_macro polyterra_candy': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035', 'description': 'G-Code macro'}, 'gcode_macro polyterra_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polyterra_blue': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445', 'description': 'G-Code macro'}, 'gcode_macro polyterra_lav': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054', 'description': 'G-Code macro'}, 'gcode_macro ziro_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252', 'description': 'G-Code macro'}, 'gcode_macro jessie_tan': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029', 'description': 'G-Code macro'}, 'gcode_macro sunlu_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER', 'description': 'Run standard input shaper test for all axes'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS', 'description': 'Run custom demi-axe test to analyze belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400', 'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations'}, 'gcode_macro xybelt_tension': {'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }', 'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': 300.0, 'verbose': True}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_BED', 'min_temp': -20.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.5, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 33.946, 'pid_ki': 0.997, 'pid_kd': 288.961, 'heater_pin': 'HEATER_BED', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'tmc2209 extruder': {'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.1, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'PT1000', 'pullup_resistor': 2200.0, 'sensor_pin': 'nhk:gpio29', 'min_temp': 10.0, 'max_temp': 280.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.239, 'pid_ki': 1.965, 'pid_kd': 87.574, 'heater_pin': 'nhk:gpio9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'nhk:gpio23', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!nhk:gpio24', 'rotation_distance': 47.088, 'full_steps_per_rotation': 200, 'gear_ratio': [[9.0, 1.0]], 'enable_pin': '!nhk:gpio25'}, 'firmware_retraction': {'retract_length': 0.5, 'retract_speed': 30.0, 'unretract_extra_length': 0.0, 'unretract_speed': 30.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'nhk:gpio5', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'nhk:gpio6'}, 'output_pin caselight': {'pwm': True, 'pin': 'HEATER_LED', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.15, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_CHM', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'temperature_sensor pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'heater_fan vent': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BAY_1', 'fan_speed': 0.4}, 'fan_generic boombox': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'NMFAN'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BEDFAN'}, 'output_pin beeper': {'pwm': True, 'pin': 'BUZZ', 'cycle_time': 0.0005, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['B_MOTOR_EN', 'PF14'], ['B_MOTOR_STEP', 'PF13'], ['B_MOTOR_DIR', 'PF12'], ['B_MOTOR_UART', 'PC4'], ['A_MOTOR_EN', 'PF15'], ['A_MOTOR_STEP', 'PG0'], ['A_MOTOR_DIR', 'PG1'], ['A_MOTOR_UART', 'PD11'], ['EXTRUDER_EN', 'PG5'], ['EXTRUDER_STEP', 'PF11'], ['EXTRUDER_DIR', 'PG3'], ['EXTRUDER_UART', 'PC6'], ['Z_ZERO_EN', 'PF1'], ['Z_ZERO_STEP', 'PC13'], ['Z_ZERO_DIR', 'PF0'], ['Z_ZERO_UART', 'PE4'], ['Z_ONE_EN', 'PD4'], ['Z_ONE_STEP', 'PE2'], ['Z_ONE_DIR', 'PE3'], ['Z_ONE_UART', 'PE1'], ['Z_TWO_EN', 'PE0'], ['Z_TWO_STEP', 'PE6'], ['Z_TWO_DIR', 'PA14'], ['Z_TWO_UART', 'PD3'], ['HEATER_BED', 'PA3'], ['HEATER_HE', 'PA2'], ['HEATER_LED', 'PB10'], ['TEMP_BED', 'PF3'], ['TEMP_HE', 'PF4'], ['TEMP_CHM', 'PF5'], ['BAY_1', 'PD12'], ['BEDFAN', 'PA8'], ['NMFAN', 'PE5'], ['BUZZ', 'PD15'], ['ENDSTOP_Z', 'PG10'], ['ENDSTOP_X', 'PG6'], ['ENDSTOP_Y', 'PG9'], ['PROBE', 'PG13'], ['BTTFS', 'PG14'], ['RGBLED', 'PB0']]}, 'probe': {'z_offset': 7.18, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'nhk:gpio10', 'speed': 8.0, 'lift_speed': 8.0, 'x_offset': 0.0, 'y_offset': 19.75, 'samples': 3, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.0075, 'samples_tolerance_retries': 3}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 3, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 120.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [150.0, 150.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 8.0, 'speed': 150.0, 'fade_start': 0.6, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.04875, 0.06875, 0.04, 0.07875, 0.07], [0.05, 0.0675, 0.05375, 0.06375, 0.09], [0.00625, 0.03625, 0.0, 0.045, 0.075], [0.02125, 0.0825, 0.07125, 0.08125, 0.09875], [-0.025, 0.06875, 0.04625, 0.08875, 0.07875]], 'min_x': 40.0, 'max_x': 260.0, 'min_y': 40.0, 'max_y': 260.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': 3, 'color_order': ['RGBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!B_MOTOR_EN', 'endstop_pin': 'nhk:gpio12', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!A_MOTOR_EN', 'endstop_pin': 'ENDSTOP_Y', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ZERO_EN', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 200.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ONE_EN'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_TWO_EN'}, 'output_pin act_led': {'pwm': False, 'pin': '!nhk:gpio8', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'nhk:gpio21', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_miso_pin': 'nhk:gpio19', 'spi_software_mosi_pin': 'nhk:gpio20'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[155.0, 155.0, 20.0]], 'accel_chip': 'adxl345'}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'pullup_resistor': 2200.0, 'inline_resistor': 0.0, 'sensor_pin': 'nhk:gpio26', 'min_temp': 0.0, 'max_temp': 100.0}, 'filament_motion_sensor filament_sensor': {'switch_pin': '^BTTFS', 'extruder': 'extruder', 'detection_length': 14.0, 'pause_on_runout': True, 'runout_gcode': '\nBEEP_ERROR\nPAUSE', 'insert_gcode': '\nNozzle_ON', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro fs_off': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro fs_on': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro _air_filter_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1'}, 'gcode_macro reset_air_filter': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }', 'description': 'Resets the air-filter replacement timer'}, 'gcode_macro query_air_filter': {'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }', 'description': 'Displays the amount of time the air filter has run since it was last reset.'}, 'delayed_gcode _air_filter_timer': {'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1", 'initial_duration': 1.0}, 'delayed_gcode _air_filter_flush_timer': {'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300", 'initial_duration': 300.0}, 'gcode_macro heatsoaker': {'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999', 'description': 'HeatSoak for an Hour'}, 'gcode_macro beep': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro beep_success': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000', 'description': 'G-Code macro'}, 'gcode_macro beep_error': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100', 'description': 'G-Code macro'}, 'gcode_macro cg28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro chome': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro center_accuracy': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro lights_on': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25', 'description': 'G-Code macro'}, 'gcode_macro pid_hotend': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260', 'description': 'G-Code macro'}, 'gcode_macro pid_bed': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110', 'description': 'G-Code macro'}, 'gcode_macro manual_flow_calibration': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'delayed_gcode heatsoak_delay': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro heatsoak_timer': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}', 'description': 'G-Code macro'}, 'gcode_macro park_front': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT', 'description': 'G-Code macro'}, 'gcode_macro park_front_low': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW', 'description': 'G-Code macro'}, 'gcode_macro park_rear': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR', 'description': 'G-Code macro'}, 'gcode_macro park_center': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER', 'description': 'G-Code macro'}, 'gcode_macro park_bed': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED', 'description': 'G-Code macro'}, 'gcode_macro force_bed_down': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing'}, 'gcode_macro force_bed_up': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing.'}, 'gcode_macro force_bed_lock': {'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90', 'description': 'Active Z steppers to lock down the bed, Without Homing'}, 'gcode_macro force_bed_unlock': {'gcode': '\nM84', 'description': 'Unlocks the Bed'}, 'delayed_gcode filter_air_stop': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro print_end': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro prime_blob': {'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state', 'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.'}, 'gcode_macro ringing_tower': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_mzv': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_ei': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro priming': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000', 'description': 'G-Code macro'}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount'}, 'gcode_macro z_tilt_adjust': {'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0', 'rename_existing': '_Z_TILT_ADJUST', 'description': ''}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'skew_correction my_skew_profile': {'xy_skew': -0.000802972249612, 'xz_skew': 0.0, 'yz_skew': 0.0}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 82.96, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 66.66}, 'printer': {'max_velocity': 300.0, 'max_accel': 10000.0, 'max_accel_to_decel': 5000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 50.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-07 18:10:56,498 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 18:10:56,500 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-07 18:10:56,500 [printer.py:reinit()] - # Extruders: 1
2024-02-07 18:10:56,500 [printer.py:reinit()] - # Temperature devices: 5
2024-02-07 18:10:56,500 [printer.py:reinit()] - # Fans: 5
2024-02-07 18:10:56,500 [printer.py:reinit()] - # Output pins: 3
2024-02-07 18:10:56,500 [printer.py:reinit()] - # Leds: 1
2024-02-07 18:10:56,511 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-07 18:10:56,513 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-07 18:10:56,793 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor Pi&temperature_sensor Octopus&temperature_sensor Nitehawk&fan&fan_generic BoomBox&fan_generic BedFans&heater_fan hotend_fan&heater_fan Vent&filament_motion_sensor filament_sensor&output_pin caselight&output_pin beeper&output_pin act_led&neopixel sb_leds
2024-02-07 18:10:56,797 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-07 18:10:56,797 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-07 18:10:56,797 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-07 18:10:56,798 [screen.py:init_klipper()] - Printer initialized
2024-02-07 18:10:56,798 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-07 18:10:56,798 [printer.py:change_state()] - Adding callback for state: startup
2024-02-07 18:10:56,975 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-07 18:10:56,975 [printer.py:change_state()] - Adding callback for state: ready
2024-02-07 18:10:56,977 [screen.py:show_panel()] - Reinitializing panel
2024-02-07 18:10:57,039 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-07 18:10:57,056 [main_menu.py:add_device()] - Adding device: extruder
2024-02-07 18:10:57,060 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-07 18:10:57,064 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-07 18:10:57,064 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-07 18:10:57,064 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-07 18:10:57,065 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-07 18:10:57,088 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-07 18:10:57,096 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-07 18:10:57,104 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor Pi', 'temperature_sensor Octopus', 'temperature_sensor Nitehawk', 'extruder']
2024-02-07 18:10:57,111 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-07 18:10:57,111 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-07 18:10:59,568 [screen.py:show_panel()] - Reinitializing panel
2024-02-07 18:10:59,649 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-02-07 18:10:59,650 [extrude.py:process_update()] - filament_motion_sensor filament_sensor: {'filament_detected': True, 'enabled': False}
2024-02-07 18:11:00,594 [screen.py:show_panel()] - Reinitializing panel
2024-02-07 18:11:00,607 [temperature.py:add_device()] - Adding device: extruder
2024-02-07 18:11:00,611 [temperature.py:add_device()] - Adding device: heater_bed
2024-02-07 18:11:00,616 [temperature.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-07 18:11:00,616 [temperature.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-07 18:11:00,616 [temperature.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-07 18:11:00,616 [temperature.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-07 18:11:00,617 [temperature.py:select_heater()] - Selecting extruder
2024-02-07 18:11:00,618 [temperature.py:select_heater()] - Selecting heater_bed
2024-02-07 18:11:00,642 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2024-02-07 18:11:04,133 [temperature.py:verify_max_temp()] - 250/280
2024-02-07 18:11:04,133 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S250
2024-02-07 18:11:11,602 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-07 18:11:11,666 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-02-07 18:11:11,669 [extrude.py:process_update()] - filament_motion_sensor filament_sensor: {'filament_detected': True, 'enabled': False}
2024-02-07 18:11:13,449 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-07 18:11:13,450 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+10 F120'}
2024-02-07 18:11:30,194 [extrude.py:change_distance()] - ### Distance 25
2024-02-07 18:11:30,798 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-07 18:11:30,800 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F120'}
2024-02-07 18:11:33,330 [extrude.py:process_update()] - filament_motion_sensor filament_sensor: {'filament_detected': False, 'enabled': False}
2024-02-07 18:11:41,398 [extrude.py:change_speed()] - ### Speed 5
2024-02-07 18:11:44,686 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-07 18:11:44,687 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-02-07 18:11:52,354 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-07 18:11:52,356 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-02-07 18:12:06,718 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-07 18:12:06,719 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-02-07 18:12:13,638 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-07 18:12:13,639 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-02-07 18:13:23,578 [extrude.py:change_distance()] - ### Distance 5
2024-02-07 18:13:25,674 [extrude.py:change_distance()] - ### Distance 10
2024-02-07 18:13:26,426 [extrude.py:change_speed()] - ### Speed 25
2024-02-07 18:13:28,442 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-07 18:13:28,443 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-10 F1500'}
2024-02-07 18:14:06,484 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2024-02-07 18:14:08,645 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-07 18:14:08,681 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-02-07 18:14:08,683 [extrude.py:process_update()] - filament_motion_sensor filament_sensor: {'filament_detected': False, 'enabled': False}
2024-02-07 18:14:09,543 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2024-02-07 18:14:10,446 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S0
2024-02-07 18:14:10,447 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S0
2024-02-07 18:14:11,590 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-07 18:14:11,646 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-02-07 18:14:11,649 [extrude.py:process_update()] - filament_motion_sensor filament_sensor: {'filament_detected': False, 'enabled': False}
2024-02-07 18:14:12,801 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-07 18:14:12,824 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-07 18:14:14,741 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-07 18:14:14,741 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-07 18:14:14,745 [screen.py:_load_panel()] - Loading panel: menu
2024-02-07 18:14:14,981 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-07 18:14:14,996 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-07 18:14:15,012 [menu.py:arrangeMenuItems()] - X > more power
2024-02-07 18:14:15,014 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-07 18:14:15,024 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-07 18:14:17,932 [screen.py:_load_panel()] - Loading panel: fan
2024-02-07 18:14:17,945 [fan.py:add_fan()] - Adding fan: fan
2024-02-07 18:14:17,962 [fan.py:add_fan()] - Adding fan: fan_generic BoomBox
2024-02-07 18:14:17,974 [fan.py:add_fan()] - Adding fan: fan_generic BedFans
2024-02-07 18:14:17,986 [fan.py:add_fan()] - Adding fan: heater_fan hotend_fan
2024-02-07 18:14:17,998 [fan.py:add_fan()] - Adding fan: heater_fan Vent
2024-02-07 18:14:18,031 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > fan
2024-02-07 18:14:19,901 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M106 S255
2024-02-07 18:14:47,702 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-07 18:14:47,751 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-07 18:14:47,781 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-07 18:14:47,797 [menu.py:arrangeMenuItems()] - X > more power
2024-02-07 18:14:47,799 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-07 18:14:47,807 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-07 18:14:48,661 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-07 18:14:48,684 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-07 18:14:49,970 [screen.py:_load_panel()] - Loading panel: move
2024-02-07 18:14:50,041 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-07 18:14:50,899 [screen.py:_load_panel()] - Loading panel: menu
2024-02-07 18:14:50,988 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-07 18:14:51,008 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-07 18:14:51,933 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-02-07 18:15:18,454 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-07 18:15:18,498 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-07 18:15:32,374 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-07 18:15:32,419 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-07 18:20:32,447 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-07 21:14:28,058 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-02-07 21:50:42,390 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-07 21:50:42,390 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-88-gc832c90
2024-02-07 21:50:42,391 [functions.py:log_start()] - Python version: 3.11
2024-02-07 21:50:42,514 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-07 21:50:42,515 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-07 21:50:42,530 [config.py:log_config()] -  ===== Config File =====
[printer Zarya]

[menu __main my_macros_menu]
name = Macros

[menu __main my_macros_menu sub_macro_item]
name = PARK CENTER
method = printer.gcode.script
params = {"script":"PARK_CENTER"}

[menu __main my_macros_menu sub_macro_item2]
name = Force Bed Down
method = printer.gcode.script
params = {"script":"force_bed_down DISTANCE=4"}

[menu __main my_macros_menu sub_macro_item3]
name = HEATSOAKER
method = printer.gcode.script
params = {"script":"HEATSOAKER"}
=======================
2024-02-07 21:50:42,535 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
screen_blanking = 300
24htime = False
side_macro_shortcut = False
font_size = large
only_heaters = True
invert_z = True
move_speed_xy = 199

[displayed_macros Printer]
attach_probe = False
bed_mesh_calibrate = False
attach_probe_lock = False
center_toolhead = False
dock_probe = False
g32 = False
dock_probe_unlock = False
jessie_tan = False
center_accuracy = False
filament_reset = False
jessie_soulblack = False
m900 = False
preheat = False
polyterra_white = False
nmfan_on = False
polyterra_marble = False
polylite_black = False
purgeline = False
probe_calibrate = False
probe_accuracy = False
polyterra_gray = False
polylite_gray = False
polyterra_black = False
status_busy = False
print_start = False
status_meshing = False
status_calibrating_z = False
test_speed = False
status_off = False
status_leveling = False
status_ready = False
set_nozzle_leds_on = False
set_nozzle_leds_off = False
set_logo_leds_off = False
status_heating = False
status_homing = False
status_cleaning = False
status_printing = False
abs_offset = False
beep = False
blk_paramount = False
cg28 = False
polyterra_blue = False
pause = False
measure_resonnances_x = False
m600 = False
measure_resonnances_y = False
polyterra_candy = False
polyterra_purp = False
sparta_black = False
query_air_filter = False
print_end = False
z_tilt_adjust = False
reset_air_filter = False
polylite_black_asa = False
ziro_marble = False
ziro_sparkle = False
sparta_purple = False
status_caution = False
sparta_gray = False
calibrate_z = False
cancel_print = False
axes_shaper_calibration = False
beep_error = False
belts_shaper_calibration = False
beep_success = False
excitate_axis_at_freq = False
compute_flow_multiplier = False
flow_multiplier_calibration = False
manual_flow_calibration = False
line_purge = False
prime_blob = False
polylite_black_abs = False
polylite_yellow_asa = False
pressure_advance_calibration = False
setup_kamp_meshing = False
sparta_reset = False
setup_line_purge = False
sparta_offset = False
print_reset = False

[graph Printer]
heater_bed = False
extruder = False

=======================
2024-02-07 21:50:42,536 [config.py:__init__()] - Configured printers: [
  {
    "Zarya": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-07 21:50:42,601 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-07 21:50:42,601 [config.py:install_language()] - Using lang en
2024-02-07 21:50:42,613 [screen.py:__init__()] - Screen resolution: 800x480
2024-02-07 21:50:42,614 [KlippyGtk.py:__init__()] - Font size: 18.0 (large)
2024-02-07 21:50:43,191 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 300
2024-02-07 21:50:43,197 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-07 21:50:43,202 [screen.py:initial_connection()] - Default printer: None
2024-02-07 21:50:43,233 [screen.py:connect_printer()] - Connecting to printer: Zarya
2024-02-07 21:50:43,233 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-07 21:50:43,272 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-07 21:50:43,280 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-07 21:50:43,294 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-07 21:50:43,301 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-07 21:50:43,302 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-07 21:50:43,309 [_logging.py:info()] - Websocket connected
2024-02-07 21:50:43,309 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-07 21:50:43,400 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-07 21:50:43,407 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-07 21:50:43,408 [printer.py:configure_cameras()] - Cameras: []
2024-02-07 21:50:43,408 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-07 21:50:43,419 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-07 21:50:43,510 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-07 21:50:43,514 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_prefix': '\\\\'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pauses Print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'gcode_macro POLYLITE_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026'}, 'gcode_macro POLYLITE_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro SPARTA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325'}, 'gcode_macro SPARTA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300'}, 'gcode_macro SPARTA_PURPLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro POLYLITE_BLACK_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510'}, 'gcode_macro POLYLITE_BLACK_ABS': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYLITE_YELLOW_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro FILAMENT_RESET': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro ABS_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0'}, 'gcode_macro PRINT_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0'}, 'gcode_macro PRINT_RESET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0'}, 'gcode_macro Clean_Filament_Cold_Pull': {'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince', 'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0'}, 'gcode_macro Manual_Clean': {'description': 'Grab a Brush ready, Start Scrubbing!', 'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0'}, 'gcode_macro LOAD_FILAMENT_PLA': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro LOAD_FILAMENT_ABS': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_PLA': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_ABS': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro POLYTERRA_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031'}, 'gcode_macro POLYTERRA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro POLYTERRA_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550'}, 'gcode_macro POLYTERRA_CANDY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035'}, 'gcode_macro POLYTERRA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYTERRA_BLUE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445'}, 'gcode_macro POLYTERRA_LAV': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054'}, 'gcode_macro ZIRO_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252'}, 'gcode_macro JESSIE_TAN': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029'}, 'gcode_macro SUNLU_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066'}, 'gcode_macro M600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Run standard input shaper test for all axes', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Run custom demi-axe test to analyze belts on CoreXY printers', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations', 'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400'}, 'gcode_macro XYBelt_Tension': {'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115', 'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': '300.0', 'verbose': 'True'}, 'heater_bed': {'pwm_cycle_time': '0.0166', 'heater_pin': 'HEATER_BED', 'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_BED', 'max_power': '0.5', 'min_temp': '-20', 'max_temp': '120', 'control': 'pid', 'pid_kp': '33.946', 'pid_ki': '0.997', 'pid_kd': '288.961'}, 'extruder': {'step_pin': 'nhk:gpio23', 'dir_pin': '!nhk:gpio24', 'enable_pin': '!nhk:gpio25', 'rotation_distance': '47.088', 'gear_ratio': '9:1', 'microsteps': '16', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'nhk:gpio9', 'sensor_pin': 'nhk:gpio29', 'pullup_resistor': '2200', 'sensor_type': 'PT1000', 'min_temp': '10', 'max_temp': '280', 'max_power': '1.0', 'min_extrude_temp': '10', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'control': 'pid', 'pid_kp': '26.239', 'pid_ki': '1.965', 'pid_kd': '87.574'}, 'tmc2209 extruder': {'stealthchop_threshold': '0', 'run_current': '0.6', 'interpolate': 'false', 'sense_resistor': '0.100', 'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1'}, 'firmware_retraction': {'retract_length': '0.5', 'retract_speed': '30', 'unretract_speed': '30'}, 'heater_fan hotend_fan': {'pin': 'nhk:gpio5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'nhk:gpio6', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.010'}, 'output_pin caselight': {'pin': 'HEATER_LED', 'pwm': 'true', 'cycle_time': '0.01', 'value': '0.15'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_CHM', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'temperature_sensor Pi': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'heater_fan Vent': {'pin': 'BAY_1', 'max_power': '1', 'kick_start_time': '0.5', 'shutdown_speed': '0', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '0.40', 'cycle_time': '0.008'}, 'fan_generic BoomBox': {'pin': 'NMFAN', 'shutdown_speed': '0.0', 'hardware_pwm': 'False', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.008'}, 'fan_generic BedFans': {'pin': 'BEDFAN', 'kick_start_time': '0.5', 'cycle_time': '0.008'}, 'output_pin beeper': {'pin': 'BUZZ', 'value': '0', 'shutdown_value': '0', 'pwm': 'True', 'cycle_time': '0.0005'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00'}, 'board_pins': {'aliases': '\n\n\nB_MOTOR_EN=PF14,  B_MOTOR_STEP=PF13,  B_MOTOR_DIR=PF12,  B_MOTOR_UART=PC4,\n\nA_MOTOR_EN=PF15,  A_MOTOR_STEP=PG0,  A_MOTOR_DIR=PG1,  A_MOTOR_UART=PD11,\n\nEXTRUDER_EN=PG5,  EXTRUDER_STEP=PF11,  EXTRUDER_DIR=PG3,  EXTRUDER_UART=PC6,\n\n\n\nZ_ZERO_EN=PF1,  Z_ZERO_STEP=PC13,  Z_ZERO_DIR=PF0,  Z_ZERO_UART=PE4,\n\nZ_ONE_EN=PD4,  Z_ONE_STEP=PE2,  Z_ONE_DIR=PE3,  Z_ONE_UART=PE1,\n\nZ_TWO_EN=PE0,  Z_TWO_STEP=PE6,  Z_TWO_DIR=PA14, Z_TWO_UART=PD3,\n\n\n\nHEATER_BED=PA3, HEATER_HE=PA2, HEATER_LED=PB10,\n\nTEMP_BED=PF3, TEMP_HE=PF4, TEMP_CHM=PF5,\n\nBAY_1=PD12, BEDFAN=PA8, NMFAN=PE5, BUZZ=PD15,\n\nENDSTOP_Z=PG10,  ENDSTOP_X=PG6,  ENDSTOP_Y=PG9, PROBE=PG13, BTTFS=PG14, RGBLED=PB0'}, 'stepper_z': {'endstop_pin': 'probe:z_virtual_endstop', 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'enable_pin': '!Z_ZERO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200', 'position_max': '200', 'position_min': '-10', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'probe': {'pin': 'nhk:gpio10', 'z_offset': '7.180', 'x_offset': '0', 'y_offset': '19.75', 'speed': '8.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.0075', 'samples_tolerance_retries': '3'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '120', 'retries': '3', 'retry_tolerance': '0.0075', 'horizontal_move_z': '10'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '8', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'probe_count': '5,5', 'zero_reference_position': '150, 150', 'algorithm': 'bicubic', 'fade_start': '0.6', 'fade_end': '10', 'fade_target': '0'}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': '3', 'color_order': 'RGBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'stepper_x': {'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'enable_pin': '!B_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true', 'endstop_pin': 'nhk:gpio12'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'enable_pin': '!A_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'ENDSTOP_Y', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'enable_pin': '!Z_ONE_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'enable_pin': '!Z_TWO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00'}, 'output_pin act_led': {'pin': '!nhk:gpio8'}, 'adxl345': {'cs_pin': 'nhk:gpio21', 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_mosi_pin': 'nhk:gpio20', 'spi_software_miso_pin': 'nhk:gpio19'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n155, 155, 20'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor Nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'sensor_pin': 'nhk:gpio26', 'pullup_resistor': '2200', 'min_temp': '0', 'max_temp': '100'}, 'filament_motion_sensor filament_sensor': {'detection_length': '14', 'extruder': 'extruder', 'switch_pin': '^BTTFS', 'pause_on_runout': 'True', 'insert_gcode': '\nNozzle_ON', 'runout_gcode': '\nBEEP_ERROR\nPAUSE'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_OFF': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_ON': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1'}, 'gcode_macro _AIR_FILTER_VARIABLES': {'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1', 'gcode': ''}, 'gcode_macro RESET_AIR_FILTER': {'description': 'Resets the air-filter replacement timer', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }'}, 'gcode_macro QUERY_AIR_FILTER': {'description': 'Displays the amount of time the air filter has run since it was last reset.', 'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }'}, 'delayed_gcode _AIR_FILTER_TIMER': {'initial_duration': '1', 'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1"}, 'delayed_gcode _AIR_FILTER_FLUSH_TIMER': {'initial_duration': '300', 'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300"}, 'gcode_macro HEATSOAKER': {'description': 'HeatSoak for an Hour', 'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999'}, 'gcode_macro BEEP': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}'}, 'gcode_macro BEEP_SUCCESS': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000'}, 'gcode_macro BEEP_ERROR': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100'}, 'gcode_macro CG28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CHOME': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CENTER_ACCURACY': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY'}, 'gcode_macro Lights_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro Lights_ON': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25'}, 'gcode_macro PID_HOTEND': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260'}, 'gcode_macro PID_BED': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110'}, 'gcode_macro MANUAL_FLOW_CALIBRATION': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'delayed_gcode HEATSOAK_DELAY': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}'}, 'gcode_macro HEATSOAK_TIMER': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}'}, 'gcode_macro PARK_FRONT': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT'}, 'gcode_macro PARK_FRONT_LOW': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW'}, 'gcode_macro PARK_REAR': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR'}, 'gcode_macro PARK_CENTER': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER'}, 'gcode_macro PARK_BED': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED'}, 'gcode_macro FORCE_BED_DOWN': {'description': 'Force move bed down without homing', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_UP': {'description': 'Force move bed down without homing.', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_LOCK': {'description': 'Active Z steppers to lock down the bed, Without Homing', 'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90'}, 'gcode_macro FORCE_BED_UNLOCK': {'description': 'Unlocks the Bed', 'gcode': '\nM84'}, 'delayed_gcode FILTER_AIR_STOP': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}'}, 'gcode_macro PRIME_BLOB': {'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.', 'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state'}, 'gcode_macro RINGING_TOWER': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_MZV': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_EI': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro PRIMING': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107'}, 'gcode_macro CLEAN': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro Z_TILT_ADJUST': {'rename_existing': '_Z_TILT_ADJUST', 'description': '', 'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro Smart_Park': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'exclude_object': {}, 'skew_correction': {}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '10000', 'max_z_velocity': '15', 'max_z_accel': '50', 'square_corner_velocity': '5.0'}, 'input_shaper': {'shaper_freq_x': '82.96', 'shaper_freq_y': '66.66'}, 'bed_mesh default': {'version': '1', 'points': '\n0.048750, 0.068750, 0.040000, 0.078750, 0.070000\n0.050000, 0.067500, 0.053750, 0.063750, 0.090000\n0.006250, 0.036250, 0.000000, 0.045000, 0.075000\n0.021250, 0.082500, 0.071250, 0.081250, 0.098750\n-0.025000, 0.068750, 0.046250, 0.088750, 0.078750', 'tension': '0.2', 'min_x': '40.0', 'algo': 'bicubic', 'y_count': '5', 'mesh_y_pps': '2', 'min_y': '40.0', 'x_count': '5', 'max_y': '260.0', 'mesh_x_pps': '2', 'max_x': '260.0'}, 'skew_correction my_skew_profile': {'xy_skew': '-0.000802972249612', 'xz_skew': '0.0', 'yz_skew': '0.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': '\\\\'}, 'gcode_macro cancel_print': {'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}', 'rename_existing': 'BASE_PAUSE', 'description': 'Pauses Print'}, 'gcode_macro resume': {'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'rename_existing': 'BASE_RESUME', 'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro polylite_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026', 'description': 'G-Code macro'}, 'gcode_macro polylite_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro sparta_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325', 'description': 'G-Code macro'}, 'gcode_macro sparta_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300', 'description': 'G-Code macro'}, 'gcode_macro sparta_purple': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_abs': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polylite_yellow_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro filament_reset': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro abs_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_reset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro clean_filament_cold_pull': {'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0', 'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince'}, 'gcode_macro manual_clean': {'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0', 'description': 'Grab a Brush ready, Start Scrubbing!'}, 'gcode_macro load_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro load_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro polyterra_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031', 'description': 'G-Code macro'}, 'gcode_macro polyterra_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro polyterra_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550', 'description': 'G-Code macro'}, 'gcode_macro polyterra_candy': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035', 'description': 'G-Code macro'}, 'gcode_macro polyterra_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polyterra_blue': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445', 'description': 'G-Code macro'}, 'gcode_macro polyterra_lav': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054', 'description': 'G-Code macro'}, 'gcode_macro ziro_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252', 'description': 'G-Code macro'}, 'gcode_macro jessie_tan': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029', 'description': 'G-Code macro'}, 'gcode_macro sunlu_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER', 'description': 'Run standard input shaper test for all axes'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS', 'description': 'Run custom demi-axe test to analyze belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400', 'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations'}, 'gcode_macro xybelt_tension': {'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }', 'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': 300.0, 'verbose': True}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_BED', 'min_temp': -20.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.5, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 33.946, 'pid_ki': 0.997, 'pid_kd': 288.961, 'heater_pin': 'HEATER_BED', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'tmc2209 extruder': {'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.1, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'PT1000', 'pullup_resistor': 2200.0, 'sensor_pin': 'nhk:gpio29', 'min_temp': 10.0, 'max_temp': 280.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.239, 'pid_ki': 1.965, 'pid_kd': 87.574, 'heater_pin': 'nhk:gpio9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'nhk:gpio23', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!nhk:gpio24', 'rotation_distance': 47.088, 'full_steps_per_rotation': 200, 'gear_ratio': [[9.0, 1.0]], 'enable_pin': '!nhk:gpio25'}, 'firmware_retraction': {'retract_length': 0.5, 'retract_speed': 30.0, 'unretract_extra_length': 0.0, 'unretract_speed': 30.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'nhk:gpio5', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'nhk:gpio6'}, 'output_pin caselight': {'pwm': True, 'pin': 'HEATER_LED', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.15, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_CHM', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'temperature_sensor pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'heater_fan vent': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BAY_1', 'fan_speed': 0.4}, 'fan_generic boombox': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'NMFAN'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BEDFAN'}, 'output_pin beeper': {'pwm': True, 'pin': 'BUZZ', 'cycle_time': 0.0005, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['B_MOTOR_EN', 'PF14'], ['B_MOTOR_STEP', 'PF13'], ['B_MOTOR_DIR', 'PF12'], ['B_MOTOR_UART', 'PC4'], ['A_MOTOR_EN', 'PF15'], ['A_MOTOR_STEP', 'PG0'], ['A_MOTOR_DIR', 'PG1'], ['A_MOTOR_UART', 'PD11'], ['EXTRUDER_EN', 'PG5'], ['EXTRUDER_STEP', 'PF11'], ['EXTRUDER_DIR', 'PG3'], ['EXTRUDER_UART', 'PC6'], ['Z_ZERO_EN', 'PF1'], ['Z_ZERO_STEP', 'PC13'], ['Z_ZERO_DIR', 'PF0'], ['Z_ZERO_UART', 'PE4'], ['Z_ONE_EN', 'PD4'], ['Z_ONE_STEP', 'PE2'], ['Z_ONE_DIR', 'PE3'], ['Z_ONE_UART', 'PE1'], ['Z_TWO_EN', 'PE0'], ['Z_TWO_STEP', 'PE6'], ['Z_TWO_DIR', 'PA14'], ['Z_TWO_UART', 'PD3'], ['HEATER_BED', 'PA3'], ['HEATER_HE', 'PA2'], ['HEATER_LED', 'PB10'], ['TEMP_BED', 'PF3'], ['TEMP_HE', 'PF4'], ['TEMP_CHM', 'PF5'], ['BAY_1', 'PD12'], ['BEDFAN', 'PA8'], ['NMFAN', 'PE5'], ['BUZZ', 'PD15'], ['ENDSTOP_Z', 'PG10'], ['ENDSTOP_X', 'PG6'], ['ENDSTOP_Y', 'PG9'], ['PROBE', 'PG13'], ['BTTFS', 'PG14'], ['RGBLED', 'PB0']]}, 'probe': {'z_offset': 7.18, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'nhk:gpio10', 'speed': 8.0, 'lift_speed': 8.0, 'x_offset': 0.0, 'y_offset': 19.75, 'samples': 3, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.0075, 'samples_tolerance_retries': 3}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 3, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 120.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [150.0, 150.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 8.0, 'speed': 150.0, 'fade_start': 0.6, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.04875, 0.06875, 0.04, 0.07875, 0.07], [0.05, 0.0675, 0.05375, 0.06375, 0.09], [0.00625, 0.03625, 0.0, 0.045, 0.075], [0.02125, 0.0825, 0.07125, 0.08125, 0.09875], [-0.025, 0.06875, 0.04625, 0.08875, 0.07875]], 'min_x': 40.0, 'max_x': 260.0, 'min_y': 40.0, 'max_y': 260.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': 3, 'color_order': ['RGBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!B_MOTOR_EN', 'endstop_pin': 'nhk:gpio12', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!A_MOTOR_EN', 'endstop_pin': 'ENDSTOP_Y', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ZERO_EN', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 200.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ONE_EN'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_TWO_EN'}, 'output_pin act_led': {'pwm': False, 'pin': '!nhk:gpio8', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'nhk:gpio21', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_miso_pin': 'nhk:gpio19', 'spi_software_mosi_pin': 'nhk:gpio20'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[155.0, 155.0, 20.0]], 'accel_chip': 'adxl345'}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'pullup_resistor': 2200.0, 'inline_resistor': 0.0, 'sensor_pin': 'nhk:gpio26', 'min_temp': 0.0, 'max_temp': 100.0}, 'filament_motion_sensor filament_sensor': {'switch_pin': '^BTTFS', 'extruder': 'extruder', 'detection_length': 14.0, 'pause_on_runout': True, 'runout_gcode': '\nBEEP_ERROR\nPAUSE', 'insert_gcode': '\nNozzle_ON', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro fs_off': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro fs_on': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro _air_filter_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1'}, 'gcode_macro reset_air_filter': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }', 'description': 'Resets the air-filter replacement timer'}, 'gcode_macro query_air_filter': {'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }', 'description': 'Displays the amount of time the air filter has run since it was last reset.'}, 'delayed_gcode _air_filter_timer': {'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1", 'initial_duration': 1.0}, 'delayed_gcode _air_filter_flush_timer': {'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300", 'initial_duration': 300.0}, 'gcode_macro heatsoaker': {'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999', 'description': 'HeatSoak for an Hour'}, 'gcode_macro beep': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro beep_success': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000', 'description': 'G-Code macro'}, 'gcode_macro beep_error': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100', 'description': 'G-Code macro'}, 'gcode_macro cg28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro chome': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro center_accuracy': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro lights_on': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25', 'description': 'G-Code macro'}, 'gcode_macro pid_hotend': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260', 'description': 'G-Code macro'}, 'gcode_macro pid_bed': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110', 'description': 'G-Code macro'}, 'gcode_macro manual_flow_calibration': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'delayed_gcode heatsoak_delay': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro heatsoak_timer': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}', 'description': 'G-Code macro'}, 'gcode_macro park_front': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT', 'description': 'G-Code macro'}, 'gcode_macro park_front_low': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW', 'description': 'G-Code macro'}, 'gcode_macro park_rear': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR', 'description': 'G-Code macro'}, 'gcode_macro park_center': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER', 'description': 'G-Code macro'}, 'gcode_macro park_bed': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED', 'description': 'G-Code macro'}, 'gcode_macro force_bed_down': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing'}, 'gcode_macro force_bed_up': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing.'}, 'gcode_macro force_bed_lock': {'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90', 'description': 'Active Z steppers to lock down the bed, Without Homing'}, 'gcode_macro force_bed_unlock': {'gcode': '\nM84', 'description': 'Unlocks the Bed'}, 'delayed_gcode filter_air_stop': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro print_end': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro prime_blob': {'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state', 'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.'}, 'gcode_macro ringing_tower': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_mzv': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_ei': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro priming': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000', 'description': 'G-Code macro'}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount'}, 'gcode_macro z_tilt_adjust': {'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0', 'rename_existing': '_Z_TILT_ADJUST', 'description': ''}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'skew_correction my_skew_profile': {'xy_skew': -0.000802972249612, 'xz_skew': 0.0, 'yz_skew': 0.0}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 82.96, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 66.66}, 'printer': {'max_velocity': 300.0, 'max_accel': 10000.0, 'max_accel_to_decel': 5000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 50.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-07 21:50:43,519 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 21:50:43,520 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-07 21:50:43,520 [printer.py:reinit()] - # Extruders: 1
2024-02-07 21:50:43,520 [printer.py:reinit()] - # Temperature devices: 5
2024-02-07 21:50:43,520 [printer.py:reinit()] - # Fans: 5
2024-02-07 21:50:43,520 [printer.py:reinit()] - # Output pins: 3
2024-02-07 21:50:43,520 [printer.py:reinit()] - # Leds: 1
2024-02-07 21:50:43,531 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-07 21:50:43,533 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-07 21:50:43,809 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor Pi&temperature_sensor Octopus&temperature_sensor Nitehawk&fan&fan_generic BoomBox&fan_generic BedFans&heater_fan hotend_fan&heater_fan Vent&filament_motion_sensor filament_sensor&output_pin caselight&output_pin beeper&output_pin act_led&neopixel sb_leds
2024-02-07 21:50:43,813 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-07 21:50:43,813 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-07 21:50:43,814 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-07 21:50:43,815 [screen.py:init_klipper()] - Printer initialized
2024-02-07 21:50:43,816 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-07 21:50:43,816 [printer.py:change_state()] - Adding callback for state: ready
2024-02-07 21:50:43,819 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-07 21:50:43,895 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-07 21:50:43,913 [main_menu.py:add_device()] - Adding device: extruder
2024-02-07 21:50:43,920 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-07 21:50:43,925 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-07 21:50:43,925 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-07 21:50:43,925 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-07 21:50:43,925 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-07 21:50:43,948 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-07 21:50:43,954 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-07 21:50:43,955 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-02-07 21:50:43,955 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: None
2024-02-07 21:50:49,445 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-07 21:50:49,468 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor Pi', 'temperature_sensor Octopus', 'temperature_sensor Nitehawk', 'extruder']
2024-02-07 21:50:49,482 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-07 21:50:49,483 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-07 21:55:58,129 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-07 22:10:49,495 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-07 22:10:49,496 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-07 22:10:49,497 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-07 22:10:49,497 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 22:10:49,498 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-07 22:10:49,532 [screen.py:wake_screen()] - Screen wake up
2024-02-07 22:10:49,938 [screen.py:show_panel()] - Reinitializing panel
2024-02-07 22:10:49,968 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-07 22:10:53,134 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-07 22:10:53,142 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-07 22:10:53,143 [printer.py:configure_cameras()] - Cameras: []
2024-02-07 22:10:53,143 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-07 22:10:53,149 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-07 22:10:53,171 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-07 22:10:53,174 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_prefix': '\\\\'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pauses Print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'gcode_macro POLYLITE_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026'}, 'gcode_macro POLYLITE_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro SPARTA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325'}, 'gcode_macro SPARTA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300'}, 'gcode_macro SPARTA_PURPLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro POLYLITE_BLACK_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510'}, 'gcode_macro POLYLITE_BLACK_ABS': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYLITE_YELLOW_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro FILAMENT_RESET': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro ABS_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0'}, 'gcode_macro PRINT_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0'}, 'gcode_macro PRINT_RESET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0'}, 'gcode_macro Clean_Filament_Cold_Pull': {'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince', 'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0'}, 'gcode_macro Manual_Clean': {'description': 'Grab a Brush ready, Start Scrubbing!', 'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0'}, 'gcode_macro LOAD_FILAMENT_PLA': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro LOAD_FILAMENT_ABS': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_PLA': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_ABS': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro POLYTERRA_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031'}, 'gcode_macro POLYTERRA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro POLYTERRA_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550'}, 'gcode_macro POLYTERRA_CANDY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035'}, 'gcode_macro POLYTERRA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYTERRA_BLUE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445'}, 'gcode_macro POLYTERRA_LAV': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054'}, 'gcode_macro ZIRO_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252'}, 'gcode_macro JESSIE_TAN': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029'}, 'gcode_macro SUNLU_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066'}, 'gcode_macro M600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Run standard input shaper test for all axes', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Run custom demi-axe test to analyze belts on CoreXY printers', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations', 'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400'}, 'gcode_macro XYBelt_Tension': {'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115', 'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': '300.0', 'verbose': 'True'}, 'heater_bed': {'pwm_cycle_time': '0.0166', 'heater_pin': 'HEATER_BED', 'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_BED', 'max_power': '0.5', 'min_temp': '-20', 'max_temp': '120', 'control': 'pid', 'pid_kp': '33.946', 'pid_ki': '0.997', 'pid_kd': '288.961'}, 'extruder': {'step_pin': 'nhk:gpio23', 'dir_pin': '!nhk:gpio24', 'enable_pin': '!nhk:gpio25', 'rotation_distance': '47.088', 'gear_ratio': '9:1', 'microsteps': '16', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'nhk:gpio9', 'sensor_pin': 'nhk:gpio29', 'pullup_resistor': '2200', 'sensor_type': 'PT1000', 'min_temp': '10', 'max_temp': '280', 'max_power': '1.0', 'min_extrude_temp': '10', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'control': 'pid', 'pid_kp': '26.239', 'pid_ki': '1.965', 'pid_kd': '87.574'}, 'tmc2209 extruder': {'stealthchop_threshold': '0', 'run_current': '0.6', 'interpolate': 'false', 'sense_resistor': '0.100', 'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1'}, 'firmware_retraction': {'retract_length': '0.5', 'retract_speed': '30', 'unretract_speed': '30'}, 'heater_fan hotend_fan': {'pin': 'nhk:gpio5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'nhk:gpio6', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.010'}, 'output_pin caselight': {'pin': 'HEATER_LED', 'pwm': 'true', 'cycle_time': '0.01', 'value': '0.15'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_CHM', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'temperature_sensor Pi': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'heater_fan Vent': {'pin': 'BAY_1', 'max_power': '1', 'kick_start_time': '0.5', 'shutdown_speed': '0', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '0.40', 'cycle_time': '0.008'}, 'fan_generic BoomBox': {'pin': 'NMFAN', 'shutdown_speed': '0.0', 'hardware_pwm': 'False', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.008'}, 'fan_generic BedFans': {'pin': 'BEDFAN', 'kick_start_time': '0.5', 'cycle_time': '0.008'}, 'output_pin beeper': {'pin': 'BUZZ', 'value': '0', 'shutdown_value': '0', 'pwm': 'True', 'cycle_time': '0.0005'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00'}, 'board_pins': {'aliases': '\n\n\nB_MOTOR_EN=PF14,  B_MOTOR_STEP=PF13,  B_MOTOR_DIR=PF12,  B_MOTOR_UART=PC4,\n\nA_MOTOR_EN=PF15,  A_MOTOR_STEP=PG0,  A_MOTOR_DIR=PG1,  A_MOTOR_UART=PD11,\n\nEXTRUDER_EN=PG5,  EXTRUDER_STEP=PF11,  EXTRUDER_DIR=PG3,  EXTRUDER_UART=PC6,\n\n\n\nZ_ZERO_EN=PF1,  Z_ZERO_STEP=PC13,  Z_ZERO_DIR=PF0,  Z_ZERO_UART=PE4,\n\nZ_ONE_EN=PD4,  Z_ONE_STEP=PE2,  Z_ONE_DIR=PE3,  Z_ONE_UART=PE1,\n\nZ_TWO_EN=PE0,  Z_TWO_STEP=PE6,  Z_TWO_DIR=PA14, Z_TWO_UART=PD3,\n\n\n\nHEATER_BED=PA3, HEATER_HE=PA2, HEATER_LED=PB10,\n\nTEMP_BED=PF3, TEMP_HE=PF4, TEMP_CHM=PF5,\n\nBAY_1=PD12, BEDFAN=PA8, NMFAN=PE5, BUZZ=PD15,\n\nENDSTOP_Z=PG10,  ENDSTOP_X=PG6,  ENDSTOP_Y=PG9, PROBE=PG13, BTTFS=PG14, RGBLED=PB0'}, 'stepper_z': {'endstop_pin': 'probe:z_virtual_endstop', 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'enable_pin': '!Z_ZERO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200', 'position_max': '200', 'position_min': '-10', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'probe': {'pin': 'nhk:gpio10', 'z_offset': '7.180', 'x_offset': '0', 'y_offset': '19.75', 'speed': '8.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.0075', 'samples_tolerance_retries': '3'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '120', 'retries': '3', 'retry_tolerance': '0.0075', 'horizontal_move_z': '10'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '8', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'probe_count': '5,5', 'zero_reference_position': '150, 150', 'algorithm': 'bicubic', 'fade_start': '0.6', 'fade_end': '10', 'fade_target': '0'}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': '3', 'color_order': 'RGBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'stepper_x': {'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'enable_pin': '!B_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true', 'endstop_pin': 'nhk:gpio12'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'enable_pin': '!A_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'ENDSTOP_Y', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'enable_pin': '!Z_ONE_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'enable_pin': '!Z_TWO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00'}, 'output_pin act_led': {'pin': '!nhk:gpio8'}, 'adxl345': {'cs_pin': 'nhk:gpio21', 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_mosi_pin': 'nhk:gpio20', 'spi_software_miso_pin': 'nhk:gpio19'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n155, 155, 20'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor Nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'sensor_pin': 'nhk:gpio26', 'pullup_resistor': '2200', 'min_temp': '0', 'max_temp': '100'}, 'filament_motion_sensor filament_sensor': {'detection_length': '14', 'extruder': 'extruder', 'switch_pin': '^BTTFS', 'pause_on_runout': 'True', 'insert_gcode': '\nNozzle_ON', 'runout_gcode': '\nBEEP_ERROR\nPAUSE'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_OFF': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_ON': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1'}, 'gcode_macro _AIR_FILTER_VARIABLES': {'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1', 'gcode': ''}, 'gcode_macro RESET_AIR_FILTER': {'description': 'Resets the air-filter replacement timer', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }'}, 'gcode_macro QUERY_AIR_FILTER': {'description': 'Displays the amount of time the air filter has run since it was last reset.', 'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }'}, 'delayed_gcode _AIR_FILTER_TIMER': {'initial_duration': '1', 'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1"}, 'delayed_gcode _AIR_FILTER_FLUSH_TIMER': {'initial_duration': '300', 'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300"}, 'gcode_macro HEATSOAKER': {'description': 'HeatSoak for an Hour', 'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999'}, 'gcode_macro BEEP': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}'}, 'gcode_macro BEEP_SUCCESS': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000'}, 'gcode_macro BEEP_ERROR': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100'}, 'gcode_macro CG28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CHOME': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CENTER_ACCURACY': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY'}, 'gcode_macro Lights_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro Lights_ON': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25'}, 'gcode_macro PID_HOTEND': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260'}, 'gcode_macro PID_BED': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110'}, 'gcode_macro MANUAL_FLOW_CALIBRATION': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'delayed_gcode HEATSOAK_DELAY': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}'}, 'gcode_macro HEATSOAK_TIMER': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}'}, 'gcode_macro PARK_FRONT': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT'}, 'gcode_macro PARK_FRONT_LOW': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW'}, 'gcode_macro PARK_REAR': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR'}, 'gcode_macro PARK_CENTER': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER'}, 'gcode_macro PARK_BED': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED'}, 'gcode_macro FORCE_BED_DOWN': {'description': 'Force move bed down without homing', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_UP': {'description': 'Force move bed down without homing.', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_LOCK': {'description': 'Active Z steppers to lock down the bed, Without Homing', 'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90'}, 'gcode_macro FORCE_BED_UNLOCK': {'description': 'Unlocks the Bed', 'gcode': '\nM84'}, 'delayed_gcode FILTER_AIR_STOP': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}'}, 'gcode_macro PRIME_BLOB': {'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.', 'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state'}, 'gcode_macro RINGING_TOWER': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_MZV': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_EI': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro PRIMING': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107'}, 'gcode_macro CLEAN': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro Z_TILT_ADJUST': {'rename_existing': '_Z_TILT_ADJUST', 'description': '', 'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro Smart_Park': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'exclude_object': {}, 'skew_correction': {}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '10000', 'max_z_velocity': '15', 'max_z_accel': '50', 'square_corner_velocity': '5.0'}, 'input_shaper': {'shaper_freq_x': '58.8', 'shaper_type_x': 'zv', 'shaper_freq_y': '43.4', 'shaper_type_y': 'mzv'}, 'bed_mesh default': {'version': '1', 'points': '\n0.048750, 0.068750, 0.040000, 0.078750, 0.070000\n0.050000, 0.067500, 0.053750, 0.063750, 0.090000\n0.006250, 0.036250, 0.000000, 0.045000, 0.075000\n0.021250, 0.082500, 0.071250, 0.081250, 0.098750\n-0.025000, 0.068750, 0.046250, 0.088750, 0.078750', 'tension': '0.2', 'min_x': '40.0', 'algo': 'bicubic', 'y_count': '5', 'mesh_y_pps': '2', 'min_y': '40.0', 'x_count': '5', 'max_y': '260.0', 'mesh_x_pps': '2', 'max_x': '260.0'}, 'skew_correction my_skew_profile': {'xy_skew': '-0.000802972249612', 'xz_skew': '0.0', 'yz_skew': '0.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': '\\\\'}, 'gcode_macro cancel_print': {'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}', 'rename_existing': 'BASE_PAUSE', 'description': 'Pauses Print'}, 'gcode_macro resume': {'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'rename_existing': 'BASE_RESUME', 'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro polylite_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026', 'description': 'G-Code macro'}, 'gcode_macro polylite_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro sparta_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325', 'description': 'G-Code macro'}, 'gcode_macro sparta_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300', 'description': 'G-Code macro'}, 'gcode_macro sparta_purple': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_abs': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polylite_yellow_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro filament_reset': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro abs_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_reset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro clean_filament_cold_pull': {'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0', 'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince'}, 'gcode_macro manual_clean': {'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0', 'description': 'Grab a Brush ready, Start Scrubbing!'}, 'gcode_macro load_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro load_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro polyterra_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031', 'description': 'G-Code macro'}, 'gcode_macro polyterra_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro polyterra_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550', 'description': 'G-Code macro'}, 'gcode_macro polyterra_candy': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035', 'description': 'G-Code macro'}, 'gcode_macro polyterra_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polyterra_blue': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445', 'description': 'G-Code macro'}, 'gcode_macro polyterra_lav': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054', 'description': 'G-Code macro'}, 'gcode_macro ziro_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252', 'description': 'G-Code macro'}, 'gcode_macro jessie_tan': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029', 'description': 'G-Code macro'}, 'gcode_macro sunlu_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER', 'description': 'Run standard input shaper test for all axes'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS', 'description': 'Run custom demi-axe test to analyze belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400', 'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations'}, 'gcode_macro xybelt_tension': {'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }', 'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': 300.0, 'verbose': True}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_BED', 'min_temp': -20.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.5, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 33.946, 'pid_ki': 0.997, 'pid_kd': 288.961, 'heater_pin': 'HEATER_BED', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'tmc2209 extruder': {'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.1, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'PT1000', 'pullup_resistor': 2200.0, 'sensor_pin': 'nhk:gpio29', 'min_temp': 10.0, 'max_temp': 280.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.239, 'pid_ki': 1.965, 'pid_kd': 87.574, 'heater_pin': 'nhk:gpio9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'nhk:gpio23', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!nhk:gpio24', 'rotation_distance': 47.088, 'full_steps_per_rotation': 200, 'gear_ratio': [[9.0, 1.0]], 'enable_pin': '!nhk:gpio25'}, 'firmware_retraction': {'retract_length': 0.5, 'retract_speed': 30.0, 'unretract_extra_length': 0.0, 'unretract_speed': 30.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'nhk:gpio5', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'nhk:gpio6'}, 'output_pin caselight': {'pwm': True, 'pin': 'HEATER_LED', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.15, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_CHM', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'temperature_sensor pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'heater_fan vent': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BAY_1', 'fan_speed': 0.4}, 'fan_generic boombox': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'NMFAN'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BEDFAN'}, 'output_pin beeper': {'pwm': True, 'pin': 'BUZZ', 'cycle_time': 0.0005, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['B_MOTOR_EN', 'PF14'], ['B_MOTOR_STEP', 'PF13'], ['B_MOTOR_DIR', 'PF12'], ['B_MOTOR_UART', 'PC4'], ['A_MOTOR_EN', 'PF15'], ['A_MOTOR_STEP', 'PG0'], ['A_MOTOR_DIR', 'PG1'], ['A_MOTOR_UART', 'PD11'], ['EXTRUDER_EN', 'PG5'], ['EXTRUDER_STEP', 'PF11'], ['EXTRUDER_DIR', 'PG3'], ['EXTRUDER_UART', 'PC6'], ['Z_ZERO_EN', 'PF1'], ['Z_ZERO_STEP', 'PC13'], ['Z_ZERO_DIR', 'PF0'], ['Z_ZERO_UART', 'PE4'], ['Z_ONE_EN', 'PD4'], ['Z_ONE_STEP', 'PE2'], ['Z_ONE_DIR', 'PE3'], ['Z_ONE_UART', 'PE1'], ['Z_TWO_EN', 'PE0'], ['Z_TWO_STEP', 'PE6'], ['Z_TWO_DIR', 'PA14'], ['Z_TWO_UART', 'PD3'], ['HEATER_BED', 'PA3'], ['HEATER_HE', 'PA2'], ['HEATER_LED', 'PB10'], ['TEMP_BED', 'PF3'], ['TEMP_HE', 'PF4'], ['TEMP_CHM', 'PF5'], ['BAY_1', 'PD12'], ['BEDFAN', 'PA8'], ['NMFAN', 'PE5'], ['BUZZ', 'PD15'], ['ENDSTOP_Z', 'PG10'], ['ENDSTOP_X', 'PG6'], ['ENDSTOP_Y', 'PG9'], ['PROBE', 'PG13'], ['BTTFS', 'PG14'], ['RGBLED', 'PB0']]}, 'probe': {'z_offset': 7.18, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'nhk:gpio10', 'speed': 8.0, 'lift_speed': 8.0, 'x_offset': 0.0, 'y_offset': 19.75, 'samples': 3, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.0075, 'samples_tolerance_retries': 3}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 3, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 120.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [150.0, 150.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 8.0, 'speed': 150.0, 'fade_start': 0.6, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.04875, 0.06875, 0.04, 0.07875, 0.07], [0.05, 0.0675, 0.05375, 0.06375, 0.09], [0.00625, 0.03625, 0.0, 0.045, 0.075], [0.02125, 0.0825, 0.07125, 0.08125, 0.09875], [-0.025, 0.06875, 0.04625, 0.08875, 0.07875]], 'min_x': 40.0, 'max_x': 260.0, 'min_y': 40.0, 'max_y': 260.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': 3, 'color_order': ['RGBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!B_MOTOR_EN', 'endstop_pin': 'nhk:gpio12', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!A_MOTOR_EN', 'endstop_pin': 'ENDSTOP_Y', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ZERO_EN', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 200.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ONE_EN'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_TWO_EN'}, 'output_pin act_led': {'pwm': False, 'pin': '!nhk:gpio8', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'nhk:gpio21', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_miso_pin': 'nhk:gpio19', 'spi_software_mosi_pin': 'nhk:gpio20'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[155.0, 155.0, 20.0]], 'accel_chip': 'adxl345'}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'pullup_resistor': 2200.0, 'inline_resistor': 0.0, 'sensor_pin': 'nhk:gpio26', 'min_temp': 0.0, 'max_temp': 100.0}, 'filament_motion_sensor filament_sensor': {'switch_pin': '^BTTFS', 'extruder': 'extruder', 'detection_length': 14.0, 'pause_on_runout': True, 'runout_gcode': '\nBEEP_ERROR\nPAUSE', 'insert_gcode': '\nNozzle_ON', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro fs_off': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro fs_on': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro _air_filter_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1'}, 'gcode_macro reset_air_filter': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }', 'description': 'Resets the air-filter replacement timer'}, 'gcode_macro query_air_filter': {'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }', 'description': 'Displays the amount of time the air filter has run since it was last reset.'}, 'delayed_gcode _air_filter_timer': {'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1", 'initial_duration': 1.0}, 'delayed_gcode _air_filter_flush_timer': {'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300", 'initial_duration': 300.0}, 'gcode_macro heatsoaker': {'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999', 'description': 'HeatSoak for an Hour'}, 'gcode_macro beep': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro beep_success': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000', 'description': 'G-Code macro'}, 'gcode_macro beep_error': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100', 'description': 'G-Code macro'}, 'gcode_macro cg28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro chome': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro center_accuracy': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro lights_on': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25', 'description': 'G-Code macro'}, 'gcode_macro pid_hotend': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260', 'description': 'G-Code macro'}, 'gcode_macro pid_bed': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110', 'description': 'G-Code macro'}, 'gcode_macro manual_flow_calibration': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'delayed_gcode heatsoak_delay': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro heatsoak_timer': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}', 'description': 'G-Code macro'}, 'gcode_macro park_front': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT', 'description': 'G-Code macro'}, 'gcode_macro park_front_low': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW', 'description': 'G-Code macro'}, 'gcode_macro park_rear': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR', 'description': 'G-Code macro'}, 'gcode_macro park_center': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER', 'description': 'G-Code macro'}, 'gcode_macro park_bed': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED', 'description': 'G-Code macro'}, 'gcode_macro force_bed_down': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing'}, 'gcode_macro force_bed_up': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing.'}, 'gcode_macro force_bed_lock': {'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90', 'description': 'Active Z steppers to lock down the bed, Without Homing'}, 'gcode_macro force_bed_unlock': {'gcode': '\nM84', 'description': 'Unlocks the Bed'}, 'delayed_gcode filter_air_stop': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro print_end': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro prime_blob': {'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state', 'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.'}, 'gcode_macro ringing_tower': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_mzv': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_ei': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro priming': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000', 'description': 'G-Code macro'}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount'}, 'gcode_macro z_tilt_adjust': {'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0', 'rename_existing': '_Z_TILT_ADJUST', 'description': ''}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'skew_correction my_skew_profile': {'xy_skew': -0.000802972249612, 'xz_skew': 0.0, 'yz_skew': 0.0}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'zv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 58.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 43.4}, 'printer': {'max_velocity': 300.0, 'max_accel': 10000.0, 'max_accel_to_decel': 5000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 50.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-07 22:10:53,179 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 22:10:53,181 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-07 22:10:53,181 [printer.py:reinit()] - # Extruders: 1
2024-02-07 22:10:53,181 [printer.py:reinit()] - # Temperature devices: 5
2024-02-07 22:10:53,181 [printer.py:reinit()] - # Fans: 5
2024-02-07 22:10:53,181 [printer.py:reinit()] - # Output pins: 3
2024-02-07 22:10:53,181 [printer.py:reinit()] - # Leds: 1
2024-02-07 22:10:53,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-07 22:10:53,193 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-07 22:10:53,473 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor Pi&temperature_sensor Octopus&temperature_sensor Nitehawk&fan&fan_generic BoomBox&fan_generic BedFans&heater_fan hotend_fan&heater_fan Vent&filament_motion_sensor filament_sensor&output_pin caselight&output_pin beeper&output_pin act_led&neopixel sb_leds
2024-02-07 22:10:53,477 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-07 22:10:53,477 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-07 22:10:53,478 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-07 22:10:53,478 [screen.py:init_klipper()] - Printer initialized
2024-02-07 22:10:53,478 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-07 22:10:53,478 [printer.py:change_state()] - Adding callback for state: startup
2024-02-07 22:10:53,913 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-07 22:10:53,913 [printer.py:change_state()] - Adding callback for state: ready
2024-02-07 22:10:53,916 [screen.py:show_panel()] - Reinitializing panel
2024-02-07 22:10:53,976 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-07 22:10:53,994 [main_menu.py:add_device()] - Adding device: extruder
2024-02-07 22:10:53,998 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-07 22:10:54,003 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-07 22:10:54,003 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-07 22:10:54,003 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-07 22:10:54,003 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-07 22:10:54,027 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-07 22:10:54,044 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-07 22:10:54,048 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor Pi', 'temperature_sensor Octopus', 'temperature_sensor Nitehawk', 'extruder']
2024-02-07 22:10:54,055 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-07 22:10:54,055 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-07 22:15:50,129 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-07 22:46:37,418 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-07 22:46:37,436 [screen.py:wake_screen()] - Screen wake up
2024-02-07 22:46:37,834 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_PREP"
2024-02-07 22:46:37,900 [KlippyWebsocket.py:get_file_dir()] - Sending server.files.directory gcodes/.thumbs
2024-02-07 22:46:37,901 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-07 22:46:37,902 [printer.py:change_state()] - Adding callback for state: printing
2024-02-07 22:46:37,905 [screen.py:_load_panel()] - Loading panel: job_status
2024-02-07 22:46:38,022 [job_status.py:create_status_grid()] - Titlebar items: ['']
2024-02-07 22:46:38,046 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-07 22:46:38,052 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-07 22:46:38,065 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-02-07 22:46:38,065 [job_status.py:show_file_thumbnail()] - flowrate_0_ABS_26m6s.gcode
2024-02-07 22:46:38,066 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-02-07 22:46:38,113 [job_status.py:update_file_metadata()] - Update Metadata. File: flowrate_0_ABS_26m6s.gcode Size: 497001
2024-02-07 22:46:38,118 [job_status.py:show_file_thumbnail()] - flowrate_0_ABS_26m6s.gcode
2024-02-07 22:46:38,119 [files.py:remove_file_callback()] - removing callback <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f8715f610>>
2024-02-07 22:46:38,141 [job_status.py:update_file_metadata()] - Update Metadata. File: flowrate_0_ABS_26m6s.gcode Size: 497001
2024-02-07 22:46:38,147 [job_status.py:show_file_thumbnail()] - flowrate_0_ABS_26m6s.gcode
2024-02-07 22:46:38,148 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f8715f610>>
2024-02-07 22:51:20,091 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-07 22:51:20,091 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-88-gc832c90
2024-02-07 22:51:20,091 [functions.py:log_start()] - Python version: 3.11
2024-02-07 22:51:20,212 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-07 22:51:20,212 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-07 22:51:20,228 [config.py:log_config()] -  ===== Config File =====
[printer Zarya]

[menu __main my_macros_menu]
name = Macros

[menu __main my_macros_menu sub_macro_item]
name = PARK CENTER
method = printer.gcode.script
params = {"script":"PARK_CENTER"}

[menu __main my_macros_menu sub_macro_item2]
name = Force Bed Down
method = printer.gcode.script
params = {"script":"force_bed_down DISTANCE=4"}

[menu __main my_macros_menu sub_macro_item3]
name = HEATSOAKER
method = printer.gcode.script
params = {"script":"HEATSOAKER"}
=======================
2024-02-07 22:51:20,234 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
screen_blanking = 300
24htime = False
side_macro_shortcut = False
font_size = large
only_heaters = True
invert_z = True
move_speed_xy = 199

[displayed_macros Printer]
attach_probe = False
bed_mesh_calibrate = False
attach_probe_lock = False
center_toolhead = False
dock_probe = False
g32 = False
dock_probe_unlock = False
jessie_tan = False
center_accuracy = False
filament_reset = False
jessie_soulblack = False
m900 = False
preheat = False
polyterra_white = False
nmfan_on = False
polyterra_marble = False
polylite_black = False
purgeline = False
probe_calibrate = False
probe_accuracy = False
polyterra_gray = False
polylite_gray = False
polyterra_black = False
status_busy = False
print_start = False
status_meshing = False
status_calibrating_z = False
test_speed = False
status_off = False
status_leveling = False
status_ready = False
set_nozzle_leds_on = False
set_nozzle_leds_off = False
set_logo_leds_off = False
status_heating = False
status_homing = False
status_cleaning = False
status_printing = False
abs_offset = False
beep = False
blk_paramount = False
cg28 = False
polyterra_blue = False
pause = False
measure_resonnances_x = False
m600 = False
measure_resonnances_y = False
polyterra_candy = False
polyterra_purp = False
sparta_black = False
query_air_filter = False
print_end = False
z_tilt_adjust = False
reset_air_filter = False
polylite_black_asa = False
ziro_marble = False
ziro_sparkle = False
sparta_purple = False
status_caution = False
sparta_gray = False
calibrate_z = False
cancel_print = False
axes_shaper_calibration = False
beep_error = False
belts_shaper_calibration = False
beep_success = False
excitate_axis_at_freq = False
compute_flow_multiplier = False
flow_multiplier_calibration = False
manual_flow_calibration = False
line_purge = False
prime_blob = False
polylite_black_abs = False
polylite_yellow_asa = False
pressure_advance_calibration = False
setup_kamp_meshing = False
sparta_reset = False
setup_line_purge = False
sparta_offset = False
print_reset = False

[graph Printer]
heater_bed = False
extruder = False

=======================
2024-02-07 22:51:20,234 [config.py:__init__()] - Configured printers: [
  {
    "Zarya": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-07 22:51:20,298 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-07 22:51:20,298 [config.py:install_language()] - Using lang en
2024-02-07 22:51:20,311 [screen.py:__init__()] - Screen resolution: 800x480
2024-02-07 22:51:20,312 [KlippyGtk.py:__init__()] - Font size: 18.0 (large)
2024-02-07 22:51:20,883 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 300
2024-02-07 22:51:20,889 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-07 22:51:20,895 [screen.py:initial_connection()] - Default printer: None
2024-02-07 22:51:20,925 [screen.py:connect_printer()] - Connecting to printer: Zarya
2024-02-07 22:51:20,925 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-07 22:51:20,962 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-07 22:51:20,972 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-07 22:51:20,985 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-07 22:51:20,993 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-07 22:51:20,995 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-07 22:51:21,001 [_logging.py:info()] - Websocket connected
2024-02-07 22:51:21,001 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-07 22:51:21,094 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-07 22:51:21,100 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-07 22:51:21,101 [printer.py:configure_cameras()] - Cameras: []
2024-02-07 22:51:21,101 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-07 22:51:21,109 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-07 22:51:21,254 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-07 22:51:21,257 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_prefix': '\\\\'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pauses Print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'gcode_macro POLYLITE_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026'}, 'gcode_macro POLYLITE_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro SPARTA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325'}, 'gcode_macro SPARTA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300'}, 'gcode_macro SPARTA_PURPLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro POLYLITE_BLACK_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510'}, 'gcode_macro POLYLITE_BLACK_ABS': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYLITE_YELLOW_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro FILAMENT_RESET': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro ABS_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0'}, 'gcode_macro PRINT_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0'}, 'gcode_macro PRINT_RESET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0'}, 'gcode_macro Clean_Filament_Cold_Pull': {'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince', 'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0'}, 'gcode_macro Manual_Clean': {'description': 'Grab a Brush ready, Start Scrubbing!', 'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0'}, 'gcode_macro LOAD_FILAMENT_PLA': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro LOAD_FILAMENT_ABS': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_PLA': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_ABS': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro POLYTERRA_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031'}, 'gcode_macro POLYTERRA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro POLYTERRA_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550'}, 'gcode_macro POLYTERRA_CANDY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035'}, 'gcode_macro POLYTERRA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYTERRA_BLUE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445'}, 'gcode_macro POLYTERRA_LAV': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054'}, 'gcode_macro ZIRO_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252'}, 'gcode_macro JESSIE_TAN': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029'}, 'gcode_macro SUNLU_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066'}, 'gcode_macro M600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Run standard input shaper test for all axes', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Run custom demi-axe test to analyze belts on CoreXY printers', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations', 'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400'}, 'gcode_macro XYBelt_Tension': {'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115', 'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': '300.0', 'verbose': 'True'}, 'heater_bed': {'pwm_cycle_time': '0.0166', 'heater_pin': 'HEATER_BED', 'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_BED', 'max_power': '0.5', 'min_temp': '-20', 'max_temp': '120', 'control': 'pid', 'pid_kp': '33.946', 'pid_ki': '0.997', 'pid_kd': '288.961'}, 'extruder': {'step_pin': 'nhk:gpio23', 'dir_pin': '!nhk:gpio24', 'enable_pin': '!nhk:gpio25', 'rotation_distance': '47.088', 'gear_ratio': '9:1', 'microsteps': '16', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'nhk:gpio9', 'sensor_pin': 'nhk:gpio29', 'pullup_resistor': '2200', 'sensor_type': 'PT1000', 'min_temp': '10', 'max_temp': '280', 'max_power': '1.0', 'min_extrude_temp': '10', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'control': 'pid', 'pid_kp': '26.239', 'pid_ki': '1.965', 'pid_kd': '87.574'}, 'tmc2209 extruder': {'stealthchop_threshold': '0', 'run_current': '0.6', 'interpolate': 'false', 'sense_resistor': '0.100', 'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1'}, 'firmware_retraction': {'retract_length': '0.5', 'retract_speed': '30', 'unretract_speed': '30'}, 'heater_fan hotend_fan': {'pin': 'nhk:gpio5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'nhk:gpio6', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.010'}, 'output_pin caselight': {'pin': 'HEATER_LED', 'pwm': 'true', 'cycle_time': '0.01', 'value': '0.15'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_CHM', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'temperature_sensor Pi': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'heater_fan Vent': {'pin': 'BAY_1', 'max_power': '1', 'kick_start_time': '0.5', 'shutdown_speed': '0', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '0.40', 'cycle_time': '0.008'}, 'fan_generic BoomBox': {'pin': 'NMFAN', 'shutdown_speed': '0.0', 'hardware_pwm': 'False', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.008'}, 'fan_generic BedFans': {'pin': 'BEDFAN', 'kick_start_time': '0.5', 'cycle_time': '0.008'}, 'output_pin beeper': {'pin': 'BUZZ', 'value': '0', 'shutdown_value': '0', 'pwm': 'True', 'cycle_time': '0.0005'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00'}, 'board_pins': {'aliases': '\n\n\nB_MOTOR_EN=PF14,  B_MOTOR_STEP=PF13,  B_MOTOR_DIR=PF12,  B_MOTOR_UART=PC4,\n\nA_MOTOR_EN=PF15,  A_MOTOR_STEP=PG0,  A_MOTOR_DIR=PG1,  A_MOTOR_UART=PD11,\n\nEXTRUDER_EN=PG5,  EXTRUDER_STEP=PF11,  EXTRUDER_DIR=PG3,  EXTRUDER_UART=PC6,\n\n\n\nZ_ZERO_EN=PF1,  Z_ZERO_STEP=PC13,  Z_ZERO_DIR=PF0,  Z_ZERO_UART=PE4,\n\nZ_ONE_EN=PD4,  Z_ONE_STEP=PE2,  Z_ONE_DIR=PE3,  Z_ONE_UART=PE1,\n\nZ_TWO_EN=PE0,  Z_TWO_STEP=PE6,  Z_TWO_DIR=PA14, Z_TWO_UART=PD3,\n\n\n\nHEATER_BED=PA3, HEATER_HE=PA2, HEATER_LED=PB10,\n\nTEMP_BED=PF3, TEMP_HE=PF4, TEMP_CHM=PF5,\n\nBAY_1=PD12, BEDFAN=PA8, NMFAN=PE5, BUZZ=PD15,\n\nENDSTOP_Z=PG10,  ENDSTOP_X=PG6,  ENDSTOP_Y=PG9, PROBE=PG13, BTTFS=PG14, RGBLED=PB0'}, 'stepper_z': {'endstop_pin': 'probe:z_virtual_endstop', 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'enable_pin': '!Z_ZERO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200', 'position_max': '200', 'position_min': '-10', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'probe': {'pin': 'nhk:gpio10', 'z_offset': '7.180', 'x_offset': '0', 'y_offset': '19.75', 'speed': '8.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.0075', 'samples_tolerance_retries': '3'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '120', 'retries': '3', 'retry_tolerance': '0.0075', 'horizontal_move_z': '10'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '8', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'probe_count': '5,5', 'zero_reference_position': '150, 150', 'algorithm': 'bicubic', 'fade_start': '0.6', 'fade_end': '10', 'fade_target': '0'}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': '3', 'color_order': 'RGBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'stepper_x': {'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'enable_pin': '!B_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true', 'endstop_pin': 'nhk:gpio12'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'enable_pin': '!A_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'ENDSTOP_Y', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'enable_pin': '!Z_ONE_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'enable_pin': '!Z_TWO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00'}, 'output_pin act_led': {'pin': '!nhk:gpio8'}, 'adxl345': {'cs_pin': 'nhk:gpio21', 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_mosi_pin': 'nhk:gpio20', 'spi_software_miso_pin': 'nhk:gpio19'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n155, 155, 20'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor Nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'sensor_pin': 'nhk:gpio26', 'pullup_resistor': '2200', 'min_temp': '0', 'max_temp': '100'}, 'filament_motion_sensor filament_sensor': {'detection_length': '14', 'extruder': 'extruder', 'switch_pin': '^BTTFS', 'pause_on_runout': 'True', 'insert_gcode': '\nNozzle_ON', 'runout_gcode': '\nBEEP_ERROR\nPAUSE'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_OFF': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_ON': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1'}, 'gcode_macro _AIR_FILTER_VARIABLES': {'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1', 'gcode': ''}, 'gcode_macro RESET_AIR_FILTER': {'description': 'Resets the air-filter replacement timer', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }'}, 'gcode_macro QUERY_AIR_FILTER': {'description': 'Displays the amount of time the air filter has run since it was last reset.', 'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }'}, 'delayed_gcode _AIR_FILTER_TIMER': {'initial_duration': '1', 'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1"}, 'delayed_gcode _AIR_FILTER_FLUSH_TIMER': {'initial_duration': '300', 'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300"}, 'gcode_macro HEATSOAKER': {'description': 'HeatSoak for an Hour', 'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999'}, 'gcode_macro BEEP': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}'}, 'gcode_macro BEEP_SUCCESS': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000'}, 'gcode_macro BEEP_ERROR': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100'}, 'gcode_macro CG28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CHOME': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CENTER_ACCURACY': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY'}, 'gcode_macro Lights_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro Lights_ON': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25'}, 'gcode_macro PID_HOTEND': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260'}, 'gcode_macro PID_BED': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110'}, 'gcode_macro MANUAL_FLOW_CALIBRATION': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'delayed_gcode HEATSOAK_DELAY': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}'}, 'gcode_macro HEATSOAK_TIMER': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}'}, 'gcode_macro PARK_FRONT': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT'}, 'gcode_macro PARK_FRONT_LOW': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW'}, 'gcode_macro PARK_REAR': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR'}, 'gcode_macro PARK_CENTER': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER'}, 'gcode_macro PARK_BED': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED'}, 'gcode_macro FORCE_BED_DOWN': {'description': 'Force move bed down without homing', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_UP': {'description': 'Force move bed down without homing.', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_LOCK': {'description': 'Active Z steppers to lock down the bed, Without Homing', 'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90'}, 'gcode_macro FORCE_BED_UNLOCK': {'description': 'Unlocks the Bed', 'gcode': '\nM84'}, 'delayed_gcode FILTER_AIR_STOP': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}'}, 'gcode_macro PRIME_BLOB': {'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.', 'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state'}, 'gcode_macro RINGING_TOWER': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_MZV': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_EI': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro PRIMING': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107'}, 'gcode_macro CLEAN': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro Z_TILT_ADJUST': {'rename_existing': '_Z_TILT_ADJUST', 'description': '', 'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro Smart_Park': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'exclude_object': {}, 'skew_correction': {}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '10000', 'max_z_velocity': '15', 'max_z_accel': '50', 'square_corner_velocity': '5.0'}, 'input_shaper': {'shaper_freq_x': '58.8', 'shaper_type_x': 'zv', 'shaper_freq_y': '43.4', 'shaper_type_y': 'mzv'}, 'bed_mesh default': {'version': '1', 'points': '\n0.048750, 0.068750, 0.040000, 0.078750, 0.070000\n0.050000, 0.067500, 0.053750, 0.063750, 0.090000\n0.006250, 0.036250, 0.000000, 0.045000, 0.075000\n0.021250, 0.082500, 0.071250, 0.081250, 0.098750\n-0.025000, 0.068750, 0.046250, 0.088750, 0.078750', 'tension': '0.2', 'min_x': '40.0', 'algo': 'bicubic', 'y_count': '5', 'mesh_y_pps': '2', 'min_y': '40.0', 'x_count': '5', 'max_y': '260.0', 'mesh_x_pps': '2', 'max_x': '260.0'}, 'skew_correction my_skew_profile': {'xy_skew': '-0.000802972249612', 'xz_skew': '0.0', 'yz_skew': '0.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': '\\\\'}, 'gcode_macro cancel_print': {'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}', 'rename_existing': 'BASE_PAUSE', 'description': 'Pauses Print'}, 'gcode_macro resume': {'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'rename_existing': 'BASE_RESUME', 'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro polylite_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026', 'description': 'G-Code macro'}, 'gcode_macro polylite_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro sparta_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325', 'description': 'G-Code macro'}, 'gcode_macro sparta_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300', 'description': 'G-Code macro'}, 'gcode_macro sparta_purple': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_abs': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polylite_yellow_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro filament_reset': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro abs_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_reset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro clean_filament_cold_pull': {'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0', 'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince'}, 'gcode_macro manual_clean': {'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0', 'description': 'Grab a Brush ready, Start Scrubbing!'}, 'gcode_macro load_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro load_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro polyterra_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031', 'description': 'G-Code macro'}, 'gcode_macro polyterra_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro polyterra_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550', 'description': 'G-Code macro'}, 'gcode_macro polyterra_candy': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035', 'description': 'G-Code macro'}, 'gcode_macro polyterra_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polyterra_blue': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445', 'description': 'G-Code macro'}, 'gcode_macro polyterra_lav': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054', 'description': 'G-Code macro'}, 'gcode_macro ziro_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252', 'description': 'G-Code macro'}, 'gcode_macro jessie_tan': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029', 'description': 'G-Code macro'}, 'gcode_macro sunlu_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER', 'description': 'Run standard input shaper test for all axes'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS', 'description': 'Run custom demi-axe test to analyze belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400', 'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations'}, 'gcode_macro xybelt_tension': {'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }', 'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': 300.0, 'verbose': True}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_BED', 'min_temp': -20.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.5, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 33.946, 'pid_ki': 0.997, 'pid_kd': 288.961, 'heater_pin': 'HEATER_BED', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'tmc2209 extruder': {'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.1, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'PT1000', 'pullup_resistor': 2200.0, 'sensor_pin': 'nhk:gpio29', 'min_temp': 10.0, 'max_temp': 280.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.239, 'pid_ki': 1.965, 'pid_kd': 87.574, 'heater_pin': 'nhk:gpio9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'nhk:gpio23', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!nhk:gpio24', 'rotation_distance': 47.088, 'full_steps_per_rotation': 200, 'gear_ratio': [[9.0, 1.0]], 'enable_pin': '!nhk:gpio25'}, 'firmware_retraction': {'retract_length': 0.5, 'retract_speed': 30.0, 'unretract_extra_length': 0.0, 'unretract_speed': 30.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'nhk:gpio5', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'nhk:gpio6'}, 'output_pin caselight': {'pwm': True, 'pin': 'HEATER_LED', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.15, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_CHM', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'temperature_sensor pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'heater_fan vent': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BAY_1', 'fan_speed': 0.4}, 'fan_generic boombox': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'NMFAN'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BEDFAN'}, 'output_pin beeper': {'pwm': True, 'pin': 'BUZZ', 'cycle_time': 0.0005, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['B_MOTOR_EN', 'PF14'], ['B_MOTOR_STEP', 'PF13'], ['B_MOTOR_DIR', 'PF12'], ['B_MOTOR_UART', 'PC4'], ['A_MOTOR_EN', 'PF15'], ['A_MOTOR_STEP', 'PG0'], ['A_MOTOR_DIR', 'PG1'], ['A_MOTOR_UART', 'PD11'], ['EXTRUDER_EN', 'PG5'], ['EXTRUDER_STEP', 'PF11'], ['EXTRUDER_DIR', 'PG3'], ['EXTRUDER_UART', 'PC6'], ['Z_ZERO_EN', 'PF1'], ['Z_ZERO_STEP', 'PC13'], ['Z_ZERO_DIR', 'PF0'], ['Z_ZERO_UART', 'PE4'], ['Z_ONE_EN', 'PD4'], ['Z_ONE_STEP', 'PE2'], ['Z_ONE_DIR', 'PE3'], ['Z_ONE_UART', 'PE1'], ['Z_TWO_EN', 'PE0'], ['Z_TWO_STEP', 'PE6'], ['Z_TWO_DIR', 'PA14'], ['Z_TWO_UART', 'PD3'], ['HEATER_BED', 'PA3'], ['HEATER_HE', 'PA2'], ['HEATER_LED', 'PB10'], ['TEMP_BED', 'PF3'], ['TEMP_HE', 'PF4'], ['TEMP_CHM', 'PF5'], ['BAY_1', 'PD12'], ['BEDFAN', 'PA8'], ['NMFAN', 'PE5'], ['BUZZ', 'PD15'], ['ENDSTOP_Z', 'PG10'], ['ENDSTOP_X', 'PG6'], ['ENDSTOP_Y', 'PG9'], ['PROBE', 'PG13'], ['BTTFS', 'PG14'], ['RGBLED', 'PB0']]}, 'probe': {'z_offset': 7.18, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'nhk:gpio10', 'speed': 8.0, 'lift_speed': 8.0, 'x_offset': 0.0, 'y_offset': 19.75, 'samples': 3, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.0075, 'samples_tolerance_retries': 3}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 3, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 120.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [150.0, 150.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 8.0, 'speed': 150.0, 'fade_start': 0.6, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.04875, 0.06875, 0.04, 0.07875, 0.07], [0.05, 0.0675, 0.05375, 0.06375, 0.09], [0.00625, 0.03625, 0.0, 0.045, 0.075], [0.02125, 0.0825, 0.07125, 0.08125, 0.09875], [-0.025, 0.06875, 0.04625, 0.08875, 0.07875]], 'min_x': 40.0, 'max_x': 260.0, 'min_y': 40.0, 'max_y': 260.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': 3, 'color_order': ['RGBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!B_MOTOR_EN', 'endstop_pin': 'nhk:gpio12', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!A_MOTOR_EN', 'endstop_pin': 'ENDSTOP_Y', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ZERO_EN', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 200.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ONE_EN'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_TWO_EN'}, 'output_pin act_led': {'pwm': False, 'pin': '!nhk:gpio8', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'nhk:gpio21', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_miso_pin': 'nhk:gpio19', 'spi_software_mosi_pin': 'nhk:gpio20'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[155.0, 155.0, 20.0]], 'accel_chip': 'adxl345'}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'pullup_resistor': 2200.0, 'inline_resistor': 0.0, 'sensor_pin': 'nhk:gpio26', 'min_temp': 0.0, 'max_temp': 100.0}, 'filament_motion_sensor filament_sensor': {'switch_pin': '^BTTFS', 'extruder': 'extruder', 'detection_length': 14.0, 'pause_on_runout': True, 'runout_gcode': '\nBEEP_ERROR\nPAUSE', 'insert_gcode': '\nNozzle_ON', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro fs_off': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro fs_on': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro _air_filter_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1'}, 'gcode_macro reset_air_filter': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }', 'description': 'Resets the air-filter replacement timer'}, 'gcode_macro query_air_filter': {'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }', 'description': 'Displays the amount of time the air filter has run since it was last reset.'}, 'delayed_gcode _air_filter_timer': {'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1", 'initial_duration': 1.0}, 'delayed_gcode _air_filter_flush_timer': {'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300", 'initial_duration': 300.0}, 'gcode_macro heatsoaker': {'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999', 'description': 'HeatSoak for an Hour'}, 'gcode_macro beep': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro beep_success': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000', 'description': 'G-Code macro'}, 'gcode_macro beep_error': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100', 'description': 'G-Code macro'}, 'gcode_macro cg28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro chome': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro center_accuracy': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro lights_on': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25', 'description': 'G-Code macro'}, 'gcode_macro pid_hotend': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260', 'description': 'G-Code macro'}, 'gcode_macro pid_bed': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110', 'description': 'G-Code macro'}, 'gcode_macro manual_flow_calibration': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'delayed_gcode heatsoak_delay': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro heatsoak_timer': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}', 'description': 'G-Code macro'}, 'gcode_macro park_front': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT', 'description': 'G-Code macro'}, 'gcode_macro park_front_low': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW', 'description': 'G-Code macro'}, 'gcode_macro park_rear': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR', 'description': 'G-Code macro'}, 'gcode_macro park_center': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER', 'description': 'G-Code macro'}, 'gcode_macro park_bed': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED', 'description': 'G-Code macro'}, 'gcode_macro force_bed_down': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing'}, 'gcode_macro force_bed_up': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing.'}, 'gcode_macro force_bed_lock': {'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90', 'description': 'Active Z steppers to lock down the bed, Without Homing'}, 'gcode_macro force_bed_unlock': {'gcode': '\nM84', 'description': 'Unlocks the Bed'}, 'delayed_gcode filter_air_stop': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro print_end': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro prime_blob': {'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state', 'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.'}, 'gcode_macro ringing_tower': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_mzv': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_ei': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro priming': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000', 'description': 'G-Code macro'}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount'}, 'gcode_macro z_tilt_adjust': {'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0', 'rename_existing': '_Z_TILT_ADJUST', 'description': ''}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'skew_correction my_skew_profile': {'xy_skew': -0.000802972249612, 'xz_skew': 0.0, 'yz_skew': 0.0}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'zv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 58.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 43.4}, 'printer': {'max_velocity': 300.0, 'max_accel': 10000.0, 'max_accel_to_decel': 5000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 50.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-07 22:51:21,261 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 22:51:21,263 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-07 22:51:21,263 [printer.py:reinit()] - # Extruders: 1
2024-02-07 22:51:21,263 [printer.py:reinit()] - # Temperature devices: 5
2024-02-07 22:51:21,263 [printer.py:reinit()] - # Fans: 5
2024-02-07 22:51:21,263 [printer.py:reinit()] - # Output pins: 3
2024-02-07 22:51:21,263 [printer.py:reinit()] - # Leds: 1
2024-02-07 22:51:21,275 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-07 22:51:21,277 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-07 22:51:21,567 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor Pi&temperature_sensor Octopus&temperature_sensor Nitehawk&fan&fan_generic BoomBox&fan_generic BedFans&heater_fan hotend_fan&heater_fan Vent&filament_motion_sensor filament_sensor&output_pin caselight&output_pin beeper&output_pin act_led&neopixel sb_leds
2024-02-07 22:51:21,571 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-07 22:51:21,571 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-07 22:51:21,572 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-07 22:51:21,573 [screen.py:init_klipper()] - Printer initialized
2024-02-07 22:51:21,573 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-07 22:51:21,573 [printer.py:change_state()] - Adding callback for state: ready
2024-02-07 22:51:21,576 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-07 22:51:21,649 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-07 22:51:21,667 [main_menu.py:add_device()] - Adding device: extruder
2024-02-07 22:51:21,674 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-07 22:51:21,679 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-07 22:51:21,679 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-07 22:51:21,679 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-07 22:51:21,679 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-07 22:51:21,702 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-07 22:51:21,708 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-07 22:51:21,717 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor Pi', 'temperature_sensor Octopus', 'temperature_sensor Nitehawk', 'extruder']
2024-02-07 22:51:21,724 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-07 22:51:21,724 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-07 22:51:27,866 [screen.py:_load_panel()] - Loading panel: move
2024-02-07 22:51:27,964 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-07 22:51:28,522 [screen.py:_load_panel()] - Loading panel: menu
2024-02-07 22:51:28,611 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-07 22:51:28,631 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-07 22:51:30,518 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-02-07 22:53:06,601 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-02-07 22:53:27,490 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-07 22:53:27,490 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-07 22:53:27,490 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-07 22:53:27,491 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 22:53:27,496 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-07 22:53:27,496 [screen.py:show_panel()] - Reinitializing panel
2024-02-07 22:53:27,561 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-07 22:53:31,020 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-07 22:53:31,026 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-07 22:53:31,027 [printer.py:configure_cameras()] - Cameras: []
2024-02-07 22:53:31,027 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-07 22:53:31,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-07 22:53:31,056 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-07 22:53:31,060 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_prefix': '\\\\'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pauses Print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'gcode_macro POLYLITE_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026'}, 'gcode_macro POLYLITE_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro SPARTA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325'}, 'gcode_macro SPARTA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300'}, 'gcode_macro SPARTA_PURPLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro POLYLITE_BLACK_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510'}, 'gcode_macro POLYLITE_BLACK_ABS': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYLITE_YELLOW_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro FILAMENT_RESET': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro ABS_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0'}, 'gcode_macro PRINT_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0'}, 'gcode_macro PRINT_RESET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0'}, 'gcode_macro Clean_Filament_Cold_Pull': {'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince', 'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0'}, 'gcode_macro Manual_Clean': {'description': 'Grab a Brush ready, Start Scrubbing!', 'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0'}, 'gcode_macro LOAD_FILAMENT_PLA': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro LOAD_FILAMENT_ABS': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_PLA': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_ABS': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro POLYTERRA_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031'}, 'gcode_macro POLYTERRA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro POLYTERRA_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550'}, 'gcode_macro POLYTERRA_CANDY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035'}, 'gcode_macro POLYTERRA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYTERRA_BLUE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445'}, 'gcode_macro POLYTERRA_LAV': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054'}, 'gcode_macro ZIRO_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252'}, 'gcode_macro JESSIE_TAN': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029'}, 'gcode_macro SUNLU_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066'}, 'gcode_macro M600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Run standard input shaper test for all axes', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Run custom demi-axe test to analyze belts on CoreXY printers', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations', 'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400'}, 'gcode_macro XYBelt_Tension': {'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115', 'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': '300.0', 'verbose': 'True'}, 'heater_bed': {'pwm_cycle_time': '0.0166', 'heater_pin': 'HEATER_BED', 'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_BED', 'max_power': '0.5', 'min_temp': '-20', 'max_temp': '120', 'control': 'pid', 'pid_kp': '33.946', 'pid_ki': '0.997', 'pid_kd': '288.961'}, 'extruder': {'step_pin': 'nhk:gpio23', 'dir_pin': '!nhk:gpio24', 'enable_pin': '!nhk:gpio25', 'rotation_distance': '47.088', 'gear_ratio': '9:1', 'microsteps': '16', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'nhk:gpio9', 'sensor_pin': 'nhk:gpio29', 'pullup_resistor': '2200', 'sensor_type': 'PT1000', 'min_temp': '10', 'max_temp': '280', 'max_power': '1.0', 'min_extrude_temp': '10', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'control': 'pid', 'pid_kp': '26.239', 'pid_ki': '1.965', 'pid_kd': '87.574'}, 'tmc2209 extruder': {'stealthchop_threshold': '0', 'run_current': '0.6', 'interpolate': 'false', 'sense_resistor': '0.100', 'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1'}, 'firmware_retraction': {'retract_length': '0.5', 'retract_speed': '30', 'unretract_speed': '30'}, 'heater_fan hotend_fan': {'pin': 'nhk:gpio5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'nhk:gpio6', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.010'}, 'output_pin caselight': {'pin': 'HEATER_LED', 'pwm': 'true', 'cycle_time': '0.01', 'value': '0.15'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_CHM', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'temperature_sensor Pi': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'heater_fan Vent': {'pin': 'BAY_1', 'max_power': '1', 'kick_start_time': '0.5', 'shutdown_speed': '0', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '0.40', 'cycle_time': '0.008'}, 'fan_generic BoomBox': {'pin': 'NMFAN', 'shutdown_speed': '0.0', 'hardware_pwm': 'False', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.008'}, 'fan_generic BedFans': {'pin': 'BEDFAN', 'kick_start_time': '0.5', 'cycle_time': '0.008'}, 'output_pin beeper': {'pin': 'BUZZ', 'value': '0', 'shutdown_value': '0', 'pwm': 'True', 'cycle_time': '0.0005'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00'}, 'board_pins': {'aliases': '\n\n\nB_MOTOR_EN=PF14,  B_MOTOR_STEP=PF13,  B_MOTOR_DIR=PF12,  B_MOTOR_UART=PC4,\n\nA_MOTOR_EN=PF15,  A_MOTOR_STEP=PG0,  A_MOTOR_DIR=PG1,  A_MOTOR_UART=PD11,\n\nEXTRUDER_EN=PG5,  EXTRUDER_STEP=PF11,  EXTRUDER_DIR=PG3,  EXTRUDER_UART=PC6,\n\n\n\nZ_ZERO_EN=PF1,  Z_ZERO_STEP=PC13,  Z_ZERO_DIR=PF0,  Z_ZERO_UART=PE4,\n\nZ_ONE_EN=PD4,  Z_ONE_STEP=PE2,  Z_ONE_DIR=PE3,  Z_ONE_UART=PE1,\n\nZ_TWO_EN=PE0,  Z_TWO_STEP=PE6,  Z_TWO_DIR=PA14, Z_TWO_UART=PD3,\n\n\n\nHEATER_BED=PA3, HEATER_HE=PA2, HEATER_LED=PB10,\n\nTEMP_BED=PF3, TEMP_HE=PF4, TEMP_CHM=PF5,\n\nBAY_1=PD12, BEDFAN=PA8, NMFAN=PE5, BUZZ=PD15,\n\nENDSTOP_Z=PG10,  ENDSTOP_X=PG6,  ENDSTOP_Y=PG9, PROBE=PG13, BTTFS=PG14, RGBLED=PB0'}, 'stepper_z': {'endstop_pin': 'probe:z_virtual_endstop', 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'enable_pin': '!Z_ZERO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200', 'position_max': '200', 'position_min': '-10', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'probe': {'pin': 'nhk:gpio10', 'z_offset': '6.530', 'x_offset': '0', 'y_offset': '19.75', 'speed': '8.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.0075', 'samples_tolerance_retries': '3'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '120', 'retries': '3', 'retry_tolerance': '0.0075', 'horizontal_move_z': '10'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '8', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'probe_count': '5,5', 'zero_reference_position': '150, 150', 'algorithm': 'bicubic', 'fade_start': '0.6', 'fade_end': '10', 'fade_target': '0'}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': '3', 'color_order': 'RGBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'stepper_x': {'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'enable_pin': '!B_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true', 'endstop_pin': 'nhk:gpio12'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'enable_pin': '!A_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'ENDSTOP_Y', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'enable_pin': '!Z_ONE_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'enable_pin': '!Z_TWO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00'}, 'output_pin act_led': {'pin': '!nhk:gpio8'}, 'adxl345': {'cs_pin': 'nhk:gpio21', 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_mosi_pin': 'nhk:gpio20', 'spi_software_miso_pin': 'nhk:gpio19'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n155, 155, 20'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor Nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'sensor_pin': 'nhk:gpio26', 'pullup_resistor': '2200', 'min_temp': '0', 'max_temp': '100'}, 'filament_motion_sensor filament_sensor': {'detection_length': '14', 'extruder': 'extruder', 'switch_pin': '^BTTFS', 'pause_on_runout': 'True', 'insert_gcode': '\nNozzle_ON', 'runout_gcode': '\nBEEP_ERROR\nPAUSE'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_OFF': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_ON': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1'}, 'gcode_macro _AIR_FILTER_VARIABLES': {'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1', 'gcode': ''}, 'gcode_macro RESET_AIR_FILTER': {'description': 'Resets the air-filter replacement timer', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }'}, 'gcode_macro QUERY_AIR_FILTER': {'description': 'Displays the amount of time the air filter has run since it was last reset.', 'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }'}, 'delayed_gcode _AIR_FILTER_TIMER': {'initial_duration': '1', 'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1"}, 'delayed_gcode _AIR_FILTER_FLUSH_TIMER': {'initial_duration': '300', 'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300"}, 'gcode_macro HEATSOAKER': {'description': 'HeatSoak for an Hour', 'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999'}, 'gcode_macro BEEP': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}'}, 'gcode_macro BEEP_SUCCESS': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000'}, 'gcode_macro BEEP_ERROR': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100'}, 'gcode_macro CG28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CHOME': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CENTER_ACCURACY': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY'}, 'gcode_macro Lights_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro Lights_ON': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25'}, 'gcode_macro PID_HOTEND': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260'}, 'gcode_macro PID_BED': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110'}, 'gcode_macro MANUAL_FLOW_CALIBRATION': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'delayed_gcode HEATSOAK_DELAY': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}'}, 'gcode_macro HEATSOAK_TIMER': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}'}, 'gcode_macro PARK_FRONT': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT'}, 'gcode_macro PARK_FRONT_LOW': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW'}, 'gcode_macro PARK_REAR': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR'}, 'gcode_macro PARK_CENTER': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER'}, 'gcode_macro PARK_BED': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED'}, 'gcode_macro FORCE_BED_DOWN': {'description': 'Force move bed down without homing', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_UP': {'description': 'Force move bed down without homing.', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_LOCK': {'description': 'Active Z steppers to lock down the bed, Without Homing', 'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90'}, 'gcode_macro FORCE_BED_UNLOCK': {'description': 'Unlocks the Bed', 'gcode': '\nM84'}, 'delayed_gcode FILTER_AIR_STOP': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}'}, 'gcode_macro PRIME_BLOB': {'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.', 'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state'}, 'gcode_macro RINGING_TOWER': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_MZV': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_EI': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro PRIMING': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107'}, 'gcode_macro CLEAN': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro Z_TILT_ADJUST': {'rename_existing': '_Z_TILT_ADJUST', 'description': '', 'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro Smart_Park': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'exclude_object': {}, 'skew_correction': {}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '10000', 'max_z_velocity': '15', 'max_z_accel': '50', 'square_corner_velocity': '5.0'}, 'input_shaper': {'shaper_freq_x': '58.8', 'shaper_type_x': 'zv', 'shaper_freq_y': '43.4', 'shaper_type_y': 'mzv'}, 'bed_mesh default': {'version': '1', 'points': '\n0.048750, 0.068750, 0.040000, 0.078750, 0.070000\n0.050000, 0.067500, 0.053750, 0.063750, 0.090000\n0.006250, 0.036250, 0.000000, 0.045000, 0.075000\n0.021250, 0.082500, 0.071250, 0.081250, 0.098750\n-0.025000, 0.068750, 0.046250, 0.088750, 0.078750', 'tension': '0.2', 'min_x': '40.0', 'algo': 'bicubic', 'y_count': '5', 'mesh_y_pps': '2', 'min_y': '40.0', 'x_count': '5', 'max_y': '260.0', 'mesh_x_pps': '2', 'max_x': '260.0'}, 'skew_correction my_skew_profile': {'xy_skew': '-0.000802972249612', 'xz_skew': '0.0', 'yz_skew': '0.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': '\\\\'}, 'gcode_macro cancel_print': {'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}', 'rename_existing': 'BASE_PAUSE', 'description': 'Pauses Print'}, 'gcode_macro resume': {'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'rename_existing': 'BASE_RESUME', 'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro polylite_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026', 'description': 'G-Code macro'}, 'gcode_macro polylite_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro sparta_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325', 'description': 'G-Code macro'}, 'gcode_macro sparta_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300', 'description': 'G-Code macro'}, 'gcode_macro sparta_purple': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_abs': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polylite_yellow_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro filament_reset': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro abs_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_reset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro clean_filament_cold_pull': {'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0', 'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince'}, 'gcode_macro manual_clean': {'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0', 'description': 'Grab a Brush ready, Start Scrubbing!'}, 'gcode_macro load_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro load_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro polyterra_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031', 'description': 'G-Code macro'}, 'gcode_macro polyterra_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro polyterra_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550', 'description': 'G-Code macro'}, 'gcode_macro polyterra_candy': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035', 'description': 'G-Code macro'}, 'gcode_macro polyterra_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polyterra_blue': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445', 'description': 'G-Code macro'}, 'gcode_macro polyterra_lav': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054', 'description': 'G-Code macro'}, 'gcode_macro ziro_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252', 'description': 'G-Code macro'}, 'gcode_macro jessie_tan': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029', 'description': 'G-Code macro'}, 'gcode_macro sunlu_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER', 'description': 'Run standard input shaper test for all axes'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS', 'description': 'Run custom demi-axe test to analyze belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400', 'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations'}, 'gcode_macro xybelt_tension': {'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }', 'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': 300.0, 'verbose': True}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_BED', 'min_temp': -20.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.5, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 33.946, 'pid_ki': 0.997, 'pid_kd': 288.961, 'heater_pin': 'HEATER_BED', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'tmc2209 extruder': {'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.1, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'PT1000', 'pullup_resistor': 2200.0, 'sensor_pin': 'nhk:gpio29', 'min_temp': 10.0, 'max_temp': 280.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.239, 'pid_ki': 1.965, 'pid_kd': 87.574, 'heater_pin': 'nhk:gpio9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'nhk:gpio23', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!nhk:gpio24', 'rotation_distance': 47.088, 'full_steps_per_rotation': 200, 'gear_ratio': [[9.0, 1.0]], 'enable_pin': '!nhk:gpio25'}, 'firmware_retraction': {'retract_length': 0.5, 'retract_speed': 30.0, 'unretract_extra_length': 0.0, 'unretract_speed': 30.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'nhk:gpio5', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'nhk:gpio6'}, 'output_pin caselight': {'pwm': True, 'pin': 'HEATER_LED', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.15, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_CHM', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'temperature_sensor pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'heater_fan vent': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BAY_1', 'fan_speed': 0.4}, 'fan_generic boombox': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'NMFAN'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BEDFAN'}, 'output_pin beeper': {'pwm': True, 'pin': 'BUZZ', 'cycle_time': 0.0005, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['B_MOTOR_EN', 'PF14'], ['B_MOTOR_STEP', 'PF13'], ['B_MOTOR_DIR', 'PF12'], ['B_MOTOR_UART', 'PC4'], ['A_MOTOR_EN', 'PF15'], ['A_MOTOR_STEP', 'PG0'], ['A_MOTOR_DIR', 'PG1'], ['A_MOTOR_UART', 'PD11'], ['EXTRUDER_EN', 'PG5'], ['EXTRUDER_STEP', 'PF11'], ['EXTRUDER_DIR', 'PG3'], ['EXTRUDER_UART', 'PC6'], ['Z_ZERO_EN', 'PF1'], ['Z_ZERO_STEP', 'PC13'], ['Z_ZERO_DIR', 'PF0'], ['Z_ZERO_UART', 'PE4'], ['Z_ONE_EN', 'PD4'], ['Z_ONE_STEP', 'PE2'], ['Z_ONE_DIR', 'PE3'], ['Z_ONE_UART', 'PE1'], ['Z_TWO_EN', 'PE0'], ['Z_TWO_STEP', 'PE6'], ['Z_TWO_DIR', 'PA14'], ['Z_TWO_UART', 'PD3'], ['HEATER_BED', 'PA3'], ['HEATER_HE', 'PA2'], ['HEATER_LED', 'PB10'], ['TEMP_BED', 'PF3'], ['TEMP_HE', 'PF4'], ['TEMP_CHM', 'PF5'], ['BAY_1', 'PD12'], ['BEDFAN', 'PA8'], ['NMFAN', 'PE5'], ['BUZZ', 'PD15'], ['ENDSTOP_Z', 'PG10'], ['ENDSTOP_X', 'PG6'], ['ENDSTOP_Y', 'PG9'], ['PROBE', 'PG13'], ['BTTFS', 'PG14'], ['RGBLED', 'PB0']]}, 'probe': {'z_offset': 6.53, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'nhk:gpio10', 'speed': 8.0, 'lift_speed': 8.0, 'x_offset': 0.0, 'y_offset': 19.75, 'samples': 3, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.0075, 'samples_tolerance_retries': 3}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 3, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 120.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [150.0, 150.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 8.0, 'speed': 150.0, 'fade_start': 0.6, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.04875, 0.06875, 0.04, 0.07875, 0.07], [0.05, 0.0675, 0.05375, 0.06375, 0.09], [0.00625, 0.03625, 0.0, 0.045, 0.075], [0.02125, 0.0825, 0.07125, 0.08125, 0.09875], [-0.025, 0.06875, 0.04625, 0.08875, 0.07875]], 'min_x': 40.0, 'max_x': 260.0, 'min_y': 40.0, 'max_y': 260.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': 3, 'color_order': ['RGBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!B_MOTOR_EN', 'endstop_pin': 'nhk:gpio12', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!A_MOTOR_EN', 'endstop_pin': 'ENDSTOP_Y', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ZERO_EN', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 200.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ONE_EN'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_TWO_EN'}, 'output_pin act_led': {'pwm': False, 'pin': '!nhk:gpio8', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'nhk:gpio21', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_miso_pin': 'nhk:gpio19', 'spi_software_mosi_pin': 'nhk:gpio20'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[155.0, 155.0, 20.0]], 'accel_chip': 'adxl345'}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'pullup_resistor': 2200.0, 'inline_resistor': 0.0, 'sensor_pin': 'nhk:gpio26', 'min_temp': 0.0, 'max_temp': 100.0}, 'filament_motion_sensor filament_sensor': {'switch_pin': '^BTTFS', 'extruder': 'extruder', 'detection_length': 14.0, 'pause_on_runout': True, 'runout_gcode': '\nBEEP_ERROR\nPAUSE', 'insert_gcode': '\nNozzle_ON', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro fs_off': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro fs_on': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro _air_filter_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1'}, 'gcode_macro reset_air_filter': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }', 'description': 'Resets the air-filter replacement timer'}, 'gcode_macro query_air_filter': {'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }', 'description': 'Displays the amount of time the air filter has run since it was last reset.'}, 'delayed_gcode _air_filter_timer': {'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1", 'initial_duration': 1.0}, 'delayed_gcode _air_filter_flush_timer': {'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300", 'initial_duration': 300.0}, 'gcode_macro heatsoaker': {'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999', 'description': 'HeatSoak for an Hour'}, 'gcode_macro beep': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro beep_success': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000', 'description': 'G-Code macro'}, 'gcode_macro beep_error': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100', 'description': 'G-Code macro'}, 'gcode_macro cg28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro chome': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro center_accuracy': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro lights_on': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25', 'description': 'G-Code macro'}, 'gcode_macro pid_hotend': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260', 'description': 'G-Code macro'}, 'gcode_macro pid_bed': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110', 'description': 'G-Code macro'}, 'gcode_macro manual_flow_calibration': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'delayed_gcode heatsoak_delay': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro heatsoak_timer': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}', 'description': 'G-Code macro'}, 'gcode_macro park_front': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT', 'description': 'G-Code macro'}, 'gcode_macro park_front_low': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW', 'description': 'G-Code macro'}, 'gcode_macro park_rear': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR', 'description': 'G-Code macro'}, 'gcode_macro park_center': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER', 'description': 'G-Code macro'}, 'gcode_macro park_bed': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED', 'description': 'G-Code macro'}, 'gcode_macro force_bed_down': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing'}, 'gcode_macro force_bed_up': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing.'}, 'gcode_macro force_bed_lock': {'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90', 'description': 'Active Z steppers to lock down the bed, Without Homing'}, 'gcode_macro force_bed_unlock': {'gcode': '\nM84', 'description': 'Unlocks the Bed'}, 'delayed_gcode filter_air_stop': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro print_end': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro prime_blob': {'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state', 'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.'}, 'gcode_macro ringing_tower': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_mzv': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_ei': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro priming': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000', 'description': 'G-Code macro'}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount'}, 'gcode_macro z_tilt_adjust': {'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0', 'rename_existing': '_Z_TILT_ADJUST', 'description': ''}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'skew_correction my_skew_profile': {'xy_skew': -0.000802972249612, 'xz_skew': 0.0, 'yz_skew': 0.0}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'zv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 58.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 43.4}, 'printer': {'max_velocity': 300.0, 'max_accel': 10000.0, 'max_accel_to_decel': 5000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 50.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-07 22:53:31,065 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 22:53:31,066 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-07 22:53:31,066 [printer.py:reinit()] - # Extruders: 1
2024-02-07 22:53:31,066 [printer.py:reinit()] - # Temperature devices: 5
2024-02-07 22:53:31,066 [printer.py:reinit()] - # Fans: 5
2024-02-07 22:53:31,067 [printer.py:reinit()] - # Output pins: 3
2024-02-07 22:53:31,067 [printer.py:reinit()] - # Leds: 1
2024-02-07 22:53:31,078 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-07 22:53:31,080 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-07 22:53:31,361 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor Pi&temperature_sensor Octopus&temperature_sensor Nitehawk&fan&fan_generic BoomBox&fan_generic BedFans&heater_fan hotend_fan&heater_fan Vent&filament_motion_sensor filament_sensor&output_pin caselight&output_pin beeper&output_pin act_led&neopixel sb_leds
2024-02-07 22:53:31,365 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-07 22:53:31,365 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-07 22:53:31,366 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-07 22:53:31,366 [screen.py:init_klipper()] - Printer initialized
2024-02-07 22:53:31,367 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-07 22:53:31,367 [printer.py:change_state()] - Adding callback for state: startup
2024-02-07 22:53:31,798 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-07 22:53:31,798 [printer.py:change_state()] - Adding callback for state: ready
2024-02-07 22:53:31,801 [screen.py:show_panel()] - Reinitializing panel
2024-02-07 22:53:31,861 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-07 22:53:31,879 [main_menu.py:add_device()] - Adding device: extruder
2024-02-07 22:53:31,883 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-07 22:53:31,887 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-07 22:53:31,887 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-07 22:53:31,887 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-07 22:53:31,888 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-07 22:53:31,912 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-07 22:53:31,918 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-07 22:53:31,927 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor Pi', 'temperature_sensor Octopus', 'temperature_sensor Nitehawk', 'extruder']
2024-02-07 22:53:31,934 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-07 22:53:31,935 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-07 22:54:40,795 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_PREP"
2024-02-07 22:54:40,838 [files.py:_callback()] - Error in getting metadata for .thumbs/flat_rectangle_ABS_7m55s-300x300.png. Retrying in 6 seconds
2024-02-07 22:54:40,839 [files.py:_callback()] - Error in getting metadata for .thumbs/flat_rectangle_ABS_7m55s-32x32.png. Retrying in 6 seconds
2024-02-07 22:54:40,983 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-07 22:54:40,983 [printer.py:change_state()] - Adding callback for state: printing
2024-02-07 22:54:40,986 [screen.py:_load_panel()] - Loading panel: job_status
2024-02-07 22:54:41,079 [job_status.py:create_status_grid()] - Titlebar items: ['']
2024-02-07 22:54:41,101 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-07 22:54:41,106 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-07 22:54:41,119 [job_status.py:update_file_metadata()] - Update Metadata. File: flat_rectangle_ABS_7m55s.gcode Size: 70344
2024-02-07 22:54:41,123 [job_status.py:show_file_thumbnail()] - flat_rectangle_ABS_7m55s.gcode
2024-02-07 22:57:13,015 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-07 22:59:07,811 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-07 22:59:07,849 [screen.py:wake_screen()] - Screen wake up
2024-02-07 22:59:08,249 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_ON"
2024-02-07 23:04:09,016 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-07 23:04:27,510 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-07 23:04:27,536 [screen.py:wake_screen()] - Screen wake up
2024-02-07 23:04:27,935 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_OFF"
2024-02-07 23:04:28,020 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-07 23:04:28,021 [printer.py:change_state()] - Adding callback for state: ready
2024-02-07 23:04:28,028 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'standby'
2024-02-07 23:05:25,222 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0x7f792781c0 (GtkDialog at 0x6e40860)>
2024-02-07 23:05:25,258 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-02-07 23:05:40,031 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-07 23:05:40,032 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-07 23:05:40,032 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-07 23:05:40,032 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 23:05:40,038 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-07 23:05:40,038 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-07 23:05:40,038 [screen.py:show_panel()] - Reinitializing panel
2024-02-07 23:05:40,103 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-07 23:05:43,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-07 23:05:43,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-07 23:05:43,028 [printer.py:configure_cameras()] - Cameras: []
2024-02-07 23:05:43,029 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-07 23:05:43,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-07 23:05:43,057 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-07 23:05:43,061 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_prefix': '\\\\'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pauses Print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'gcode_macro POLYLITE_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026'}, 'gcode_macro POLYLITE_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro SPARTA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325'}, 'gcode_macro SPARTA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300'}, 'gcode_macro SPARTA_PURPLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro POLYLITE_BLACK_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510'}, 'gcode_macro POLYLITE_BLACK_ABS': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYLITE_YELLOW_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro FILAMENT_RESET': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro ABS_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0'}, 'gcode_macro PRINT_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0'}, 'gcode_macro PRINT_RESET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0'}, 'gcode_macro Clean_Filament_Cold_Pull': {'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince', 'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0'}, 'gcode_macro Manual_Clean': {'description': 'Grab a Brush ready, Start Scrubbing!', 'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0'}, 'gcode_macro LOAD_FILAMENT_PLA': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro LOAD_FILAMENT_ABS': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_PLA': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_ABS': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro POLYTERRA_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031'}, 'gcode_macro POLYTERRA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro POLYTERRA_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550'}, 'gcode_macro POLYTERRA_CANDY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035'}, 'gcode_macro POLYTERRA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYTERRA_BLUE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445'}, 'gcode_macro POLYTERRA_LAV': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054'}, 'gcode_macro ZIRO_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252'}, 'gcode_macro JESSIE_TAN': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029'}, 'gcode_macro SUNLU_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066'}, 'gcode_macro M600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Run standard input shaper test for all axes', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Run custom demi-axe test to analyze belts on CoreXY printers', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations', 'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400'}, 'gcode_macro XYBelt_Tension': {'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115', 'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': '300.0', 'verbose': 'True'}, 'heater_bed': {'pwm_cycle_time': '0.0166', 'heater_pin': 'HEATER_BED', 'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_BED', 'max_power': '0.5', 'min_temp': '-20', 'max_temp': '120', 'control': 'pid', 'pid_kp': '33.946', 'pid_ki': '0.997', 'pid_kd': '288.961'}, 'extruder': {'step_pin': 'nhk:gpio23', 'dir_pin': '!nhk:gpio24', 'enable_pin': '!nhk:gpio25', 'rotation_distance': '47.088', 'gear_ratio': '9:1', 'microsteps': '16', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'nhk:gpio9', 'sensor_pin': 'nhk:gpio29', 'pullup_resistor': '2200', 'sensor_type': 'PT1000', 'min_temp': '10', 'max_temp': '280', 'max_power': '1.0', 'min_extrude_temp': '10', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'control': 'pid', 'pid_kp': '26.239', 'pid_ki': '1.965', 'pid_kd': '87.574'}, 'tmc2209 extruder': {'stealthchop_threshold': '0', 'run_current': '0.6', 'interpolate': 'false', 'sense_resistor': '0.100', 'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1'}, 'firmware_retraction': {'retract_length': '0.5', 'retract_speed': '30', 'unretract_speed': '30'}, 'heater_fan hotend_fan': {'pin': 'nhk:gpio5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'nhk:gpio6', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.010'}, 'output_pin caselight': {'pin': 'HEATER_LED', 'pwm': 'true', 'cycle_time': '0.01', 'value': '0.15'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_CHM', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'temperature_sensor Pi': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'heater_fan Vent': {'pin': 'BAY_1', 'max_power': '1', 'kick_start_time': '0.5', 'shutdown_speed': '0', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '0.40', 'cycle_time': '0.008'}, 'fan_generic BoomBox': {'pin': 'NMFAN', 'shutdown_speed': '0.0', 'hardware_pwm': 'False', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.008'}, 'fan_generic BedFans': {'pin': 'BEDFAN', 'kick_start_time': '0.5', 'cycle_time': '0.008'}, 'output_pin beeper': {'pin': 'BUZZ', 'value': '0', 'shutdown_value': '0', 'pwm': 'True', 'cycle_time': '0.0005'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00'}, 'board_pins': {'aliases': '\n\n\nB_MOTOR_EN=PF14,  B_MOTOR_STEP=PF13,  B_MOTOR_DIR=PF12,  B_MOTOR_UART=PC4,\n\nA_MOTOR_EN=PF15,  A_MOTOR_STEP=PG0,  A_MOTOR_DIR=PG1,  A_MOTOR_UART=PD11,\n\nEXTRUDER_EN=PG5,  EXTRUDER_STEP=PF11,  EXTRUDER_DIR=PG3,  EXTRUDER_UART=PC6,\n\n\n\nZ_ZERO_EN=PF1,  Z_ZERO_STEP=PC13,  Z_ZERO_DIR=PF0,  Z_ZERO_UART=PE4,\n\nZ_ONE_EN=PD4,  Z_ONE_STEP=PE2,  Z_ONE_DIR=PE3,  Z_ONE_UART=PE1,\n\nZ_TWO_EN=PE0,  Z_TWO_STEP=PE6,  Z_TWO_DIR=PA14, Z_TWO_UART=PD3,\n\n\n\nHEATER_BED=PA3, HEATER_HE=PA2, HEATER_LED=PB10,\n\nTEMP_BED=PF3, TEMP_HE=PF4, TEMP_CHM=PF5,\n\nBAY_1=PD12, BEDFAN=PA8, NMFAN=PE5, BUZZ=PD15,\n\nENDSTOP_Z=PG10,  ENDSTOP_X=PG6,  ENDSTOP_Y=PG9, PROBE=PG13, BTTFS=PG14, RGBLED=PB0'}, 'stepper_z': {'endstop_pin': 'probe:z_virtual_endstop', 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'enable_pin': '!Z_ZERO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200', 'position_max': '200', 'position_min': '-10', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'probe': {'pin': 'nhk:gpio10', 'z_offset': '6.445', 'x_offset': '0', 'y_offset': '19.75', 'speed': '8.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.0075', 'samples_tolerance_retries': '3'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '120', 'retries': '3', 'retry_tolerance': '0.0075', 'horizontal_move_z': '10'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '8', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'probe_count': '5,5', 'zero_reference_position': '150, 150', 'algorithm': 'bicubic', 'fade_start': '0.6', 'fade_end': '10', 'fade_target': '0'}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': '3', 'color_order': 'RGBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'stepper_x': {'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'enable_pin': '!B_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true', 'endstop_pin': 'nhk:gpio12'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'enable_pin': '!A_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'ENDSTOP_Y', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'enable_pin': '!Z_ONE_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'enable_pin': '!Z_TWO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00'}, 'output_pin act_led': {'pin': '!nhk:gpio8'}, 'adxl345': {'cs_pin': 'nhk:gpio21', 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_mosi_pin': 'nhk:gpio20', 'spi_software_miso_pin': 'nhk:gpio19'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n155, 155, 20'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor Nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'sensor_pin': 'nhk:gpio26', 'pullup_resistor': '2200', 'min_temp': '0', 'max_temp': '100'}, 'filament_motion_sensor filament_sensor': {'detection_length': '14', 'extruder': 'extruder', 'switch_pin': '^BTTFS', 'pause_on_runout': 'True', 'insert_gcode': '\nNozzle_ON', 'runout_gcode': '\nBEEP_ERROR\nPAUSE'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_OFF': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_ON': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1'}, 'gcode_macro _AIR_FILTER_VARIABLES': {'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1', 'gcode': ''}, 'gcode_macro RESET_AIR_FILTER': {'description': 'Resets the air-filter replacement timer', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }'}, 'gcode_macro QUERY_AIR_FILTER': {'description': 'Displays the amount of time the air filter has run since it was last reset.', 'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }'}, 'delayed_gcode _AIR_FILTER_TIMER': {'initial_duration': '1', 'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1"}, 'delayed_gcode _AIR_FILTER_FLUSH_TIMER': {'initial_duration': '300', 'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300"}, 'gcode_macro HEATSOAKER': {'description': 'HeatSoak for an Hour', 'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999'}, 'gcode_macro BEEP': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}'}, 'gcode_macro BEEP_SUCCESS': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000'}, 'gcode_macro BEEP_ERROR': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100'}, 'gcode_macro CG28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CHOME': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CENTER_ACCURACY': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY'}, 'gcode_macro Lights_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro Lights_ON': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25'}, 'gcode_macro PID_HOTEND': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260'}, 'gcode_macro PID_BED': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110'}, 'gcode_macro MANUAL_FLOW_CALIBRATION': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'delayed_gcode HEATSOAK_DELAY': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}'}, 'gcode_macro HEATSOAK_TIMER': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}'}, 'gcode_macro PARK_FRONT': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT'}, 'gcode_macro PARK_FRONT_LOW': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW'}, 'gcode_macro PARK_REAR': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR'}, 'gcode_macro PARK_CENTER': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER'}, 'gcode_macro PARK_BED': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED'}, 'gcode_macro FORCE_BED_DOWN': {'description': 'Force move bed down without homing', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_UP': {'description': 'Force move bed down without homing.', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_LOCK': {'description': 'Active Z steppers to lock down the bed, Without Homing', 'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90'}, 'gcode_macro FORCE_BED_UNLOCK': {'description': 'Unlocks the Bed', 'gcode': '\nM84'}, 'delayed_gcode FILTER_AIR_STOP': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}'}, 'gcode_macro PRIME_BLOB': {'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.', 'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state'}, 'gcode_macro RINGING_TOWER': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_MZV': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_EI': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro PRIMING': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107'}, 'gcode_macro CLEAN': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro Z_TILT_ADJUST': {'rename_existing': '_Z_TILT_ADJUST', 'description': '', 'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro Smart_Park': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'exclude_object': {}, 'skew_correction': {}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '10000', 'max_z_velocity': '15', 'max_z_accel': '50', 'square_corner_velocity': '5.0'}, 'input_shaper': {'shaper_freq_x': '58.8', 'shaper_type_x': 'zv', 'shaper_freq_y': '43.4', 'shaper_type_y': 'mzv'}, 'bed_mesh default': {'version': '1', 'points': '\n0.048750, 0.068750, 0.040000, 0.078750, 0.070000\n0.050000, 0.067500, 0.053750, 0.063750, 0.090000\n0.006250, 0.036250, 0.000000, 0.045000, 0.075000\n0.021250, 0.082500, 0.071250, 0.081250, 0.098750\n-0.025000, 0.068750, 0.046250, 0.088750, 0.078750', 'tension': '0.2', 'min_x': '40.0', 'algo': 'bicubic', 'y_count': '5', 'mesh_y_pps': '2', 'min_y': '40.0', 'x_count': '5', 'max_y': '260.0', 'mesh_x_pps': '2', 'max_x': '260.0'}, 'skew_correction my_skew_profile': {'xy_skew': '-0.000802972249612', 'xz_skew': '0.0', 'yz_skew': '0.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': '\\\\'}, 'gcode_macro cancel_print': {'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}', 'rename_existing': 'BASE_PAUSE', 'description': 'Pauses Print'}, 'gcode_macro resume': {'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'rename_existing': 'BASE_RESUME', 'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro polylite_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026', 'description': 'G-Code macro'}, 'gcode_macro polylite_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro sparta_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325', 'description': 'G-Code macro'}, 'gcode_macro sparta_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300', 'description': 'G-Code macro'}, 'gcode_macro sparta_purple': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_abs': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polylite_yellow_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro filament_reset': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro abs_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_reset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro clean_filament_cold_pull': {'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0', 'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince'}, 'gcode_macro manual_clean': {'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0', 'description': 'Grab a Brush ready, Start Scrubbing!'}, 'gcode_macro load_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro load_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro polyterra_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031', 'description': 'G-Code macro'}, 'gcode_macro polyterra_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro polyterra_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550', 'description': 'G-Code macro'}, 'gcode_macro polyterra_candy': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035', 'description': 'G-Code macro'}, 'gcode_macro polyterra_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polyterra_blue': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445', 'description': 'G-Code macro'}, 'gcode_macro polyterra_lav': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054', 'description': 'G-Code macro'}, 'gcode_macro ziro_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252', 'description': 'G-Code macro'}, 'gcode_macro jessie_tan': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029', 'description': 'G-Code macro'}, 'gcode_macro sunlu_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER', 'description': 'Run standard input shaper test for all axes'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS', 'description': 'Run custom demi-axe test to analyze belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400', 'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations'}, 'gcode_macro xybelt_tension': {'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }', 'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': 300.0, 'verbose': True}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_BED', 'min_temp': -20.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.5, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 33.946, 'pid_ki': 0.997, 'pid_kd': 288.961, 'heater_pin': 'HEATER_BED', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'tmc2209 extruder': {'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.1, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'PT1000', 'pullup_resistor': 2200.0, 'sensor_pin': 'nhk:gpio29', 'min_temp': 10.0, 'max_temp': 280.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.239, 'pid_ki': 1.965, 'pid_kd': 87.574, 'heater_pin': 'nhk:gpio9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'nhk:gpio23', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!nhk:gpio24', 'rotation_distance': 47.088, 'full_steps_per_rotation': 200, 'gear_ratio': [[9.0, 1.0]], 'enable_pin': '!nhk:gpio25'}, 'firmware_retraction': {'retract_length': 0.5, 'retract_speed': 30.0, 'unretract_extra_length': 0.0, 'unretract_speed': 30.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'nhk:gpio5', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'nhk:gpio6'}, 'output_pin caselight': {'pwm': True, 'pin': 'HEATER_LED', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.15, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_CHM', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'temperature_sensor pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'heater_fan vent': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BAY_1', 'fan_speed': 0.4}, 'fan_generic boombox': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'NMFAN'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BEDFAN'}, 'output_pin beeper': {'pwm': True, 'pin': 'BUZZ', 'cycle_time': 0.0005, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['B_MOTOR_EN', 'PF14'], ['B_MOTOR_STEP', 'PF13'], ['B_MOTOR_DIR', 'PF12'], ['B_MOTOR_UART', 'PC4'], ['A_MOTOR_EN', 'PF15'], ['A_MOTOR_STEP', 'PG0'], ['A_MOTOR_DIR', 'PG1'], ['A_MOTOR_UART', 'PD11'], ['EXTRUDER_EN', 'PG5'], ['EXTRUDER_STEP', 'PF11'], ['EXTRUDER_DIR', 'PG3'], ['EXTRUDER_UART', 'PC6'], ['Z_ZERO_EN', 'PF1'], ['Z_ZERO_STEP', 'PC13'], ['Z_ZERO_DIR', 'PF0'], ['Z_ZERO_UART', 'PE4'], ['Z_ONE_EN', 'PD4'], ['Z_ONE_STEP', 'PE2'], ['Z_ONE_DIR', 'PE3'], ['Z_ONE_UART', 'PE1'], ['Z_TWO_EN', 'PE0'], ['Z_TWO_STEP', 'PE6'], ['Z_TWO_DIR', 'PA14'], ['Z_TWO_UART', 'PD3'], ['HEATER_BED', 'PA3'], ['HEATER_HE', 'PA2'], ['HEATER_LED', 'PB10'], ['TEMP_BED', 'PF3'], ['TEMP_HE', 'PF4'], ['TEMP_CHM', 'PF5'], ['BAY_1', 'PD12'], ['BEDFAN', 'PA8'], ['NMFAN', 'PE5'], ['BUZZ', 'PD15'], ['ENDSTOP_Z', 'PG10'], ['ENDSTOP_X', 'PG6'], ['ENDSTOP_Y', 'PG9'], ['PROBE', 'PG13'], ['BTTFS', 'PG14'], ['RGBLED', 'PB0']]}, 'probe': {'z_offset': 6.445, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'nhk:gpio10', 'speed': 8.0, 'lift_speed': 8.0, 'x_offset': 0.0, 'y_offset': 19.75, 'samples': 3, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.0075, 'samples_tolerance_retries': 3}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 3, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 120.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [150.0, 150.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 8.0, 'speed': 150.0, 'fade_start': 0.6, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.04875, 0.06875, 0.04, 0.07875, 0.07], [0.05, 0.0675, 0.05375, 0.06375, 0.09], [0.00625, 0.03625, 0.0, 0.045, 0.075], [0.02125, 0.0825, 0.07125, 0.08125, 0.09875], [-0.025, 0.06875, 0.04625, 0.08875, 0.07875]], 'min_x': 40.0, 'max_x': 260.0, 'min_y': 40.0, 'max_y': 260.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': 3, 'color_order': ['RGBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!B_MOTOR_EN', 'endstop_pin': 'nhk:gpio12', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!A_MOTOR_EN', 'endstop_pin': 'ENDSTOP_Y', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ZERO_EN', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 200.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ONE_EN'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_TWO_EN'}, 'output_pin act_led': {'pwm': False, 'pin': '!nhk:gpio8', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'nhk:gpio21', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_miso_pin': 'nhk:gpio19', 'spi_software_mosi_pin': 'nhk:gpio20'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[155.0, 155.0, 20.0]], 'accel_chip': 'adxl345'}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'pullup_resistor': 2200.0, 'inline_resistor': 0.0, 'sensor_pin': 'nhk:gpio26', 'min_temp': 0.0, 'max_temp': 100.0}, 'filament_motion_sensor filament_sensor': {'switch_pin': '^BTTFS', 'extruder': 'extruder', 'detection_length': 14.0, 'pause_on_runout': True, 'runout_gcode': '\nBEEP_ERROR\nPAUSE', 'insert_gcode': '\nNozzle_ON', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro fs_off': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro fs_on': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro _air_filter_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1'}, 'gcode_macro reset_air_filter': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }', 'description': 'Resets the air-filter replacement timer'}, 'gcode_macro query_air_filter': {'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }', 'description': 'Displays the amount of time the air filter has run since it was last reset.'}, 'delayed_gcode _air_filter_timer': {'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1", 'initial_duration': 1.0}, 'delayed_gcode _air_filter_flush_timer': {'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300", 'initial_duration': 300.0}, 'gcode_macro heatsoaker': {'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999', 'description': 'HeatSoak for an Hour'}, 'gcode_macro beep': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro beep_success': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000', 'description': 'G-Code macro'}, 'gcode_macro beep_error': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100', 'description': 'G-Code macro'}, 'gcode_macro cg28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro chome': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro center_accuracy': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro lights_on': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25', 'description': 'G-Code macro'}, 'gcode_macro pid_hotend': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260', 'description': 'G-Code macro'}, 'gcode_macro pid_bed': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110', 'description': 'G-Code macro'}, 'gcode_macro manual_flow_calibration': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'delayed_gcode heatsoak_delay': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro heatsoak_timer': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}', 'description': 'G-Code macro'}, 'gcode_macro park_front': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT', 'description': 'G-Code macro'}, 'gcode_macro park_front_low': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW', 'description': 'G-Code macro'}, 'gcode_macro park_rear': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR', 'description': 'G-Code macro'}, 'gcode_macro park_center': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER', 'description': 'G-Code macro'}, 'gcode_macro park_bed': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED', 'description': 'G-Code macro'}, 'gcode_macro force_bed_down': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing'}, 'gcode_macro force_bed_up': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing.'}, 'gcode_macro force_bed_lock': {'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90', 'description': 'Active Z steppers to lock down the bed, Without Homing'}, 'gcode_macro force_bed_unlock': {'gcode': '\nM84', 'description': 'Unlocks the Bed'}, 'delayed_gcode filter_air_stop': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro print_end': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro prime_blob': {'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state', 'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.'}, 'gcode_macro ringing_tower': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_mzv': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_ei': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro priming': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000', 'description': 'G-Code macro'}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount'}, 'gcode_macro z_tilt_adjust': {'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0', 'rename_existing': '_Z_TILT_ADJUST', 'description': ''}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'skew_correction my_skew_profile': {'xy_skew': -0.000802972249612, 'xz_skew': 0.0, 'yz_skew': 0.0}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'zv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 58.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 43.4}, 'printer': {'max_velocity': 300.0, 'max_accel': 10000.0, 'max_accel_to_decel': 5000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 50.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-07 23:05:43,066 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 23:05:43,067 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-07 23:05:43,067 [printer.py:reinit()] - # Extruders: 1
2024-02-07 23:05:43,068 [printer.py:reinit()] - # Temperature devices: 5
2024-02-07 23:05:43,068 [printer.py:reinit()] - # Fans: 5
2024-02-07 23:05:43,068 [printer.py:reinit()] - # Output pins: 3
2024-02-07 23:05:43,068 [printer.py:reinit()] - # Leds: 1
2024-02-07 23:05:43,077 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-07 23:05:43,079 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-07 23:05:43,362 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor Pi&temperature_sensor Octopus&temperature_sensor Nitehawk&fan&fan_generic BoomBox&fan_generic BedFans&heater_fan hotend_fan&heater_fan Vent&filament_motion_sensor filament_sensor&output_pin caselight&output_pin beeper&output_pin act_led&neopixel sb_leds
2024-02-07 23:05:43,366 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-07 23:05:43,366 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-07 23:05:43,367 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-07 23:05:43,367 [screen.py:init_klipper()] - Printer initialized
2024-02-07 23:05:43,368 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-07 23:05:43,368 [printer.py:change_state()] - Adding callback for state: startup
2024-02-07 23:05:44,294 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-07 23:05:44,294 [printer.py:change_state()] - Adding callback for state: ready
2024-02-07 23:05:44,296 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-07 23:05:44,296 [screen.py:show_panel()] - Reinitializing panel
2024-02-07 23:05:44,357 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-07 23:05:44,374 [main_menu.py:add_device()] - Adding device: extruder
2024-02-07 23:05:44,378 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-07 23:05:44,382 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-07 23:05:44,382 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-07 23:05:44,383 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-07 23:05:44,383 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-07 23:05:44,406 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-07 23:05:44,420 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-07 23:05:44,426 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor Pi', 'temperature_sensor Octopus', 'temperature_sensor Nitehawk', 'extruder']
2024-02-07 23:05:44,433 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-07 23:05:44,434 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-07 23:09:28,017 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-07 23:11:52,551 [files.py:_callback()] - Error in getting metadata for .thumbs/flowrate_0_ABS_25m56s-300x300.png. Retrying in 6 seconds
2024-02-07 23:11:52,552 [files.py:_callback()] - Error in getting metadata for .thumbs/flowrate_0_ABS_25m56s-32x32.png. Retrying in 6 seconds
2024-02-07 23:11:52,554 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-07 23:11:52,580 [screen.py:wake_screen()] - Screen wake up
2024-02-07 23:11:52,976 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_PREP"
2024-02-07 23:11:53,036 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-07 23:11:53,037 [printer.py:change_state()] - Adding callback for state: printing
2024-02-07 23:11:53,039 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-07 23:11:53,040 [screen.py:show_panel()] - Reinitializing panel
2024-02-07 23:11:53,107 [job_status.py:create_status_grid()] - Titlebar items: ['']
2024-02-07 23:11:53,131 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-07 23:11:53,136 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-07 23:11:53,146 [job_status.py:update_file_metadata()] - Update Metadata. File: flowrate_0_ABS_25m56s.gcode Size: 515430
2024-02-07 23:11:53,152 [job_status.py:show_file_thumbnail()] - flowrate_0_ABS_25m56s.gcode
2024-02-07 23:16:53,022 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-07 23:17:43,418 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-07 23:17:43,451 [screen.py:wake_screen()] - Screen wake up
2024-02-07 23:17:43,851 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_ON"
2024-02-07 23:22:44,015 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-07 23:45:39,136 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-07 23:45:39,176 [screen.py:wake_screen()] - Screen wake up
2024-02-07 23:45:39,576 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_OFF"
2024-02-07 23:45:42,568 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-07 23:45:42,568 [printer.py:change_state()] - Adding callback for state: ready
2024-02-07 23:45:42,576 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-02-07 23:50:40,015 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-07 23:56:37,204 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'standby'
2024-02-07 23:57:40,601 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-07 23:57:40,601 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-07 23:57:40,603 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-07 23:57:40,604 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 23:57:40,604 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-07 23:57:40,653 [screen.py:wake_screen()] - Screen wake up
2024-02-07 23:57:41,058 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-07 23:57:41,058 [screen.py:show_panel()] - Reinitializing panel
2024-02-07 23:57:41,126 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-07 23:57:44,020 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-07 23:57:44,026 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-07 23:57:44,026 [printer.py:configure_cameras()] - Cameras: []
2024-02-07 23:57:44,026 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-07 23:57:44,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-07 23:57:44,228 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-07 23:57:44,229 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-07 23:57:44,230 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 23:57:44,230 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-07 23:57:44,230 [printer.py:reinit()] - # Extruders: 0
2024-02-07 23:57:44,230 [printer.py:reinit()] - # Temperature devices: 0
2024-02-07 23:57:44,230 [printer.py:reinit()] - # Fans: 0
2024-02-07 23:57:44,230 [printer.py:reinit()] - # Output pins: 0
2024-02-07 23:57:44,231 [printer.py:reinit()] - # Leds: 0
2024-02-07 23:57:44,237 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-07 23:57:44,238 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-07 23:57:44,481 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-02-07 23:57:44,481 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-07 23:57:44,482 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-07 23:57:44,482 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-07 23:57:44,482 [screen.py:init_klipper()] - Printer initialized
2024-02-07 23:57:44,482 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-02-07 23:57:44,483 [printer.py:change_state()] - Adding callback for state: error
2024-02-07 23:57:44,485 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-07 23:57:44,485 [screen.py:show_panel()] - Reinitializing panel
2024-02-07 23:57:44,516 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-07 23:57:55,663 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-02-07 23:57:55,664 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-07 23:57:55,668 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-07 23:57:55,668 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 23:57:55,673 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-07 23:57:55,673 [screen.py:show_panel()] - Reinitializing panel
2024-02-07 23:57:55,742 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-07 23:57:59,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-07 23:57:59,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-07 23:57:59,028 [printer.py:configure_cameras()] - Cameras: []
2024-02-07 23:57:59,028 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-07 23:57:59,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-07 23:57:59,281 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-07 23:57:59,282 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-07 23:57:59,282 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 23:57:59,282 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-07 23:57:59,282 [printer.py:reinit()] - # Extruders: 0
2024-02-07 23:57:59,282 [printer.py:reinit()] - # Temperature devices: 0
2024-02-07 23:57:59,282 [printer.py:reinit()] - # Fans: 0
2024-02-07 23:57:59,282 [printer.py:reinit()] - # Output pins: 0
2024-02-07 23:57:59,282 [printer.py:reinit()] - # Leds: 0
2024-02-07 23:57:59,291 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-07 23:57:59,292 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-07 23:57:59,534 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-02-07 23:57:59,535 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-07 23:57:59,535 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-07 23:57:59,536 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-07 23:57:59,536 [screen.py:init_klipper()] - Printer initialized
2024-02-07 23:57:59,537 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-02-07 23:57:59,537 [printer.py:change_state()] - Adding callback for state: error
2024-02-07 23:57:59,539 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-07 23:57:59,539 [screen.py:show_panel()] - Reinitializing panel
2024-02-07 23:57:59,570 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-07 23:58:29,285 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-02-07 23:58:29,285 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-07 23:58:29,286 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-07 23:58:29,286 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 23:58:29,291 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-07 23:58:29,291 [screen.py:show_panel()] - Reinitializing panel
2024-02-07 23:58:29,379 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-07 23:58:33,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-07 23:58:33,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-07 23:58:33,028 [printer.py:configure_cameras()] - Cameras: []
2024-02-07 23:58:33,028 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-07 23:58:33,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-07 23:58:33,058 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-07 23:58:33,061 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_prefix': '\\\\'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pauses Print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'gcode_macro POLYLITE_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026'}, 'gcode_macro POLYLITE_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro SPARTA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325'}, 'gcode_macro SPARTA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300'}, 'gcode_macro SPARTA_PURPLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro POLYLITE_BLACK_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510'}, 'gcode_macro POLYLITE_BLACK_ABS': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYLITE_YELLOW_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro FILAMENT_RESET': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro ABS_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0'}, 'gcode_macro PRINT_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0'}, 'gcode_macro PRINT_RESET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0'}, 'gcode_macro Clean_Filament_Cold_Pull': {'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince', 'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0'}, 'gcode_macro Manual_Clean': {'description': 'Grab a Brush ready, Start Scrubbing!', 'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0'}, 'gcode_macro LOAD_FILAMENT_PLA': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro LOAD_FILAMENT_ABS': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_PLA': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_ABS': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro POLYTERRA_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031'}, 'gcode_macro POLYTERRA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro POLYTERRA_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550'}, 'gcode_macro POLYTERRA_CANDY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035'}, 'gcode_macro POLYTERRA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYTERRA_BLUE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445'}, 'gcode_macro POLYTERRA_LAV': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054'}, 'gcode_macro ZIRO_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252'}, 'gcode_macro JESSIE_TAN': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029'}, 'gcode_macro SUNLU_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066'}, 'gcode_macro M600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Run standard input shaper test for all axes', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Run custom demi-axe test to analyze belts on CoreXY printers', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations', 'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400'}, 'gcode_macro XYBelt_Tension': {'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115', 'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': '300.0', 'verbose': 'True'}, 'heater_bed': {'pwm_cycle_time': '0.0166', 'heater_pin': 'HEATER_BED', 'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_BED', 'max_power': '0.5', 'min_temp': '-20', 'max_temp': '120', 'control': 'pid', 'pid_kp': '33.946', 'pid_ki': '0.997', 'pid_kd': '288.961'}, 'extruder': {'step_pin': 'nhk:gpio23', 'dir_pin': '!nhk:gpio24', 'enable_pin': '!nhk:gpio25', 'rotation_distance': '47.088', 'gear_ratio': '9:1', 'microsteps': '16', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'nhk:gpio9', 'sensor_pin': 'nhk:gpio29', 'pullup_resistor': '2200', 'sensor_type': 'PT1000', 'min_temp': '10', 'max_temp': '280', 'max_power': '1.0', 'min_extrude_temp': '10', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'control': 'pid', 'pid_kp': '26.239', 'pid_ki': '1.965', 'pid_kd': '87.574'}, 'tmc2209 extruder': {'stealthchop_threshold': '0', 'run_current': '0.6', 'interpolate': 'false', 'sense_resistor': '0.100', 'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1'}, 'firmware_retraction': {'retract_length': '0.5', 'retract_speed': '30', 'unretract_speed': '30'}, 'heater_fan hotend_fan': {'pin': 'nhk:gpio5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'nhk:gpio6', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.010'}, 'output_pin caselight': {'pin': 'HEATER_LED', 'pwm': 'true', 'cycle_time': '0.01', 'value': '0.15'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_CHM', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'temperature_sensor Pi': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'heater_fan Vent': {'pin': 'BAY_1', 'max_power': '1', 'kick_start_time': '0.5', 'shutdown_speed': '0', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '0.40', 'cycle_time': '0.008'}, 'fan_generic BoomBox': {'pin': 'NMFAN', 'shutdown_speed': '0.0', 'hardware_pwm': 'False', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.008'}, 'fan_generic BedFans': {'pin': 'BEDFAN', 'kick_start_time': '0.5', 'cycle_time': '0.008'}, 'output_pin beeper': {'pin': 'BUZZ', 'value': '0', 'shutdown_value': '0', 'pwm': 'True', 'cycle_time': '0.0005'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00'}, 'board_pins': {'aliases': '\n\n\nB_MOTOR_EN=PF14,  B_MOTOR_STEP=PF13,  B_MOTOR_DIR=PF12,  B_MOTOR_UART=PC4,\n\nA_MOTOR_EN=PF15,  A_MOTOR_STEP=PG0,  A_MOTOR_DIR=PG1,  A_MOTOR_UART=PD11,\n\nEXTRUDER_EN=PG5,  EXTRUDER_STEP=PF11,  EXTRUDER_DIR=PG3,  EXTRUDER_UART=PC6,\n\n\n\nZ_ZERO_EN=PF1,  Z_ZERO_STEP=PC13,  Z_ZERO_DIR=PF0,  Z_ZERO_UART=PE4,\n\nZ_ONE_EN=PD4,  Z_ONE_STEP=PE2,  Z_ONE_DIR=PE3,  Z_ONE_UART=PE1,\n\nZ_TWO_EN=PE0,  Z_TWO_STEP=PE6,  Z_TWO_DIR=PA14, Z_TWO_UART=PD3,\n\n\n\nHEATER_BED=PA3, HEATER_HE=PA2, HEATER_LED=PB10,\n\nTEMP_BED=PF3, TEMP_HE=PF4, TEMP_CHM=PF5,\n\nBAY_1=PD12, BEDFAN=PA8, NMFAN=PE5, BUZZ=PD15,\n\nENDSTOP_Z=PG10,  ENDSTOP_X=PG6,  ENDSTOP_Y=PG9, PROBE=PG13, BTTFS=PG14, RGBLED=PB0'}, 'stepper_z': {'endstop_pin': 'probe:z_virtual_endstop', 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'enable_pin': '!Z_ZERO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200', 'position_max': '200', 'position_min': '-10', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'probe': {'pin': 'nhk:gpio10', 'z_offset': '6.445', 'x_offset': '0', 'y_offset': '19.75', 'speed': '8.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.0075', 'samples_tolerance_retries': '3'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '120', 'retries': '3', 'retry_tolerance': '0.0075', 'horizontal_move_z': '10'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '8', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'probe_count': '5,5', 'zero_reference_position': '150, 150', 'algorithm': 'bicubic', 'fade_start': '0.6', 'fade_end': '10', 'fade_target': '0'}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': '3', 'color_order': 'RGBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'stepper_x': {'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'enable_pin': '!B_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true', 'endstop_pin': 'nhk:gpio12'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'enable_pin': '!A_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'ENDSTOP_Y', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'enable_pin': '!Z_ONE_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'enable_pin': '!Z_TWO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00'}, 'output_pin act_led': {'pin': '!nhk:gpio8'}, 'adxl345': {'cs_pin': 'nhk:gpio21', 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_mosi_pin': 'nhk:gpio20', 'spi_software_miso_pin': 'nhk:gpio19'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n155, 155, 20'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor Nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'sensor_pin': 'nhk:gpio26', 'pullup_resistor': '2200', 'min_temp': '0', 'max_temp': '100'}, 'filament_motion_sensor filament_sensor': {'detection_length': '14', 'extruder': 'extruder', 'switch_pin': '^BTTFS', 'pause_on_runout': 'True', 'insert_gcode': '\nNozzle_ON', 'runout_gcode': '\nBEEP_ERROR\nPAUSE'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_OFF': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_ON': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1'}, 'gcode_macro _AIR_FILTER_VARIABLES': {'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1', 'gcode': ''}, 'gcode_macro RESET_AIR_FILTER': {'description': 'Resets the air-filter replacement timer', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }'}, 'gcode_macro QUERY_AIR_FILTER': {'description': 'Displays the amount of time the air filter has run since it was last reset.', 'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }'}, 'delayed_gcode _AIR_FILTER_TIMER': {'initial_duration': '1', 'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1"}, 'delayed_gcode _AIR_FILTER_FLUSH_TIMER': {'initial_duration': '300', 'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300"}, 'gcode_macro HEATSOAKER': {'description': 'HeatSoak for an Hour', 'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999'}, 'gcode_macro BEEP': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}'}, 'gcode_macro BEEP_SUCCESS': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000'}, 'gcode_macro BEEP_ERROR': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100'}, 'gcode_macro CG28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CHOME': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CENTER_ACCURACY': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY'}, 'gcode_macro Lights_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro Lights_ON': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25'}, 'gcode_macro PID_HOTEND': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260'}, 'gcode_macro PID_BED': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110'}, 'gcode_macro MANUAL_FLOW_CALIBRATION': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'delayed_gcode HEATSOAK_DELAY': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}'}, 'gcode_macro HEATSOAK_TIMER': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}'}, 'gcode_macro PARK_FRONT': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT'}, 'gcode_macro PARK_FRONT_LOW': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW'}, 'gcode_macro PARK_REAR': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR'}, 'gcode_macro PARK_CENTER': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER'}, 'gcode_macro PARK_BED': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED'}, 'gcode_macro FORCE_BED_DOWN': {'description': 'Force move bed down without homing', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_UP': {'description': 'Force move bed down without homing.', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_LOCK': {'description': 'Active Z steppers to lock down the bed, Without Homing', 'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90'}, 'gcode_macro FORCE_BED_UNLOCK': {'description': 'Unlocks the Bed', 'gcode': '\nM84'}, 'delayed_gcode FILTER_AIR_STOP': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}'}, 'gcode_macro PRIME_BLOB': {'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.', 'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state'}, 'gcode_macro RINGING_TOWER': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_MZV': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_EI': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro PRIMING': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107'}, 'gcode_macro CLEAN': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro Z_TILT_ADJUST': {'rename_existing': '_Z_TILT_ADJUST', 'description': '', 'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro Smart_Park': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'exclude_object': {}, 'skew_correction': {}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '10000', 'max_z_velocity': '15', 'max_z_accel': '50', 'square_corner_velocity': '5.0'}, 'input_shaper': {'shaper_freq_x': '58.8', 'shaper_type_x': 'zv', 'shaper_freq_y': '43.4', 'shaper_type_y': 'mzv'}, 'bed_mesh default': {'version': '1', 'points': '\n0.048750, 0.068750, 0.040000, 0.078750, 0.070000\n0.050000, 0.067500, 0.053750, 0.063750, 0.090000\n0.006250, 0.036250, 0.000000, 0.045000, 0.075000\n0.021250, 0.082500, 0.071250, 0.081250, 0.098750\n-0.025000, 0.068750, 0.046250, 0.088750, 0.078750', 'tension': '0.2', 'min_x': '40.0', 'algo': 'bicubic', 'y_count': '5', 'mesh_y_pps': '2', 'min_y': '40.0', 'x_count': '5', 'max_y': '260.0', 'mesh_x_pps': '2', 'max_x': '260.0'}, 'skew_correction my_skew_profile': {'xy_skew': '-0.000802972249612', 'xz_skew': '0.0', 'yz_skew': '0.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': '\\\\'}, 'gcode_macro cancel_print': {'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}', 'rename_existing': 'BASE_PAUSE', 'description': 'Pauses Print'}, 'gcode_macro resume': {'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'rename_existing': 'BASE_RESUME', 'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro polylite_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026', 'description': 'G-Code macro'}, 'gcode_macro polylite_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro sparta_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325', 'description': 'G-Code macro'}, 'gcode_macro sparta_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300', 'description': 'G-Code macro'}, 'gcode_macro sparta_purple': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_abs': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polylite_yellow_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro filament_reset': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro abs_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_reset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro clean_filament_cold_pull': {'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0', 'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince'}, 'gcode_macro manual_clean': {'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0', 'description': 'Grab a Brush ready, Start Scrubbing!'}, 'gcode_macro load_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro load_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro polyterra_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031', 'description': 'G-Code macro'}, 'gcode_macro polyterra_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro polyterra_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550', 'description': 'G-Code macro'}, 'gcode_macro polyterra_candy': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035', 'description': 'G-Code macro'}, 'gcode_macro polyterra_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polyterra_blue': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445', 'description': 'G-Code macro'}, 'gcode_macro polyterra_lav': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054', 'description': 'G-Code macro'}, 'gcode_macro ziro_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252', 'description': 'G-Code macro'}, 'gcode_macro jessie_tan': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029', 'description': 'G-Code macro'}, 'gcode_macro sunlu_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER', 'description': 'Run standard input shaper test for all axes'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS', 'description': 'Run custom demi-axe test to analyze belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400', 'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations'}, 'gcode_macro xybelt_tension': {'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }', 'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': 300.0, 'verbose': True}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_BED', 'min_temp': -20.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.5, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 33.946, 'pid_ki': 0.997, 'pid_kd': 288.961, 'heater_pin': 'HEATER_BED', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'tmc2209 extruder': {'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.1, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'PT1000', 'pullup_resistor': 2200.0, 'sensor_pin': 'nhk:gpio29', 'min_temp': 10.0, 'max_temp': 280.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.239, 'pid_ki': 1.965, 'pid_kd': 87.574, 'heater_pin': 'nhk:gpio9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'nhk:gpio23', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!nhk:gpio24', 'rotation_distance': 47.088, 'full_steps_per_rotation': 200, 'gear_ratio': [[9.0, 1.0]], 'enable_pin': '!nhk:gpio25'}, 'firmware_retraction': {'retract_length': 0.5, 'retract_speed': 30.0, 'unretract_extra_length': 0.0, 'unretract_speed': 30.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'nhk:gpio5', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'nhk:gpio6'}, 'output_pin caselight': {'pwm': True, 'pin': 'HEATER_LED', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.15, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_CHM', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'temperature_sensor pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'heater_fan vent': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BAY_1', 'fan_speed': 0.4}, 'fan_generic boombox': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'NMFAN'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BEDFAN'}, 'output_pin beeper': {'pwm': True, 'pin': 'BUZZ', 'cycle_time': 0.0005, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['B_MOTOR_EN', 'PF14'], ['B_MOTOR_STEP', 'PF13'], ['B_MOTOR_DIR', 'PF12'], ['B_MOTOR_UART', 'PC4'], ['A_MOTOR_EN', 'PF15'], ['A_MOTOR_STEP', 'PG0'], ['A_MOTOR_DIR', 'PG1'], ['A_MOTOR_UART', 'PD11'], ['EXTRUDER_EN', 'PG5'], ['EXTRUDER_STEP', 'PF11'], ['EXTRUDER_DIR', 'PG3'], ['EXTRUDER_UART', 'PC6'], ['Z_ZERO_EN', 'PF1'], ['Z_ZERO_STEP', 'PC13'], ['Z_ZERO_DIR', 'PF0'], ['Z_ZERO_UART', 'PE4'], ['Z_ONE_EN', 'PD4'], ['Z_ONE_STEP', 'PE2'], ['Z_ONE_DIR', 'PE3'], ['Z_ONE_UART', 'PE1'], ['Z_TWO_EN', 'PE0'], ['Z_TWO_STEP', 'PE6'], ['Z_TWO_DIR', 'PA14'], ['Z_TWO_UART', 'PD3'], ['HEATER_BED', 'PA3'], ['HEATER_HE', 'PA2'], ['HEATER_LED', 'PB10'], ['TEMP_BED', 'PF3'], ['TEMP_HE', 'PF4'], ['TEMP_CHM', 'PF5'], ['BAY_1', 'PD12'], ['BEDFAN', 'PA8'], ['NMFAN', 'PE5'], ['BUZZ', 'PD15'], ['ENDSTOP_Z', 'PG10'], ['ENDSTOP_X', 'PG6'], ['ENDSTOP_Y', 'PG9'], ['PROBE', 'PG13'], ['BTTFS', 'PG14'], ['RGBLED', 'PB0']]}, 'probe': {'z_offset': 6.445, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'nhk:gpio10', 'speed': 8.0, 'lift_speed': 8.0, 'x_offset': 0.0, 'y_offset': 19.75, 'samples': 3, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.0075, 'samples_tolerance_retries': 3}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 3, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 120.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [150.0, 150.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 8.0, 'speed': 150.0, 'fade_start': 0.6, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.04875, 0.06875, 0.04, 0.07875, 0.07], [0.05, 0.0675, 0.05375, 0.06375, 0.09], [0.00625, 0.03625, 0.0, 0.045, 0.075], [0.02125, 0.0825, 0.07125, 0.08125, 0.09875], [-0.025, 0.06875, 0.04625, 0.08875, 0.07875]], 'min_x': 40.0, 'max_x': 260.0, 'min_y': 40.0, 'max_y': 260.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': 3, 'color_order': ['RGBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!B_MOTOR_EN', 'endstop_pin': 'nhk:gpio12', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!A_MOTOR_EN', 'endstop_pin': 'ENDSTOP_Y', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ZERO_EN', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 200.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ONE_EN'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_TWO_EN'}, 'output_pin act_led': {'pwm': False, 'pin': '!nhk:gpio8', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'nhk:gpio21', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_miso_pin': 'nhk:gpio19', 'spi_software_mosi_pin': 'nhk:gpio20'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[155.0, 155.0, 20.0]], 'accel_chip': 'adxl345'}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'pullup_resistor': 2200.0, 'inline_resistor': 0.0, 'sensor_pin': 'nhk:gpio26', 'min_temp': 0.0, 'max_temp': 100.0}, 'filament_motion_sensor filament_sensor': {'switch_pin': '^BTTFS', 'extruder': 'extruder', 'detection_length': 14.0, 'pause_on_runout': True, 'runout_gcode': '\nBEEP_ERROR\nPAUSE', 'insert_gcode': '\nNozzle_ON', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro fs_off': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro fs_on': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro _air_filter_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1'}, 'gcode_macro reset_air_filter': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }', 'description': 'Resets the air-filter replacement timer'}, 'gcode_macro query_air_filter': {'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }', 'description': 'Displays the amount of time the air filter has run since it was last reset.'}, 'delayed_gcode _air_filter_timer': {'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1", 'initial_duration': 1.0}, 'delayed_gcode _air_filter_flush_timer': {'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300", 'initial_duration': 300.0}, 'gcode_macro heatsoaker': {'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999', 'description': 'HeatSoak for an Hour'}, 'gcode_macro beep': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro beep_success': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000', 'description': 'G-Code macro'}, 'gcode_macro beep_error': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100', 'description': 'G-Code macro'}, 'gcode_macro cg28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro chome': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro center_accuracy': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro lights_on': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25', 'description': 'G-Code macro'}, 'gcode_macro pid_hotend': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260', 'description': 'G-Code macro'}, 'gcode_macro pid_bed': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110', 'description': 'G-Code macro'}, 'gcode_macro manual_flow_calibration': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'delayed_gcode heatsoak_delay': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro heatsoak_timer': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}', 'description': 'G-Code macro'}, 'gcode_macro park_front': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT', 'description': 'G-Code macro'}, 'gcode_macro park_front_low': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW', 'description': 'G-Code macro'}, 'gcode_macro park_rear': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR', 'description': 'G-Code macro'}, 'gcode_macro park_center': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER', 'description': 'G-Code macro'}, 'gcode_macro park_bed': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED', 'description': 'G-Code macro'}, 'gcode_macro force_bed_down': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing'}, 'gcode_macro force_bed_up': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing.'}, 'gcode_macro force_bed_lock': {'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90', 'description': 'Active Z steppers to lock down the bed, Without Homing'}, 'gcode_macro force_bed_unlock': {'gcode': '\nM84', 'description': 'Unlocks the Bed'}, 'delayed_gcode filter_air_stop': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro print_end': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro prime_blob': {'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state', 'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.'}, 'gcode_macro ringing_tower': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_mzv': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_ei': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro priming': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000', 'description': 'G-Code macro'}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount'}, 'gcode_macro z_tilt_adjust': {'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0', 'rename_existing': '_Z_TILT_ADJUST', 'description': ''}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'skew_correction my_skew_profile': {'xy_skew': -0.000802972249612, 'xz_skew': 0.0, 'yz_skew': 0.0}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'zv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 58.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 43.4}, 'printer': {'max_velocity': 300.0, 'max_accel': 10000.0, 'max_accel_to_decel': 5000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 50.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-07 23:58:33,066 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 23:58:33,067 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-07 23:58:33,067 [printer.py:reinit()] - # Extruders: 1
2024-02-07 23:58:33,067 [printer.py:reinit()] - # Temperature devices: 5
2024-02-07 23:58:33,067 [printer.py:reinit()] - # Fans: 5
2024-02-07 23:58:33,067 [printer.py:reinit()] - # Output pins: 3
2024-02-07 23:58:33,067 [printer.py:reinit()] - # Leds: 1
2024-02-07 23:58:33,078 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-07 23:58:33,080 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-07 23:58:33,364 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor Pi&temperature_sensor Octopus&temperature_sensor Nitehawk&fan&fan_generic BoomBox&fan_generic BedFans&heater_fan hotend_fan&heater_fan Vent&filament_motion_sensor filament_sensor&output_pin caselight&output_pin beeper&output_pin act_led&neopixel sb_leds
2024-02-07 23:58:33,367 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-07 23:58:33,368 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-07 23:58:33,368 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-07 23:58:33,368 [screen.py:init_klipper()] - Printer initialized
2024-02-07 23:58:33,369 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-07 23:58:33,369 [printer.py:change_state()] - Adding callback for state: startup
2024-02-07 23:58:33,542 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-07 23:58:33,542 [printer.py:change_state()] - Adding callback for state: ready
2024-02-07 23:58:33,544 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-07 23:58:33,544 [screen.py:show_panel()] - Reinitializing panel
2024-02-07 23:58:33,606 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-07 23:58:33,626 [main_menu.py:add_device()] - Adding device: extruder
2024-02-07 23:58:33,630 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-07 23:58:33,634 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-07 23:58:33,634 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-07 23:58:33,634 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-07 23:58:33,634 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-07 23:58:33,658 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-07 23:58:33,675 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-07 23:58:33,679 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor Pi', 'temperature_sensor Octopus', 'temperature_sensor Nitehawk', 'extruder']
2024-02-07 23:58:33,685 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-07 23:58:33,686 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-07 23:58:44,694 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-07 23:58:44,695 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-07 23:58:44,695 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-07 23:58:44,695 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 23:58:44,701 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-07 23:58:44,702 [screen.py:show_panel()] - Reinitializing panel
2024-02-07 23:58:44,778 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-07 23:58:48,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-07 23:58:48,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-07 23:58:48,027 [printer.py:configure_cameras()] - Cameras: []
2024-02-07 23:58:48,027 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-07 23:58:48,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-07 23:58:48,232 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-07 23:58:48,233 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-07 23:58:48,234 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 23:58:48,234 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-07 23:58:48,234 [printer.py:reinit()] - # Extruders: 0
2024-02-07 23:58:48,234 [printer.py:reinit()] - # Temperature devices: 0
2024-02-07 23:58:48,234 [printer.py:reinit()] - # Fans: 0
2024-02-07 23:58:48,234 [printer.py:reinit()] - # Output pins: 0
2024-02-07 23:58:48,235 [printer.py:reinit()] - # Leds: 0
2024-02-07 23:58:48,241 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-07 23:58:48,242 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-07 23:58:48,486 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-02-07 23:58:48,486 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-07 23:58:48,486 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-07 23:58:48,487 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-07 23:58:48,487 [screen.py:init_klipper()] - Printer initialized
2024-02-07 23:58:48,487 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-02-07 23:58:48,487 [printer.py:change_state()] - Adding callback for state: error
2024-02-07 23:58:48,488 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-07 23:58:48,488 [screen.py:show_panel()] - Reinitializing panel
2024-02-07 23:58:48,520 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-07 23:59:14,586 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-02-07 23:59:14,586 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-07 23:59:14,587 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-07 23:59:14,587 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 23:59:14,589 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-07 23:59:14,590 [screen.py:show_panel()] - Reinitializing panel
2024-02-07 23:59:14,658 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-07 23:59:18,020 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-07 23:59:18,026 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-07 23:59:18,027 [printer.py:configure_cameras()] - Cameras: []
2024-02-07 23:59:18,027 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-07 23:59:18,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-07 23:59:18,057 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-07 23:59:18,060 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_prefix': '\\\\'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pauses Print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'gcode_macro POLYLITE_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026'}, 'gcode_macro POLYLITE_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro SPARTA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325'}, 'gcode_macro SPARTA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300'}, 'gcode_macro SPARTA_PURPLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro POLYLITE_BLACK_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510'}, 'gcode_macro POLYLITE_BLACK_ABS': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYLITE_YELLOW_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro FILAMENT_RESET': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro ABS_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0'}, 'gcode_macro PRINT_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0'}, 'gcode_macro PRINT_RESET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0'}, 'gcode_macro Clean_Filament_Cold_Pull': {'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince', 'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0'}, 'gcode_macro Manual_Clean': {'description': 'Grab a Brush ready, Start Scrubbing!', 'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0'}, 'gcode_macro LOAD_FILAMENT_PLA': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro LOAD_FILAMENT_ABS': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_PLA': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_ABS': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro POLYTERRA_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031'}, 'gcode_macro POLYTERRA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro POLYTERRA_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550'}, 'gcode_macro POLYTERRA_CANDY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035'}, 'gcode_macro POLYTERRA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYTERRA_BLUE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445'}, 'gcode_macro POLYTERRA_LAV': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054'}, 'gcode_macro ZIRO_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252'}, 'gcode_macro JESSIE_TAN': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029'}, 'gcode_macro SUNLU_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066'}, 'gcode_macro M600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Run standard input shaper test for all axes', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Run custom demi-axe test to analyze belts on CoreXY printers', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations', 'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400'}, 'gcode_macro XYBelt_Tension': {'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115', 'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': '300.0', 'verbose': 'True'}, 'heater_bed': {'pwm_cycle_time': '0.0166', 'heater_pin': 'HEATER_BED', 'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_BED', 'max_power': '0.5', 'min_temp': '-20', 'max_temp': '120', 'control': 'pid', 'pid_kp': '33.946', 'pid_ki': '0.997', 'pid_kd': '288.961'}, 'extruder': {'step_pin': 'nhk:gpio23', 'dir_pin': '!nhk:gpio24', 'enable_pin': '!nhk:gpio25', 'rotation_distance': '47.088', 'gear_ratio': '9:1', 'microsteps': '16', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'nhk:gpio9', 'sensor_pin': 'nhk:gpio29', 'pullup_resistor': '2200', 'sensor_type': 'PT1000', 'min_temp': '10', 'max_temp': '280', 'max_power': '1.0', 'min_extrude_temp': '10', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'control': 'pid', 'pid_kp': '26.239', 'pid_ki': '1.965', 'pid_kd': '87.574'}, 'tmc2209 extruder': {'stealthchop_threshold': '0', 'run_current': '0.6', 'interpolate': 'false', 'sense_resistor': '0.100', 'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1'}, 'firmware_retraction': {'retract_length': '0.5', 'retract_speed': '30', 'unretract_speed': '30'}, 'heater_fan hotend_fan': {'pin': 'nhk:gpio5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'nhk:gpio6', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.010'}, 'output_pin caselight': {'pin': 'HEATER_LED', 'pwm': 'true', 'cycle_time': '0.01', 'value': '0.15'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_CHM', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'temperature_sensor Pi': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'heater_fan Vent': {'pin': 'BAY_1', 'max_power': '1', 'kick_start_time': '0.5', 'shutdown_speed': '0', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '0.40', 'cycle_time': '0.008'}, 'fan_generic BoomBox': {'pin': 'NMFAN', 'shutdown_speed': '0.0', 'hardware_pwm': 'False', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.008'}, 'fan_generic BedFans': {'pin': 'BEDFAN', 'kick_start_time': '0.5', 'cycle_time': '0.008'}, 'output_pin beeper': {'pin': 'BUZZ', 'value': '0', 'shutdown_value': '0', 'pwm': 'True', 'cycle_time': '0.0005'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00'}, 'board_pins': {'aliases': '\n\n\nB_MOTOR_EN=PF14,  B_MOTOR_STEP=PF13,  B_MOTOR_DIR=PF12,  B_MOTOR_UART=PC4,\n\nA_MOTOR_EN=PF15,  A_MOTOR_STEP=PG0,  A_MOTOR_DIR=PG1,  A_MOTOR_UART=PD11,\n\nEXTRUDER_EN=PG5,  EXTRUDER_STEP=PF11,  EXTRUDER_DIR=PG3,  EXTRUDER_UART=PC6,\n\n\n\nZ_ZERO_EN=PF1,  Z_ZERO_STEP=PC13,  Z_ZERO_DIR=PF0,  Z_ZERO_UART=PE4,\n\nZ_ONE_EN=PD4,  Z_ONE_STEP=PE2,  Z_ONE_DIR=PE3,  Z_ONE_UART=PE1,\n\nZ_TWO_EN=PE0,  Z_TWO_STEP=PE6,  Z_TWO_DIR=PA14, Z_TWO_UART=PD3,\n\n\n\nHEATER_BED=PA3, HEATER_HE=PA2, HEATER_LED=PB10,\n\nTEMP_BED=PF3, TEMP_HE=PF4, TEMP_CHM=PF5,\n\nBAY_1=PD12, BEDFAN=PA8, NMFAN=PE5, BUZZ=PD15,\n\nENDSTOP_Z=PG10,  ENDSTOP_X=PG6,  ENDSTOP_Y=PG9, PROBE=PG13, BTTFS=PG14, RGBLED=PB0'}, 'stepper_z': {'endstop_pin': 'probe:z_virtual_endstop', 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'enable_pin': '!Z_ZERO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200', 'position_max': '200', 'position_min': '-10', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'probe': {'pin': 'nhk:gpio10', 'z_offset': '6.445', 'x_offset': '0', 'y_offset': '19.75', 'speed': '8.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.0075', 'samples_tolerance_retries': '3'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '120', 'retries': '3', 'retry_tolerance': '0.0075', 'horizontal_move_z': '10'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '8', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'probe_count': '5,5', 'zero_reference_position': '150, 150', 'algorithm': 'bicubic', 'fade_start': '0.6', 'fade_end': '10', 'fade_target': '0'}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': '3', 'color_order': 'RGBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'stepper_x': {'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'enable_pin': '!B_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true', 'endstop_pin': 'nhk:gpio12'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'enable_pin': '!A_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'ENDSTOP_Y', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'enable_pin': '!Z_ONE_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'enable_pin': '!Z_TWO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00'}, 'output_pin act_led': {'pin': '!nhk:gpio8'}, 'adxl345': {'cs_pin': 'nhk:gpio21', 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_mosi_pin': 'nhk:gpio20', 'spi_software_miso_pin': 'nhk:gpio19'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n155, 155, 20'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor Nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'sensor_pin': 'nhk:gpio26', 'pullup_resistor': '2200', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'filament_motion_sensor filament_sensor': {'detection_length': '14', 'extruder': 'extruder', 'switch_pin': '^BTTFS', 'pause_on_runout': 'True', 'insert_gcode': '\nNozzle_ON', 'runout_gcode': '\nBEEP_ERROR\nPAUSE'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_OFF': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_ON': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1'}, 'gcode_macro _AIR_FILTER_VARIABLES': {'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1', 'gcode': ''}, 'gcode_macro RESET_AIR_FILTER': {'description': 'Resets the air-filter replacement timer', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }'}, 'gcode_macro QUERY_AIR_FILTER': {'description': 'Displays the amount of time the air filter has run since it was last reset.', 'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }'}, 'delayed_gcode _AIR_FILTER_TIMER': {'initial_duration': '1', 'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1"}, 'delayed_gcode _AIR_FILTER_FLUSH_TIMER': {'initial_duration': '300', 'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300"}, 'gcode_macro HEATSOAKER': {'description': 'HeatSoak for an Hour', 'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999'}, 'gcode_macro BEEP': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}'}, 'gcode_macro BEEP_SUCCESS': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000'}, 'gcode_macro BEEP_ERROR': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100'}, 'gcode_macro CG28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CHOME': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CENTER_ACCURACY': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY'}, 'gcode_macro Lights_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro Lights_ON': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25'}, 'gcode_macro PID_HOTEND': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260'}, 'gcode_macro PID_BED': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110'}, 'gcode_macro MANUAL_FLOW_CALIBRATION': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'delayed_gcode HEATSOAK_DELAY': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}'}, 'gcode_macro HEATSOAK_TIMER': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}'}, 'gcode_macro PARK_FRONT': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT'}, 'gcode_macro PARK_FRONT_LOW': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW'}, 'gcode_macro PARK_REAR': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR'}, 'gcode_macro PARK_CENTER': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER'}, 'gcode_macro PARK_BED': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED'}, 'gcode_macro FORCE_BED_DOWN': {'description': 'Force move bed down without homing', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_UP': {'description': 'Force move bed down without homing.', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_LOCK': {'description': 'Active Z steppers to lock down the bed, Without Homing', 'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90'}, 'gcode_macro FORCE_BED_UNLOCK': {'description': 'Unlocks the Bed', 'gcode': '\nM84'}, 'delayed_gcode FILTER_AIR_STOP': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}'}, 'gcode_macro PRIME_BLOB': {'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.', 'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state'}, 'gcode_macro RINGING_TOWER': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_MZV': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_EI': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro PRIMING': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107'}, 'gcode_macro CLEAN': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro Z_TILT_ADJUST': {'rename_existing': '_Z_TILT_ADJUST', 'description': '', 'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro Smart_Park': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'exclude_object': {}, 'skew_correction': {}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '10000', 'max_z_velocity': '15', 'max_z_accel': '50', 'square_corner_velocity': '5.0'}, 'input_shaper': {'shaper_freq_x': '58.8', 'shaper_type_x': 'zv', 'shaper_freq_y': '43.4', 'shaper_type_y': 'mzv'}, 'bed_mesh default': {'version': '1', 'points': '\n0.048750, 0.068750, 0.040000, 0.078750, 0.070000\n0.050000, 0.067500, 0.053750, 0.063750, 0.090000\n0.006250, 0.036250, 0.000000, 0.045000, 0.075000\n0.021250, 0.082500, 0.071250, 0.081250, 0.098750\n-0.025000, 0.068750, 0.046250, 0.088750, 0.078750', 'tension': '0.2', 'min_x': '40.0', 'algo': 'bicubic', 'y_count': '5', 'mesh_y_pps': '2', 'min_y': '40.0', 'x_count': '5', 'max_y': '260.0', 'mesh_x_pps': '2', 'max_x': '260.0'}, 'skew_correction my_skew_profile': {'xy_skew': '-0.000802972249612', 'xz_skew': '0.0', 'yz_skew': '0.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': '\\\\'}, 'gcode_macro cancel_print': {'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}', 'rename_existing': 'BASE_PAUSE', 'description': 'Pauses Print'}, 'gcode_macro resume': {'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'rename_existing': 'BASE_RESUME', 'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro polylite_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026', 'description': 'G-Code macro'}, 'gcode_macro polylite_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro sparta_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325', 'description': 'G-Code macro'}, 'gcode_macro sparta_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300', 'description': 'G-Code macro'}, 'gcode_macro sparta_purple': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_abs': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polylite_yellow_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro filament_reset': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro abs_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_reset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro clean_filament_cold_pull': {'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0', 'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince'}, 'gcode_macro manual_clean': {'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0', 'description': 'Grab a Brush ready, Start Scrubbing!'}, 'gcode_macro load_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro load_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro polyterra_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031', 'description': 'G-Code macro'}, 'gcode_macro polyterra_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro polyterra_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550', 'description': 'G-Code macro'}, 'gcode_macro polyterra_candy': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035', 'description': 'G-Code macro'}, 'gcode_macro polyterra_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polyterra_blue': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445', 'description': 'G-Code macro'}, 'gcode_macro polyterra_lav': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054', 'description': 'G-Code macro'}, 'gcode_macro ziro_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252', 'description': 'G-Code macro'}, 'gcode_macro jessie_tan': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029', 'description': 'G-Code macro'}, 'gcode_macro sunlu_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER', 'description': 'Run standard input shaper test for all axes'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS', 'description': 'Run custom demi-axe test to analyze belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400', 'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations'}, 'gcode_macro xybelt_tension': {'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }', 'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': 300.0, 'verbose': True}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_BED', 'min_temp': -20.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.5, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 33.946, 'pid_ki': 0.997, 'pid_kd': 288.961, 'heater_pin': 'HEATER_BED', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'tmc2209 extruder': {'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.1, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'PT1000', 'pullup_resistor': 2200.0, 'sensor_pin': 'nhk:gpio29', 'min_temp': 10.0, 'max_temp': 280.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.239, 'pid_ki': 1.965, 'pid_kd': 87.574, 'heater_pin': 'nhk:gpio9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'nhk:gpio23', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!nhk:gpio24', 'rotation_distance': 47.088, 'full_steps_per_rotation': 200, 'gear_ratio': [[9.0, 1.0]], 'enable_pin': '!nhk:gpio25'}, 'firmware_retraction': {'retract_length': 0.5, 'retract_speed': 30.0, 'unretract_extra_length': 0.0, 'unretract_speed': 30.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'nhk:gpio5', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'nhk:gpio6'}, 'output_pin caselight': {'pwm': True, 'pin': 'HEATER_LED', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.15, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_CHM', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'temperature_sensor pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'heater_fan vent': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BAY_1', 'fan_speed': 0.4}, 'fan_generic boombox': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'NMFAN'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BEDFAN'}, 'output_pin beeper': {'pwm': True, 'pin': 'BUZZ', 'cycle_time': 0.0005, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['B_MOTOR_EN', 'PF14'], ['B_MOTOR_STEP', 'PF13'], ['B_MOTOR_DIR', 'PF12'], ['B_MOTOR_UART', 'PC4'], ['A_MOTOR_EN', 'PF15'], ['A_MOTOR_STEP', 'PG0'], ['A_MOTOR_DIR', 'PG1'], ['A_MOTOR_UART', 'PD11'], ['EXTRUDER_EN', 'PG5'], ['EXTRUDER_STEP', 'PF11'], ['EXTRUDER_DIR', 'PG3'], ['EXTRUDER_UART', 'PC6'], ['Z_ZERO_EN', 'PF1'], ['Z_ZERO_STEP', 'PC13'], ['Z_ZERO_DIR', 'PF0'], ['Z_ZERO_UART', 'PE4'], ['Z_ONE_EN', 'PD4'], ['Z_ONE_STEP', 'PE2'], ['Z_ONE_DIR', 'PE3'], ['Z_ONE_UART', 'PE1'], ['Z_TWO_EN', 'PE0'], ['Z_TWO_STEP', 'PE6'], ['Z_TWO_DIR', 'PA14'], ['Z_TWO_UART', 'PD3'], ['HEATER_BED', 'PA3'], ['HEATER_HE', 'PA2'], ['HEATER_LED', 'PB10'], ['TEMP_BED', 'PF3'], ['TEMP_HE', 'PF4'], ['TEMP_CHM', 'PF5'], ['BAY_1', 'PD12'], ['BEDFAN', 'PA8'], ['NMFAN', 'PE5'], ['BUZZ', 'PD15'], ['ENDSTOP_Z', 'PG10'], ['ENDSTOP_X', 'PG6'], ['ENDSTOP_Y', 'PG9'], ['PROBE', 'PG13'], ['BTTFS', 'PG14'], ['RGBLED', 'PB0']]}, 'probe': {'z_offset': 6.445, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'nhk:gpio10', 'speed': 8.0, 'lift_speed': 8.0, 'x_offset': 0.0, 'y_offset': 19.75, 'samples': 3, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.0075, 'samples_tolerance_retries': 3}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 3, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 120.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [150.0, 150.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 8.0, 'speed': 150.0, 'fade_start': 0.6, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.04875, 0.06875, 0.04, 0.07875, 0.07], [0.05, 0.0675, 0.05375, 0.06375, 0.09], [0.00625, 0.03625, 0.0, 0.045, 0.075], [0.02125, 0.0825, 0.07125, 0.08125, 0.09875], [-0.025, 0.06875, 0.04625, 0.08875, 0.07875]], 'min_x': 40.0, 'max_x': 260.0, 'min_y': 40.0, 'max_y': 260.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': 3, 'color_order': ['RGBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!B_MOTOR_EN', 'endstop_pin': 'nhk:gpio12', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!A_MOTOR_EN', 'endstop_pin': 'ENDSTOP_Y', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ZERO_EN', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 200.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ONE_EN'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_TWO_EN'}, 'output_pin act_led': {'pwm': False, 'pin': '!nhk:gpio8', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'nhk:gpio21', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_miso_pin': 'nhk:gpio19', 'spi_software_mosi_pin': 'nhk:gpio20'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[155.0, 155.0, 20.0]], 'accel_chip': 'adxl345'}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'pullup_resistor': 2200.0, 'inline_resistor': 0.0, 'sensor_pin': 'nhk:gpio26', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'filament_motion_sensor filament_sensor': {'switch_pin': '^BTTFS', 'extruder': 'extruder', 'detection_length': 14.0, 'pause_on_runout': True, 'runout_gcode': '\nBEEP_ERROR\nPAUSE', 'insert_gcode': '\nNozzle_ON', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro fs_off': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro fs_on': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro _air_filter_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1'}, 'gcode_macro reset_air_filter': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }', 'description': 'Resets the air-filter replacement timer'}, 'gcode_macro query_air_filter': {'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }', 'description': 'Displays the amount of time the air filter has run since it was last reset.'}, 'delayed_gcode _air_filter_timer': {'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1", 'initial_duration': 1.0}, 'delayed_gcode _air_filter_flush_timer': {'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300", 'initial_duration': 300.0}, 'gcode_macro heatsoaker': {'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999', 'description': 'HeatSoak for an Hour'}, 'gcode_macro beep': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro beep_success': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000', 'description': 'G-Code macro'}, 'gcode_macro beep_error': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100', 'description': 'G-Code macro'}, 'gcode_macro cg28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro chome': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro center_accuracy': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro lights_on': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25', 'description': 'G-Code macro'}, 'gcode_macro pid_hotend': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260', 'description': 'G-Code macro'}, 'gcode_macro pid_bed': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110', 'description': 'G-Code macro'}, 'gcode_macro manual_flow_calibration': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'delayed_gcode heatsoak_delay': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro heatsoak_timer': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}', 'description': 'G-Code macro'}, 'gcode_macro park_front': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT', 'description': 'G-Code macro'}, 'gcode_macro park_front_low': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW', 'description': 'G-Code macro'}, 'gcode_macro park_rear': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR', 'description': 'G-Code macro'}, 'gcode_macro park_center': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER', 'description': 'G-Code macro'}, 'gcode_macro park_bed': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED', 'description': 'G-Code macro'}, 'gcode_macro force_bed_down': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing'}, 'gcode_macro force_bed_up': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing.'}, 'gcode_macro force_bed_lock': {'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90', 'description': 'Active Z steppers to lock down the bed, Without Homing'}, 'gcode_macro force_bed_unlock': {'gcode': '\nM84', 'description': 'Unlocks the Bed'}, 'delayed_gcode filter_air_stop': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro print_end': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro prime_blob': {'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state', 'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.'}, 'gcode_macro ringing_tower': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_mzv': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_ei': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro priming': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000', 'description': 'G-Code macro'}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount'}, 'gcode_macro z_tilt_adjust': {'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0', 'rename_existing': '_Z_TILT_ADJUST', 'description': ''}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'skew_correction my_skew_profile': {'xy_skew': -0.000802972249612, 'xz_skew': 0.0, 'yz_skew': 0.0}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'zv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 58.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 43.4}, 'printer': {'max_velocity': 300.0, 'max_accel': 10000.0, 'max_accel_to_decel': 5000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 50.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-07 23:59:18,064 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-07 23:59:18,066 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-07 23:59:18,066 [printer.py:reinit()] - # Extruders: 1
2024-02-07 23:59:18,066 [printer.py:reinit()] - # Temperature devices: 5
2024-02-07 23:59:18,066 [printer.py:reinit()] - # Fans: 5
2024-02-07 23:59:18,066 [printer.py:reinit()] - # Output pins: 3
2024-02-07 23:59:18,066 [printer.py:reinit()] - # Leds: 1
2024-02-07 23:59:18,077 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-07 23:59:18,079 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-07 23:59:18,365 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor Pi&temperature_sensor Octopus&temperature_sensor Nitehawk&fan&fan_generic BoomBox&fan_generic BedFans&heater_fan hotend_fan&heater_fan Vent&filament_motion_sensor filament_sensor&output_pin caselight&output_pin beeper&output_pin act_led&neopixel sb_leds
2024-02-07 23:59:18,369 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-07 23:59:18,370 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-07 23:59:18,371 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-07 23:59:18,372 [screen.py:init_klipper()] - Printer initialized
2024-02-07 23:59:18,373 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-07 23:59:18,373 [printer.py:change_state()] - Adding callback for state: startup
2024-02-07 23:59:18,793 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-07 23:59:18,793 [printer.py:change_state()] - Adding callback for state: ready
2024-02-07 23:59:18,795 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-07 23:59:18,795 [screen.py:show_panel()] - Reinitializing panel
2024-02-07 23:59:18,857 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-07 23:59:18,874 [main_menu.py:add_device()] - Adding device: extruder
2024-02-07 23:59:18,878 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-07 23:59:18,882 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-07 23:59:18,883 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-07 23:59:18,883 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-07 23:59:18,883 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-07 23:59:18,907 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-07 23:59:18,924 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-07 23:59:18,927 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor Pi', 'temperature_sensor Octopus', 'temperature_sensor Nitehawk', 'extruder']
2024-02-07 23:59:18,934 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-07 23:59:18,935 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-08 00:01:21,292 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-08 00:01:21,293 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-08 00:01:21,293 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-08 00:01:21,294 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-08 00:01:21,297 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 00:01:21,297 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 00:01:21,369 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-08 00:01:25,020 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-08 00:01:25,026 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-08 00:01:25,027 [printer.py:configure_cameras()] - Cameras: []
2024-02-08 00:01:25,027 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-08 00:01:25,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-08 00:01:25,171 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-08 00:01:25,172 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-08 00:01:25,173 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-08 00:01:25,173 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-08 00:01:25,173 [printer.py:reinit()] - # Extruders: 0
2024-02-08 00:01:25,173 [printer.py:reinit()] - # Temperature devices: 0
2024-02-08 00:01:25,173 [printer.py:reinit()] - # Fans: 0
2024-02-08 00:01:25,173 [printer.py:reinit()] - # Output pins: 0
2024-02-08 00:01:25,173 [printer.py:reinit()] - # Leds: 0
2024-02-08 00:01:25,181 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-08 00:01:25,182 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-08 00:01:25,423 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-02-08 00:01:25,424 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-08 00:01:25,424 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-08 00:01:25,424 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-08 00:01:25,426 [screen.py:init_klipper()] - Printer initialized
2024-02-08 00:01:25,426 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-02-08 00:01:25,426 [printer.py:change_state()] - Adding callback for state: error
2024-02-08 00:01:25,428 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 00:01:25,428 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 00:01:25,458 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-08 00:01:41,390 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-02-08 00:01:41,390 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-08 00:01:41,391 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-08 00:01:41,391 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-08 00:01:41,393 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 00:01:41,394 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 00:01:41,478 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-08 00:01:45,020 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-08 00:01:45,026 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-08 00:01:45,027 [printer.py:configure_cameras()] - Cameras: []
2024-02-08 00:01:45,027 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-08 00:01:45,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-08 00:01:45,288 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-08 00:01:45,288 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-08 00:01:45,289 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-08 00:01:45,289 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-08 00:01:45,289 [printer.py:reinit()] - # Extruders: 0
2024-02-08 00:01:45,289 [printer.py:reinit()] - # Temperature devices: 0
2024-02-08 00:01:45,289 [printer.py:reinit()] - # Fans: 0
2024-02-08 00:01:45,289 [printer.py:reinit()] - # Output pins: 0
2024-02-08 00:01:45,289 [printer.py:reinit()] - # Leds: 0
2024-02-08 00:01:45,296 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-08 00:01:45,297 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-08 00:01:45,544 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-02-08 00:01:45,545 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-08 00:01:45,545 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-08 00:01:45,545 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-08 00:01:45,546 [screen.py:init_klipper()] - Printer initialized
2024-02-08 00:01:45,546 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-02-08 00:01:45,546 [printer.py:change_state()] - Adding callback for state: error
2024-02-08 00:01:45,550 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 00:01:45,550 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 00:01:45,582 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-08 00:01:53,822 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-02-08 00:01:53,822 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-08 00:01:53,823 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-08 00:01:53,823 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-08 00:01:53,826 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 00:01:53,826 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 00:01:53,907 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-08 00:01:57,020 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-08 00:01:57,026 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-08 00:01:57,027 [printer.py:configure_cameras()] - Cameras: []
2024-02-08 00:01:57,027 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-08 00:01:57,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-08 00:01:57,055 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-08 00:01:57,058 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_prefix': '\\\\'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pauses Print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'gcode_macro POLYLITE_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026'}, 'gcode_macro POLYLITE_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro SPARTA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325'}, 'gcode_macro SPARTA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300'}, 'gcode_macro SPARTA_PURPLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro POLYLITE_BLACK_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510'}, 'gcode_macro POLYLITE_BLACK_ABS': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYLITE_YELLOW_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro FILAMENT_RESET': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro ABS_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0'}, 'gcode_macro PRINT_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0'}, 'gcode_macro PRINT_RESET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0'}, 'gcode_macro Clean_Filament_Cold_Pull': {'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince', 'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0'}, 'gcode_macro Manual_Clean': {'description': 'Grab a Brush ready, Start Scrubbing!', 'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0'}, 'gcode_macro LOAD_FILAMENT_PLA': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro LOAD_FILAMENT_ABS': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_PLA': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_ABS': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro POLYTERRA_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031'}, 'gcode_macro POLYTERRA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro POLYTERRA_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550'}, 'gcode_macro POLYTERRA_CANDY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035'}, 'gcode_macro POLYTERRA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYTERRA_BLUE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445'}, 'gcode_macro POLYTERRA_LAV': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054'}, 'gcode_macro ZIRO_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252'}, 'gcode_macro JESSIE_TAN': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029'}, 'gcode_macro SUNLU_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066'}, 'gcode_macro M600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Run standard input shaper test for all axes', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Run custom demi-axe test to analyze belts on CoreXY printers', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations', 'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400'}, 'gcode_macro XYBelt_Tension': {'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115', 'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': '300.0', 'verbose': 'True'}, 'heater_bed': {'pwm_cycle_time': '0.0166', 'heater_pin': 'HEATER_BED', 'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_BED', 'max_power': '0.5', 'min_temp': '-20', 'max_temp': '120', 'control': 'pid', 'pid_kp': '33.946', 'pid_ki': '0.997', 'pid_kd': '288.961'}, 'extruder': {'step_pin': 'nhk:gpio23', 'dir_pin': '!nhk:gpio24', 'enable_pin': '!nhk:gpio25', 'rotation_distance': '47.088', 'gear_ratio': '9:1', 'microsteps': '16', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'nhk:gpio9', 'sensor_pin': 'nhk:gpio29', 'pullup_resistor': '2200', 'sensor_type': 'PT1000', 'min_temp': '10', 'max_temp': '280', 'max_power': '1.0', 'min_extrude_temp': '10', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'control': 'pid', 'pid_kp': '26.239', 'pid_ki': '1.965', 'pid_kd': '87.574'}, 'tmc2209 extruder': {'stealthchop_threshold': '0', 'run_current': '0.6', 'interpolate': 'false', 'sense_resistor': '0.100', 'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1'}, 'firmware_retraction': {'retract_length': '0.5', 'retract_speed': '30', 'unretract_speed': '30'}, 'heater_fan hotend_fan': {'pin': 'nhk:gpio5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'nhk:gpio6', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.010'}, 'output_pin caselight': {'pin': 'HEATER_LED', 'pwm': 'true', 'cycle_time': '0.01', 'value': '0.15'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_CHM', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'temperature_sensor Pi': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'heater_fan Vent': {'pin': 'BAY_1', 'max_power': '1', 'kick_start_time': '0.5', 'shutdown_speed': '0', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '0.40', 'cycle_time': '0.008'}, 'fan_generic BoomBox': {'pin': 'NMFAN', 'shutdown_speed': '0.0', 'hardware_pwm': 'False', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.008'}, 'fan_generic BedFans': {'pin': 'BEDFAN', 'kick_start_time': '0.5', 'cycle_time': '0.008'}, 'output_pin beeper': {'pin': 'BUZZ', 'value': '0', 'shutdown_value': '0', 'pwm': 'True', 'cycle_time': '0.0005'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00'}, 'board_pins': {'aliases': '\n\n\nB_MOTOR_EN=PF14,  B_MOTOR_STEP=PF13,  B_MOTOR_DIR=PF12,  B_MOTOR_UART=PC4,\n\nA_MOTOR_EN=PF15,  A_MOTOR_STEP=PG0,  A_MOTOR_DIR=PG1,  A_MOTOR_UART=PD11,\n\nEXTRUDER_EN=PG5,  EXTRUDER_STEP=PF11,  EXTRUDER_DIR=PG3,  EXTRUDER_UART=PC6,\n\n\n\nZ_ZERO_EN=PF1,  Z_ZERO_STEP=PC13,  Z_ZERO_DIR=PF0,  Z_ZERO_UART=PE4,\n\nZ_ONE_EN=PD4,  Z_ONE_STEP=PE2,  Z_ONE_DIR=PE3,  Z_ONE_UART=PE1,\n\nZ_TWO_EN=PE0,  Z_TWO_STEP=PE6,  Z_TWO_DIR=PA14, Z_TWO_UART=PD3,\n\n\n\nHEATER_BED=PA3, HEATER_HE=PA2, HEATER_LED=PB10,\n\nTEMP_BED=PF3, TEMP_HE=PF4, TEMP_CHM=PF5,\n\nBAY_1=PD12, BEDFAN=PA8, NMFAN=PE5, BUZZ=PD15,\n\nENDSTOP_Z=PG10,  ENDSTOP_X=PG6,  ENDSTOP_Y=PG9, PROBE=PG13, BTTFS=PG14, RGBLED=PB0'}, 'stepper_z': {'endstop_pin': 'probe:z_virtual_endstop', 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'enable_pin': '!Z_ZERO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200', 'position_max': '200', 'position_min': '-10', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'probe': {'pin': 'nhk:gpio10', 'z_offset': '6.445', 'x_offset': '0', 'y_offset': '19.75', 'speed': '8.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.0075', 'samples_tolerance_retries': '3'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '120', 'retries': '3', 'retry_tolerance': '0.0075', 'horizontal_move_z': '10'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '8', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'probe_count': '5,5', 'zero_reference_position': '150, 150', 'algorithm': 'bicubic', 'fade_start': '0.6', 'fade_end': '10', 'fade_target': '0'}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': '3', 'color_order': 'RGBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'stepper_x': {'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'enable_pin': '!B_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true', 'endstop_pin': 'nhk:gpio12'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'enable_pin': '!A_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'ENDSTOP_Y', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'enable_pin': '!Z_ONE_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'enable_pin': '!Z_TWO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00'}, 'output_pin act_led': {'pin': '!nhk:gpio8'}, 'adxl345': {'cs_pin': 'nhk:gpio21', 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_mosi_pin': 'nhk:gpio20', 'spi_software_miso_pin': 'nhk:gpio19'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n155, 155, 20'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor Nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'sensor_pin': 'nhk:gpio26', 'pullup_resistor': '2200', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'filament_motion_sensor filament_sensor': {'detection_length': '14', 'extruder': 'extruder', 'switch_pin': '^BTTFS', 'pause_on_runout': 'True', 'insert_gcode': '\nNozzle_ON', 'runout_gcode': '\nBEEP_ERROR\nPAUSE'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_OFF': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_ON': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1'}, 'gcode_macro _AIR_FILTER_VARIABLES': {'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1', 'gcode': ''}, 'gcode_macro RESET_AIR_FILTER': {'description': 'Resets the air-filter replacement timer', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }'}, 'gcode_macro QUERY_AIR_FILTER': {'description': 'Displays the amount of time the air filter has run since it was last reset.', 'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }'}, 'delayed_gcode _AIR_FILTER_TIMER': {'initial_duration': '1', 'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1"}, 'delayed_gcode _AIR_FILTER_FLUSH_TIMER': {'initial_duration': '300', 'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300"}, 'gcode_macro HEATSOAKER': {'description': 'HeatSoak for an Hour', 'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999'}, 'gcode_macro BEEP': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}'}, 'gcode_macro BEEP_SUCCESS': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000'}, 'gcode_macro BEEP_ERROR': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100'}, 'gcode_macro CG28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CHOME': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CENTER_ACCURACY': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY'}, 'gcode_macro Lights_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro Lights_ON': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25'}, 'gcode_macro PID_HOTEND': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260'}, 'gcode_macro PID_BED': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110'}, 'gcode_macro MANUAL_FLOW_CALIBRATION': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'delayed_gcode HEATSOAK_DELAY': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}'}, 'gcode_macro HEATSOAK_TIMER': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}'}, 'gcode_macro PARK_FRONT': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT'}, 'gcode_macro PARK_FRONT_LOW': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW'}, 'gcode_macro PARK_REAR': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR'}, 'gcode_macro PARK_CENTER': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER'}, 'gcode_macro PARK_BED': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED'}, 'gcode_macro FORCE_BED_DOWN': {'description': 'Force move bed down without homing', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_UP': {'description': 'Force move bed down without homing.', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_LOCK': {'description': 'Active Z steppers to lock down the bed, Without Homing', 'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90'}, 'gcode_macro FORCE_BED_UNLOCK': {'description': 'Unlocks the Bed', 'gcode': '\nM84'}, 'delayed_gcode FILTER_AIR_STOP': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}'}, 'gcode_macro PRIME_BLOB': {'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.', 'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state'}, 'gcode_macro RINGING_TOWER': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_MZV': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_EI': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro PRIMING': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107'}, 'gcode_macro CLEAN': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro Z_TILT_ADJUST': {'rename_existing': '_Z_TILT_ADJUST', 'description': '', 'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro Smart_Park': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'exclude_object': {}, 'skew_correction': {}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '10000', 'max_z_velocity': '15', 'max_z_accel': '50', 'square_corner_velocity': '5.0'}, 'input_shaper': {'shaper_freq_x': '58.8', 'shaper_type_x': 'zv', 'shaper_freq_y': '43.4', 'shaper_type_y': 'mzv'}, 'bed_mesh default': {'version': '1', 'points': '\n0.048750, 0.068750, 0.040000, 0.078750, 0.070000\n0.050000, 0.067500, 0.053750, 0.063750, 0.090000\n0.006250, 0.036250, 0.000000, 0.045000, 0.075000\n0.021250, 0.082500, 0.071250, 0.081250, 0.098750\n-0.025000, 0.068750, 0.046250, 0.088750, 0.078750', 'tension': '0.2', 'min_x': '40.0', 'algo': 'bicubic', 'y_count': '5', 'mesh_y_pps': '2', 'min_y': '40.0', 'x_count': '5', 'max_y': '260.0', 'mesh_x_pps': '2', 'max_x': '260.0'}, 'skew_correction my_skew_profile': {'xy_skew': '-0.000802972249612', 'xz_skew': '0.0', 'yz_skew': '0.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': '\\\\'}, 'gcode_macro cancel_print': {'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}', 'rename_existing': 'BASE_PAUSE', 'description': 'Pauses Print'}, 'gcode_macro resume': {'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'rename_existing': 'BASE_RESUME', 'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro polylite_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026', 'description': 'G-Code macro'}, 'gcode_macro polylite_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro sparta_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325', 'description': 'G-Code macro'}, 'gcode_macro sparta_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300', 'description': 'G-Code macro'}, 'gcode_macro sparta_purple': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_abs': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polylite_yellow_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro filament_reset': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro abs_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_reset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro clean_filament_cold_pull': {'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0', 'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince'}, 'gcode_macro manual_clean': {'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0', 'description': 'Grab a Brush ready, Start Scrubbing!'}, 'gcode_macro load_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro load_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro polyterra_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031', 'description': 'G-Code macro'}, 'gcode_macro polyterra_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro polyterra_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550', 'description': 'G-Code macro'}, 'gcode_macro polyterra_candy': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035', 'description': 'G-Code macro'}, 'gcode_macro polyterra_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polyterra_blue': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445', 'description': 'G-Code macro'}, 'gcode_macro polyterra_lav': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054', 'description': 'G-Code macro'}, 'gcode_macro ziro_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252', 'description': 'G-Code macro'}, 'gcode_macro jessie_tan': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029', 'description': 'G-Code macro'}, 'gcode_macro sunlu_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER', 'description': 'Run standard input shaper test for all axes'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS', 'description': 'Run custom demi-axe test to analyze belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400', 'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations'}, 'gcode_macro xybelt_tension': {'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }', 'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': 300.0, 'verbose': True}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_BED', 'min_temp': -20.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.5, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 33.946, 'pid_ki': 0.997, 'pid_kd': 288.961, 'heater_pin': 'HEATER_BED', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'tmc2209 extruder': {'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.1, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'PT1000', 'pullup_resistor': 2200.0, 'sensor_pin': 'nhk:gpio29', 'min_temp': 10.0, 'max_temp': 280.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.239, 'pid_ki': 1.965, 'pid_kd': 87.574, 'heater_pin': 'nhk:gpio9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'nhk:gpio23', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!nhk:gpio24', 'rotation_distance': 47.088, 'full_steps_per_rotation': 200, 'gear_ratio': [[9.0, 1.0]], 'enable_pin': '!nhk:gpio25'}, 'firmware_retraction': {'retract_length': 0.5, 'retract_speed': 30.0, 'unretract_extra_length': 0.0, 'unretract_speed': 30.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'nhk:gpio5', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'nhk:gpio6'}, 'output_pin caselight': {'pwm': True, 'pin': 'HEATER_LED', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.15, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_CHM', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'temperature_sensor pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'heater_fan vent': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BAY_1', 'fan_speed': 0.4}, 'fan_generic boombox': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'NMFAN'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BEDFAN'}, 'output_pin beeper': {'pwm': True, 'pin': 'BUZZ', 'cycle_time': 0.0005, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['B_MOTOR_EN', 'PF14'], ['B_MOTOR_STEP', 'PF13'], ['B_MOTOR_DIR', 'PF12'], ['B_MOTOR_UART', 'PC4'], ['A_MOTOR_EN', 'PF15'], ['A_MOTOR_STEP', 'PG0'], ['A_MOTOR_DIR', 'PG1'], ['A_MOTOR_UART', 'PD11'], ['EXTRUDER_EN', 'PG5'], ['EXTRUDER_STEP', 'PF11'], ['EXTRUDER_DIR', 'PG3'], ['EXTRUDER_UART', 'PC6'], ['Z_ZERO_EN', 'PF1'], ['Z_ZERO_STEP', 'PC13'], ['Z_ZERO_DIR', 'PF0'], ['Z_ZERO_UART', 'PE4'], ['Z_ONE_EN', 'PD4'], ['Z_ONE_STEP', 'PE2'], ['Z_ONE_DIR', 'PE3'], ['Z_ONE_UART', 'PE1'], ['Z_TWO_EN', 'PE0'], ['Z_TWO_STEP', 'PE6'], ['Z_TWO_DIR', 'PA14'], ['Z_TWO_UART', 'PD3'], ['HEATER_BED', 'PA3'], ['HEATER_HE', 'PA2'], ['HEATER_LED', 'PB10'], ['TEMP_BED', 'PF3'], ['TEMP_HE', 'PF4'], ['TEMP_CHM', 'PF5'], ['BAY_1', 'PD12'], ['BEDFAN', 'PA8'], ['NMFAN', 'PE5'], ['BUZZ', 'PD15'], ['ENDSTOP_Z', 'PG10'], ['ENDSTOP_X', 'PG6'], ['ENDSTOP_Y', 'PG9'], ['PROBE', 'PG13'], ['BTTFS', 'PG14'], ['RGBLED', 'PB0']]}, 'probe': {'z_offset': 6.445, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'nhk:gpio10', 'speed': 8.0, 'lift_speed': 8.0, 'x_offset': 0.0, 'y_offset': 19.75, 'samples': 3, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.0075, 'samples_tolerance_retries': 3}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 3, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 120.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [150.0, 150.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 8.0, 'speed': 150.0, 'fade_start': 0.6, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.04875, 0.06875, 0.04, 0.07875, 0.07], [0.05, 0.0675, 0.05375, 0.06375, 0.09], [0.00625, 0.03625, 0.0, 0.045, 0.075], [0.02125, 0.0825, 0.07125, 0.08125, 0.09875], [-0.025, 0.06875, 0.04625, 0.08875, 0.07875]], 'min_x': 40.0, 'max_x': 260.0, 'min_y': 40.0, 'max_y': 260.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': 3, 'color_order': ['RGBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!B_MOTOR_EN', 'endstop_pin': 'nhk:gpio12', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!A_MOTOR_EN', 'endstop_pin': 'ENDSTOP_Y', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ZERO_EN', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 200.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ONE_EN'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_TWO_EN'}, 'output_pin act_led': {'pwm': False, 'pin': '!nhk:gpio8', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'nhk:gpio21', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_miso_pin': 'nhk:gpio19', 'spi_software_mosi_pin': 'nhk:gpio20'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[155.0, 155.0, 20.0]], 'accel_chip': 'adxl345'}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'pullup_resistor': 2200.0, 'inline_resistor': 0.0, 'sensor_pin': 'nhk:gpio26', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'filament_motion_sensor filament_sensor': {'switch_pin': '^BTTFS', 'extruder': 'extruder', 'detection_length': 14.0, 'pause_on_runout': True, 'runout_gcode': '\nBEEP_ERROR\nPAUSE', 'insert_gcode': '\nNozzle_ON', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro fs_off': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro fs_on': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro _air_filter_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1'}, 'gcode_macro reset_air_filter': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }', 'description': 'Resets the air-filter replacement timer'}, 'gcode_macro query_air_filter': {'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }', 'description': 'Displays the amount of time the air filter has run since it was last reset.'}, 'delayed_gcode _air_filter_timer': {'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1", 'initial_duration': 1.0}, 'delayed_gcode _air_filter_flush_timer': {'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300", 'initial_duration': 300.0}, 'gcode_macro heatsoaker': {'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999', 'description': 'HeatSoak for an Hour'}, 'gcode_macro beep': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro beep_success': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000', 'description': 'G-Code macro'}, 'gcode_macro beep_error': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100', 'description': 'G-Code macro'}, 'gcode_macro cg28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro chome': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro center_accuracy': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro lights_on': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25', 'description': 'G-Code macro'}, 'gcode_macro pid_hotend': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260', 'description': 'G-Code macro'}, 'gcode_macro pid_bed': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110', 'description': 'G-Code macro'}, 'gcode_macro manual_flow_calibration': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'delayed_gcode heatsoak_delay': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro heatsoak_timer': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}', 'description': 'G-Code macro'}, 'gcode_macro park_front': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT', 'description': 'G-Code macro'}, 'gcode_macro park_front_low': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW', 'description': 'G-Code macro'}, 'gcode_macro park_rear': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR', 'description': 'G-Code macro'}, 'gcode_macro park_center': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER', 'description': 'G-Code macro'}, 'gcode_macro park_bed': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED', 'description': 'G-Code macro'}, 'gcode_macro force_bed_down': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing'}, 'gcode_macro force_bed_up': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing.'}, 'gcode_macro force_bed_lock': {'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90', 'description': 'Active Z steppers to lock down the bed, Without Homing'}, 'gcode_macro force_bed_unlock': {'gcode': '\nM84', 'description': 'Unlocks the Bed'}, 'delayed_gcode filter_air_stop': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro print_end': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro prime_blob': {'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state', 'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.'}, 'gcode_macro ringing_tower': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_mzv': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_ei': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro priming': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000', 'description': 'G-Code macro'}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount'}, 'gcode_macro z_tilt_adjust': {'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0', 'rename_existing': '_Z_TILT_ADJUST', 'description': ''}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'skew_correction my_skew_profile': {'xy_skew': -0.000802972249612, 'xz_skew': 0.0, 'yz_skew': 0.0}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'zv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 58.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 43.4}, 'printer': {'max_velocity': 300.0, 'max_accel': 10000.0, 'max_accel_to_decel': 5000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 50.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-08 00:01:57,064 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-08 00:01:57,065 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-08 00:01:57,065 [printer.py:reinit()] - # Extruders: 1
2024-02-08 00:01:57,065 [printer.py:reinit()] - # Temperature devices: 5
2024-02-08 00:01:57,065 [printer.py:reinit()] - # Fans: 5
2024-02-08 00:01:57,066 [printer.py:reinit()] - # Output pins: 3
2024-02-08 00:01:57,066 [printer.py:reinit()] - # Leds: 1
2024-02-08 00:01:57,076 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-08 00:01:57,077 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-08 00:01:57,358 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor Pi&temperature_sensor Octopus&temperature_sensor Nitehawk&fan&fan_generic BoomBox&fan_generic BedFans&heater_fan hotend_fan&heater_fan Vent&filament_motion_sensor filament_sensor&output_pin caselight&output_pin beeper&output_pin act_led&neopixel sb_leds
2024-02-08 00:01:57,362 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-08 00:01:57,362 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-08 00:01:57,363 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-08 00:01:57,363 [screen.py:init_klipper()] - Printer initialized
2024-02-08 00:01:57,363 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-08 00:01:57,363 [printer.py:change_state()] - Adding callback for state: startup
2024-02-08 00:01:58,043 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-08 00:01:58,043 [printer.py:change_state()] - Adding callback for state: ready
2024-02-08 00:01:58,045 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 00:01:58,046 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 00:01:58,107 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-08 00:01:58,125 [main_menu.py:add_device()] - Adding device: extruder
2024-02-08 00:01:58,128 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-08 00:01:58,132 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-08 00:01:58,133 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-08 00:01:58,133 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-08 00:01:58,133 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-08 00:01:58,157 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-08 00:01:58,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-08 00:01:58,178 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor Pi', 'temperature_sensor Octopus', 'temperature_sensor Nitehawk', 'extruder']
2024-02-08 00:01:58,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-08 00:01:58,186 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-08 00:02:14,704 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-08 00:02:14,704 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-08 00:02:14,705 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-08 00:02:14,705 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-08 00:02:14,709 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 00:02:14,709 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 00:02:14,785 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-08 00:02:18,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-08 00:02:18,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-08 00:02:18,029 [printer.py:configure_cameras()] - Cameras: []
2024-02-08 00:02:18,030 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-08 00:02:18,040 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-08 00:02:18,063 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-08 00:02:18,067 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_prefix': '\\\\'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pauses Print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'gcode_macro POLYLITE_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026'}, 'gcode_macro POLYLITE_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro SPARTA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325'}, 'gcode_macro SPARTA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300'}, 'gcode_macro SPARTA_PURPLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro POLYLITE_BLACK_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510'}, 'gcode_macro POLYLITE_BLACK_ABS': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYLITE_YELLOW_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro FILAMENT_RESET': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro ABS_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0'}, 'gcode_macro PRINT_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0'}, 'gcode_macro PRINT_RESET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0'}, 'gcode_macro Clean_Filament_Cold_Pull': {'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince', 'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0'}, 'gcode_macro Manual_Clean': {'description': 'Grab a Brush ready, Start Scrubbing!', 'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0'}, 'gcode_macro LOAD_FILAMENT_PLA': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro LOAD_FILAMENT_ABS': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_PLA': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_ABS': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro POLYTERRA_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031'}, 'gcode_macro POLYTERRA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro POLYTERRA_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550'}, 'gcode_macro POLYTERRA_CANDY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035'}, 'gcode_macro POLYTERRA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYTERRA_BLUE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445'}, 'gcode_macro POLYTERRA_LAV': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054'}, 'gcode_macro ZIRO_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252'}, 'gcode_macro JESSIE_TAN': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029'}, 'gcode_macro SUNLU_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066'}, 'gcode_macro M600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Run standard input shaper test for all axes', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Run custom demi-axe test to analyze belts on CoreXY printers', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations', 'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400'}, 'gcode_macro XYBelt_Tension': {'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115', 'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': '300.0', 'verbose': 'True'}, 'heater_bed': {'pwm_cycle_time': '0.0166', 'heater_pin': 'HEATER_BED', 'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_BED', 'max_power': '0.5', 'min_temp': '-20', 'max_temp': '120', 'control': 'pid', 'pid_kp': '33.946', 'pid_ki': '0.997', 'pid_kd': '288.961'}, 'extruder': {'step_pin': 'nhk:gpio23', 'dir_pin': '!nhk:gpio24', 'enable_pin': '!nhk:gpio25', 'rotation_distance': '47.088', 'gear_ratio': '9:1', 'microsteps': '16', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'nhk:gpio9', 'sensor_pin': 'nhk:gpio29', 'pullup_resistor': '2200', 'sensor_type': 'PT1000', 'min_temp': '10', 'max_temp': '280', 'max_power': '1.0', 'min_extrude_temp': '10', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'control': 'pid', 'pid_kp': '26.239', 'pid_ki': '1.965', 'pid_kd': '87.574'}, 'tmc2209 extruder': {'stealthchop_threshold': '0', 'run_current': '0.6', 'interpolate': 'false', 'sense_resistor': '0.100', 'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1'}, 'firmware_retraction': {'retract_length': '0.5', 'retract_speed': '30', 'unretract_speed': '30'}, 'heater_fan hotend_fan': {'pin': 'nhk:gpio5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'nhk:gpio6', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.010'}, 'output_pin caselight': {'pin': 'HEATER_LED', 'pwm': 'true', 'cycle_time': '0.01', 'value': '0.15'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_CHM', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'temperature_sensor Pi': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'heater_fan Vent': {'pin': 'BAY_1', 'max_power': '1', 'kick_start_time': '0.5', 'shutdown_speed': '0', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '0.40', 'cycle_time': '0.008'}, 'fan_generic BoomBox': {'pin': 'NMFAN', 'shutdown_speed': '0.0', 'hardware_pwm': 'False', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.008'}, 'fan_generic BedFans': {'pin': 'BEDFAN', 'kick_start_time': '0.5', 'cycle_time': '0.008'}, 'output_pin beeper': {'pin': 'BUZZ', 'value': '0', 'shutdown_value': '0', 'pwm': 'True', 'cycle_time': '0.0005'}, 'temperature_sensor NitehawkChip': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'nhk', 'min_temp': '0', 'max_temp': '100'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00'}, 'board_pins': {'aliases': '\n\n\nB_MOTOR_EN=PF14,  B_MOTOR_STEP=PF13,  B_MOTOR_DIR=PF12,  B_MOTOR_UART=PC4,\n\nA_MOTOR_EN=PF15,  A_MOTOR_STEP=PG0,  A_MOTOR_DIR=PG1,  A_MOTOR_UART=PD11,\n\nEXTRUDER_EN=PG5,  EXTRUDER_STEP=PF11,  EXTRUDER_DIR=PG3,  EXTRUDER_UART=PC6,\n\n\n\nZ_ZERO_EN=PF1,  Z_ZERO_STEP=PC13,  Z_ZERO_DIR=PF0,  Z_ZERO_UART=PE4,\n\nZ_ONE_EN=PD4,  Z_ONE_STEP=PE2,  Z_ONE_DIR=PE3,  Z_ONE_UART=PE1,\n\nZ_TWO_EN=PE0,  Z_TWO_STEP=PE6,  Z_TWO_DIR=PA14, Z_TWO_UART=PD3,\n\n\n\nHEATER_BED=PA3, HEATER_HE=PA2, HEATER_LED=PB10,\n\nTEMP_BED=PF3, TEMP_HE=PF4, TEMP_CHM=PF5,\n\nBAY_1=PD12, BEDFAN=PA8, NMFAN=PE5, BUZZ=PD15,\n\nENDSTOP_Z=PG10,  ENDSTOP_X=PG6,  ENDSTOP_Y=PG9, PROBE=PG13, BTTFS=PG14, RGBLED=PB0'}, 'stepper_z': {'endstop_pin': 'probe:z_virtual_endstop', 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'enable_pin': '!Z_ZERO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200', 'position_max': '200', 'position_min': '-10', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'probe': {'pin': 'nhk:gpio10', 'z_offset': '6.445', 'x_offset': '0', 'y_offset': '19.75', 'speed': '8.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.0075', 'samples_tolerance_retries': '3'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '120', 'retries': '3', 'retry_tolerance': '0.0075', 'horizontal_move_z': '10'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '8', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'probe_count': '5,5', 'zero_reference_position': '150, 150', 'algorithm': 'bicubic', 'fade_start': '0.6', 'fade_end': '10', 'fade_target': '0'}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': '3', 'color_order': 'RGBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'stepper_x': {'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'enable_pin': '!B_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true', 'endstop_pin': 'nhk:gpio12'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'enable_pin': '!A_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'ENDSTOP_Y', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'interpolate': 'false', 'run_current': '0.9', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'enable_pin': '!Z_ONE_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'enable_pin': '!Z_TWO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00'}, 'output_pin act_led': {'pin': '!nhk:gpio8'}, 'adxl345': {'cs_pin': 'nhk:gpio21', 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_mosi_pin': 'nhk:gpio20', 'spi_software_miso_pin': 'nhk:gpio19'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n155, 155, 20'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor Nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'sensor_pin': 'nhk:gpio26', 'pullup_resistor': '2200', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'filament_motion_sensor filament_sensor': {'detection_length': '14', 'extruder': 'extruder', 'switch_pin': '^BTTFS', 'pause_on_runout': 'True', 'insert_gcode': '\nNozzle_ON', 'runout_gcode': '\nBEEP_ERROR\nPAUSE'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_OFF': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_ON': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1'}, 'gcode_macro _AIR_FILTER_VARIABLES': {'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1', 'gcode': ''}, 'gcode_macro RESET_AIR_FILTER': {'description': 'Resets the air-filter replacement timer', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }'}, 'gcode_macro QUERY_AIR_FILTER': {'description': 'Displays the amount of time the air filter has run since it was last reset.', 'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }'}, 'delayed_gcode _AIR_FILTER_TIMER': {'initial_duration': '1', 'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1"}, 'delayed_gcode _AIR_FILTER_FLUSH_TIMER': {'initial_duration': '300', 'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300"}, 'gcode_macro HEATSOAKER': {'description': 'HeatSoak for an Hour', 'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999'}, 'gcode_macro BEEP': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}'}, 'gcode_macro BEEP_SUCCESS': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000'}, 'gcode_macro BEEP_ERROR': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100'}, 'gcode_macro CG28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CHOME': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CENTER_ACCURACY': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY'}, 'gcode_macro Lights_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro Lights_ON': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25'}, 'gcode_macro PID_HOTEND': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260'}, 'gcode_macro PID_BED': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110'}, 'gcode_macro MANUAL_FLOW_CALIBRATION': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'delayed_gcode HEATSOAK_DELAY': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}'}, 'gcode_macro HEATSOAK_TIMER': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}'}, 'gcode_macro PARK_FRONT': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT'}, 'gcode_macro PARK_FRONT_LOW': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW'}, 'gcode_macro PARK_REAR': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR'}, 'gcode_macro PARK_CENTER': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER'}, 'gcode_macro PARK_BED': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED'}, 'gcode_macro FORCE_BED_DOWN': {'description': 'Force move bed down without homing', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_UP': {'description': 'Force move bed down without homing.', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_LOCK': {'description': 'Active Z steppers to lock down the bed, Without Homing', 'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90'}, 'gcode_macro FORCE_BED_UNLOCK': {'description': 'Unlocks the Bed', 'gcode': '\nM84'}, 'delayed_gcode FILTER_AIR_STOP': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}'}, 'gcode_macro PRIME_BLOB': {'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.', 'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state'}, 'gcode_macro RINGING_TOWER': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_MZV': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_EI': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro PRIMING': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107'}, 'gcode_macro CLEAN': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro Z_TILT_ADJUST': {'rename_existing': '_Z_TILT_ADJUST', 'description': '', 'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro Smart_Park': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'exclude_object': {}, 'skew_correction': {}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '10000', 'max_z_velocity': '15', 'max_z_accel': '50', 'square_corner_velocity': '5.0'}, 'input_shaper': {'shaper_freq_x': '58.8', 'shaper_type_x': 'zv', 'shaper_freq_y': '43.4', 'shaper_type_y': 'mzv'}, 'bed_mesh default': {'version': '1', 'points': '\n0.048750, 0.068750, 0.040000, 0.078750, 0.070000\n0.050000, 0.067500, 0.053750, 0.063750, 0.090000\n0.006250, 0.036250, 0.000000, 0.045000, 0.075000\n0.021250, 0.082500, 0.071250, 0.081250, 0.098750\n-0.025000, 0.068750, 0.046250, 0.088750, 0.078750', 'tension': '0.2', 'min_x': '40.0', 'algo': 'bicubic', 'y_count': '5', 'mesh_y_pps': '2', 'min_y': '40.0', 'x_count': '5', 'max_y': '260.0', 'mesh_x_pps': '2', 'max_x': '260.0'}, 'skew_correction my_skew_profile': {'xy_skew': '-0.000802972249612', 'xz_skew': '0.0', 'yz_skew': '0.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': '\\\\'}, 'gcode_macro cancel_print': {'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}', 'rename_existing': 'BASE_PAUSE', 'description': 'Pauses Print'}, 'gcode_macro resume': {'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'rename_existing': 'BASE_RESUME', 'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro polylite_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026', 'description': 'G-Code macro'}, 'gcode_macro polylite_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro sparta_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325', 'description': 'G-Code macro'}, 'gcode_macro sparta_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300', 'description': 'G-Code macro'}, 'gcode_macro sparta_purple': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_abs': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polylite_yellow_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro filament_reset': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro abs_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_reset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro clean_filament_cold_pull': {'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0', 'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince'}, 'gcode_macro manual_clean': {'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0', 'description': 'Grab a Brush ready, Start Scrubbing!'}, 'gcode_macro load_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro load_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro polyterra_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031', 'description': 'G-Code macro'}, 'gcode_macro polyterra_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro polyterra_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550', 'description': 'G-Code macro'}, 'gcode_macro polyterra_candy': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035', 'description': 'G-Code macro'}, 'gcode_macro polyterra_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polyterra_blue': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445', 'description': 'G-Code macro'}, 'gcode_macro polyterra_lav': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054', 'description': 'G-Code macro'}, 'gcode_macro ziro_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252', 'description': 'G-Code macro'}, 'gcode_macro jessie_tan': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029', 'description': 'G-Code macro'}, 'gcode_macro sunlu_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER', 'description': 'Run standard input shaper test for all axes'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS', 'description': 'Run custom demi-axe test to analyze belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400', 'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations'}, 'gcode_macro xybelt_tension': {'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }', 'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': 300.0, 'verbose': True}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_BED', 'min_temp': -20.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.5, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 33.946, 'pid_ki': 0.997, 'pid_kd': 288.961, 'heater_pin': 'HEATER_BED', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'tmc2209 extruder': {'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.1, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'PT1000', 'pullup_resistor': 2200.0, 'sensor_pin': 'nhk:gpio29', 'min_temp': 10.0, 'max_temp': 280.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.239, 'pid_ki': 1.965, 'pid_kd': 87.574, 'heater_pin': 'nhk:gpio9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'nhk:gpio23', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!nhk:gpio24', 'rotation_distance': 47.088, 'full_steps_per_rotation': 200, 'gear_ratio': [[9.0, 1.0]], 'enable_pin': '!nhk:gpio25'}, 'firmware_retraction': {'retract_length': 0.5, 'retract_speed': 30.0, 'unretract_extra_length': 0.0, 'unretract_speed': 30.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'nhk:gpio5', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'nhk:gpio6'}, 'output_pin caselight': {'pwm': True, 'pin': 'HEATER_LED', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.15, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_CHM', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'temperature_sensor pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'heater_fan vent': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BAY_1', 'fan_speed': 0.4}, 'fan_generic boombox': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'NMFAN'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BEDFAN'}, 'output_pin beeper': {'pwm': True, 'pin': 'BUZZ', 'cycle_time': 0.0005, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'temperature_sensor nitehawkchip': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'nhk', 'min_temp': 0.0, 'max_temp': 100.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['B_MOTOR_EN', 'PF14'], ['B_MOTOR_STEP', 'PF13'], ['B_MOTOR_DIR', 'PF12'], ['B_MOTOR_UART', 'PC4'], ['A_MOTOR_EN', 'PF15'], ['A_MOTOR_STEP', 'PG0'], ['A_MOTOR_DIR', 'PG1'], ['A_MOTOR_UART', 'PD11'], ['EXTRUDER_EN', 'PG5'], ['EXTRUDER_STEP', 'PF11'], ['EXTRUDER_DIR', 'PG3'], ['EXTRUDER_UART', 'PC6'], ['Z_ZERO_EN', 'PF1'], ['Z_ZERO_STEP', 'PC13'], ['Z_ZERO_DIR', 'PF0'], ['Z_ZERO_UART', 'PE4'], ['Z_ONE_EN', 'PD4'], ['Z_ONE_STEP', 'PE2'], ['Z_ONE_DIR', 'PE3'], ['Z_ONE_UART', 'PE1'], ['Z_TWO_EN', 'PE0'], ['Z_TWO_STEP', 'PE6'], ['Z_TWO_DIR', 'PA14'], ['Z_TWO_UART', 'PD3'], ['HEATER_BED', 'PA3'], ['HEATER_HE', 'PA2'], ['HEATER_LED', 'PB10'], ['TEMP_BED', 'PF3'], ['TEMP_HE', 'PF4'], ['TEMP_CHM', 'PF5'], ['BAY_1', 'PD12'], ['BEDFAN', 'PA8'], ['NMFAN', 'PE5'], ['BUZZ', 'PD15'], ['ENDSTOP_Z', 'PG10'], ['ENDSTOP_X', 'PG6'], ['ENDSTOP_Y', 'PG9'], ['PROBE', 'PG13'], ['BTTFS', 'PG14'], ['RGBLED', 'PB0']]}, 'probe': {'z_offset': 6.445, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'nhk:gpio10', 'speed': 8.0, 'lift_speed': 8.0, 'x_offset': 0.0, 'y_offset': 19.75, 'samples': 3, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.0075, 'samples_tolerance_retries': 3}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 3, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 120.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [150.0, 150.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 8.0, 'speed': 150.0, 'fade_start': 0.6, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.04875, 0.06875, 0.04, 0.07875, 0.07], [0.05, 0.0675, 0.05375, 0.06375, 0.09], [0.00625, 0.03625, 0.0, 0.045, 0.075], [0.02125, 0.0825, 0.07125, 0.08125, 0.09875], [-0.025, 0.06875, 0.04625, 0.08875, 0.07875]], 'min_x': 40.0, 'max_x': 260.0, 'min_y': 40.0, 'max_y': 260.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': 3, 'color_order': ['RGBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!B_MOTOR_EN', 'endstop_pin': 'nhk:gpio12', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'uart_address': 0, 'run_current': 0.9, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!A_MOTOR_EN', 'endstop_pin': 'ENDSTOP_Y', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ZERO_EN', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 200.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ONE_EN'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_TWO_EN'}, 'output_pin act_led': {'pwm': False, 'pin': '!nhk:gpio8', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'nhk:gpio21', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_miso_pin': 'nhk:gpio19', 'spi_software_mosi_pin': 'nhk:gpio20'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[155.0, 155.0, 20.0]], 'accel_chip': 'adxl345'}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'pullup_resistor': 2200.0, 'inline_resistor': 0.0, 'sensor_pin': 'nhk:gpio26', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'filament_motion_sensor filament_sensor': {'switch_pin': '^BTTFS', 'extruder': 'extruder', 'detection_length': 14.0, 'pause_on_runout': True, 'runout_gcode': '\nBEEP_ERROR\nPAUSE', 'insert_gcode': '\nNozzle_ON', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro fs_off': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro fs_on': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro _air_filter_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1'}, 'gcode_macro reset_air_filter': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }', 'description': 'Resets the air-filter replacement timer'}, 'gcode_macro query_air_filter': {'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }', 'description': 'Displays the amount of time the air filter has run since it was last reset.'}, 'delayed_gcode _air_filter_timer': {'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1", 'initial_duration': 1.0}, 'delayed_gcode _air_filter_flush_timer': {'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300", 'initial_duration': 300.0}, 'gcode_macro heatsoaker': {'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999', 'description': 'HeatSoak for an Hour'}, 'gcode_macro beep': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro beep_success': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000', 'description': 'G-Code macro'}, 'gcode_macro beep_error': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100', 'description': 'G-Code macro'}, 'gcode_macro cg28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro chome': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro center_accuracy': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro lights_on': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25', 'description': 'G-Code macro'}, 'gcode_macro pid_hotend': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260', 'description': 'G-Code macro'}, 'gcode_macro pid_bed': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110', 'description': 'G-Code macro'}, 'gcode_macro manual_flow_calibration': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'delayed_gcode heatsoak_delay': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro heatsoak_timer': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}', 'description': 'G-Code macro'}, 'gcode_macro park_front': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT', 'description': 'G-Code macro'}, 'gcode_macro park_front_low': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW', 'description': 'G-Code macro'}, 'gcode_macro park_rear': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR', 'description': 'G-Code macro'}, 'gcode_macro park_center': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER', 'description': 'G-Code macro'}, 'gcode_macro park_bed': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED', 'description': 'G-Code macro'}, 'gcode_macro force_bed_down': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing'}, 'gcode_macro force_bed_up': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing.'}, 'gcode_macro force_bed_lock': {'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90', 'description': 'Active Z steppers to lock down the bed, Without Homing'}, 'gcode_macro force_bed_unlock': {'gcode': '\nM84', 'description': 'Unlocks the Bed'}, 'delayed_gcode filter_air_stop': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro print_end': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro prime_blob': {'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state', 'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.'}, 'gcode_macro ringing_tower': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_mzv': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_ei': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro priming': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000', 'description': 'G-Code macro'}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount'}, 'gcode_macro z_tilt_adjust': {'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0', 'rename_existing': '_Z_TILT_ADJUST', 'description': ''}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'skew_correction my_skew_profile': {'xy_skew': -0.000802972249612, 'xz_skew': 0.0, 'yz_skew': 0.0}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'zv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 58.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 43.4}, 'printer': {'max_velocity': 300.0, 'max_accel': 10000.0, 'max_accel_to_decel': 5000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 50.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-08 00:02:18,073 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-08 00:02:18,074 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-08 00:02:18,074 [printer.py:reinit()] - # Extruders: 1
2024-02-08 00:02:18,074 [printer.py:reinit()] - # Temperature devices: 6
2024-02-08 00:02:18,074 [printer.py:reinit()] - # Fans: 5
2024-02-08 00:02:18,075 [printer.py:reinit()] - # Output pins: 3
2024-02-08 00:02:18,075 [printer.py:reinit()] - # Leds: 1
2024-02-08 00:02:18,086 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-08 00:02:18,088 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-08 00:02:18,366 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor Pi&temperature_sensor Octopus&temperature_sensor NitehawkChip&temperature_sensor Nitehawk&fan&fan_generic BoomBox&fan_generic BedFans&heater_fan hotend_fan&heater_fan Vent&filament_motion_sensor filament_sensor&output_pin caselight&output_pin beeper&output_pin act_led&neopixel sb_leds
2024-02-08 00:02:18,370 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-08 00:02:18,370 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-08 00:02:18,371 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-08 00:02:18,371 [screen.py:init_klipper()] - Printer initialized
2024-02-08 00:02:18,371 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-08 00:02:18,371 [printer.py:change_state()] - Adding callback for state: startup
2024-02-08 00:02:19,055 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-08 00:02:19,055 [printer.py:change_state()] - Adding callback for state: ready
2024-02-08 00:02:19,059 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 00:02:19,059 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 00:02:19,120 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-08 00:02:19,137 [main_menu.py:add_device()] - Adding device: extruder
2024-02-08 00:02:19,141 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-08 00:02:19,146 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-08 00:02:19,146 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-08 00:02:19,146 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-08 00:02:19,146 [main_menu.py:add_device()] - Adding device: temperature_sensor NitehawkChip
2024-02-08 00:02:19,146 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-08 00:02:19,171 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-08 00:02:19,189 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-08 00:02:19,192 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor Pi', 'temperature_sensor Octopus', 'temperature_sensor Nitehawk', 'extruder']
2024-02-08 00:02:19,199 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-08 00:02:19,200 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-08 00:02:42,016 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 00:06:52,679 [files.py:_callback()] - Error in getting metadata for .thumbs/flowrate_0_ABS_27m9s-300x300.png. Retrying in 6 seconds
2024-02-08 00:06:52,681 [files.py:_callback()] - Error in getting metadata for .thumbs/flowrate_0_ABS_27m9s-32x32.png. Retrying in 6 seconds
2024-02-08 00:06:52,683 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 00:06:52,704 [screen.py:wake_screen()] - Screen wake up
2024-02-08 00:06:53,096 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_PREP"
2024-02-08 00:06:53,153 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-08 00:06:53,153 [printer.py:change_state()] - Adding callback for state: printing
2024-02-08 00:06:53,156 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 00:06:53,156 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 00:06:53,220 [job_status.py:create_status_grid()] - Titlebar items: ['']
2024-02-08 00:06:53,246 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-08 00:06:53,251 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-08 00:06:53,261 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-02-08 00:06:53,263 [job_status.py:show_file_thumbnail()] - flowrate_0_ABS_27m9s.gcode
2024-02-08 00:06:53,263 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-02-08 00:06:53,300 [job_status.py:update_file_metadata()] - Update Metadata. File: flowrate_0_ABS_27m9s.gcode Size: 553504
2024-02-08 00:06:53,305 [job_status.py:show_file_thumbnail()] - flowrate_0_ABS_27m9s.gcode
2024-02-08 00:06:53,306 [files.py:remove_file_callback()] - removing callback <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 00:06:53,306 [job_status.py:update_file_metadata()] - Update Metadata. File: flowrate_0_ABS_27m9s.gcode Size: 553504
2024-02-08 00:06:53,311 [job_status.py:show_file_thumbnail()] - flowrate_0_ABS_27m9s.gcode
2024-02-08 00:06:53,312 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 00:11:54,016 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 00:15:59,608 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 00:15:59,642 [screen.py:wake_screen()] - Screen wake up
2024-02-08 00:16:00,043 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_ON"
2024-02-08 00:21:01,015 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 00:45:16,932 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 00:45:16,961 [screen.py:wake_screen()] - Screen wake up
2024-02-08 00:45:17,362 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_OFF"
2024-02-08 00:45:20,794 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-08 00:45:20,794 [printer.py:change_state()] - Adding callback for state: ready
2024-02-08 00:45:20,802 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-02-08 00:45:47,130 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'standby'
2024-02-08 00:50:18,016 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 00:54:58,496 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 00:54:58,518 [screen.py:wake_screen()] - Screen wake up
2024-02-08 00:54:58,912 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_PREP"
2024-02-08 00:54:58,951 [files.py:_callback()] - Error in getting metadata for .thumbs/Cube_ABS_11m59s-300x300.png. Retrying in 6 seconds
2024-02-08 00:54:58,952 [files.py:_callback()] - Error in getting metadata for .thumbs/Cube_ABS_11m59s-32x32.png. Retrying in 6 seconds
2024-02-08 00:54:58,953 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-08 00:54:58,953 [printer.py:change_state()] - Adding callback for state: printing
2024-02-08 00:54:58,956 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-08 00:54:58,961 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-02-08 00:54:58,961 [job_status.py:show_file_thumbnail()] - Cube_ABS_11m59s.gcode
2024-02-08 00:54:58,961 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-02-08 00:54:58,970 [files.py:remove_file_callback()] - removing callback <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 00:54:58,970 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 00:54:59,034 [job_status.py:create_status_grid()] - Titlebar items: ['']
2024-02-08 00:54:59,058 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-08 00:54:59,063 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-08 00:54:59,072 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-02-08 00:54:59,073 [job_status.py:show_file_thumbnail()] - Cube_ABS_11m59s.gcode
2024-02-08 00:54:59,073 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-02-08 00:54:59,112 [job_status.py:update_file_metadata()] - Update Metadata. File: Cube_ABS_11m59s.gcode Size: 163600
2024-02-08 00:54:59,117 [job_status.py:show_file_thumbnail()] - Cube_ABS_11m59s.gcode
2024-02-08 00:54:59,118 [files.py:remove_file_callback()] - removing callback <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 00:54:59,119 [job_status.py:update_file_metadata()] - Update Metadata. File: Cube_ABS_11m59s.gcode Size: 163600
2024-02-08 00:54:59,123 [job_status.py:show_file_thumbnail()] - Cube_ABS_11m59s.gcode
2024-02-08 00:54:59,125 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 00:54:59,136 [job_status.py:update_file_metadata()] - Update Metadata. File: Cube_ABS_11m59s.gcode Size: 163600
2024-02-08 00:54:59,141 [job_status.py:show_file_thumbnail()] - Cube_ABS_11m59s.gcode
2024-02-08 00:54:59,142 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 00:59:59,016 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 01:03:25,035 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 01:03:25,076 [screen.py:wake_screen()] - Screen wake up
2024-02-08 01:03:25,476 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_ON"
2024-02-08 01:08:26,015 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 01:16:03,000 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 01:16:03,024 [screen.py:wake_screen()] - Screen wake up
2024-02-08 01:16:03,421 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_OFF"
2024-02-08 01:16:08,539 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-08 01:16:08,540 [printer.py:change_state()] - Adding callback for state: ready
2024-02-08 01:16:08,558 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-02-08 01:18:10,788 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-08 01:18:10,789 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-08 01:18:10,790 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-08 01:18:10,790 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-08 01:18:10,793 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 01:18:10,793 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 01:18:10,864 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-08 01:18:14,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-08 01:18:14,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-08 01:18:14,028 [printer.py:configure_cameras()] - Cameras: []
2024-02-08 01:18:14,028 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-08 01:18:14,037 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-08 01:18:14,060 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-08 01:18:14,065 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_prefix': '\\\\'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pauses Print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'gcode_macro POLYLITE_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026'}, 'gcode_macro POLYLITE_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro SPARTA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325'}, 'gcode_macro SPARTA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300'}, 'gcode_macro SPARTA_PURPLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro POLYLITE_BLACK_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510'}, 'gcode_macro POLYLITE_BLACK_ABS': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYLITE_YELLOW_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro FILAMENT_RESET': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro ABS_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0'}, 'gcode_macro PRINT_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0'}, 'gcode_macro PRINT_RESET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0'}, 'gcode_macro Clean_Filament_Cold_Pull': {'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince', 'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0'}, 'gcode_macro Manual_Clean': {'description': 'Grab a Brush ready, Start Scrubbing!', 'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0'}, 'gcode_macro LOAD_FILAMENT_PLA': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro LOAD_FILAMENT_ABS': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_PLA': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_ABS': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro POLYTERRA_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031'}, 'gcode_macro POLYTERRA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro POLYTERRA_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550'}, 'gcode_macro POLYTERRA_CANDY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035'}, 'gcode_macro POLYTERRA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYTERRA_BLUE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445'}, 'gcode_macro POLYTERRA_LAV': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054'}, 'gcode_macro ZIRO_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252'}, 'gcode_macro JESSIE_TAN': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029'}, 'gcode_macro SUNLU_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066'}, 'gcode_macro M600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Run standard input shaper test for all axes', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Run custom demi-axe test to analyze belts on CoreXY printers', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations', 'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400'}, 'gcode_macro XYBelt_Tension': {'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115', 'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': '300.0', 'verbose': 'True'}, 'heater_bed': {'pwm_cycle_time': '0.0166', 'heater_pin': 'HEATER_BED', 'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_BED', 'max_power': '0.5', 'min_temp': '-20', 'max_temp': '120', 'control': 'pid', 'pid_kp': '33.946', 'pid_ki': '0.997', 'pid_kd': '288.961'}, 'extruder': {'step_pin': 'nhk:gpio23', 'dir_pin': '!nhk:gpio24', 'enable_pin': '!nhk:gpio25', 'rotation_distance': '47.088', 'gear_ratio': '9:1', 'microsteps': '16', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'nhk:gpio9', 'sensor_pin': 'nhk:gpio29', 'pullup_resistor': '2200', 'sensor_type': 'PT1000', 'min_temp': '10', 'max_temp': '280', 'max_power': '1.0', 'min_extrude_temp': '10', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'control': 'pid', 'pid_kp': '26.239', 'pid_ki': '1.965', 'pid_kd': '87.574'}, 'tmc2209 extruder': {'stealthchop_threshold': '0', 'run_current': '0.6', 'interpolate': 'false', 'sense_resistor': '0.100', 'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1'}, 'firmware_retraction': {'retract_length': '0.5', 'retract_speed': '30', 'unretract_speed': '30'}, 'heater_fan hotend_fan': {'pin': 'nhk:gpio5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'nhk:gpio6', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.010'}, 'output_pin caselight': {'pin': 'HEATER_LED', 'pwm': 'true', 'cycle_time': '0.01', 'value': '0.15'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_CHM', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'temperature_sensor Pi': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'heater_fan Vent': {'pin': 'BAY_1', 'max_power': '1', 'kick_start_time': '0.5', 'shutdown_speed': '0', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '0.40', 'cycle_time': '0.008'}, 'fan_generic BoomBox': {'pin': 'NMFAN', 'shutdown_speed': '0.0', 'hardware_pwm': 'False', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.008'}, 'fan_generic BedFans': {'pin': 'BEDFAN', 'kick_start_time': '0.5', 'cycle_time': '0.008'}, 'output_pin beeper': {'pin': 'BUZZ', 'value': '0', 'shutdown_value': '0', 'pwm': 'True', 'cycle_time': '0.0005'}, 'temperature_sensor NitehawkChip': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'nhk', 'min_temp': '0', 'max_temp': '100'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00'}, 'board_pins': {'aliases': '\n\n\nB_MOTOR_EN=PF14,  B_MOTOR_STEP=PF13,  B_MOTOR_DIR=PF12,  B_MOTOR_UART=PC4,\n\nA_MOTOR_EN=PF15,  A_MOTOR_STEP=PG0,  A_MOTOR_DIR=PG1,  A_MOTOR_UART=PD11,\n\nEXTRUDER_EN=PG5,  EXTRUDER_STEP=PF11,  EXTRUDER_DIR=PG3,  EXTRUDER_UART=PC6,\n\n\n\nZ_ZERO_EN=PF1,  Z_ZERO_STEP=PC13,  Z_ZERO_DIR=PF0,  Z_ZERO_UART=PE4,\n\nZ_ONE_EN=PD4,  Z_ONE_STEP=PE2,  Z_ONE_DIR=PE3,  Z_ONE_UART=PE1,\n\nZ_TWO_EN=PE0,  Z_TWO_STEP=PE6,  Z_TWO_DIR=PA14, Z_TWO_UART=PD3,\n\n\n\nHEATER_BED=PA3, HEATER_HE=PA2, HEATER_LED=PB10,\n\nTEMP_BED=PF3, TEMP_HE=PF4, TEMP_CHM=PF5,\n\nBAY_1=PD12, BEDFAN=PA8, NMFAN=PE5, BUZZ=PD15,\n\nENDSTOP_Z=PG10,  ENDSTOP_X=PG6,  ENDSTOP_Y=PG9, BTTFS=PG15'}, 'stepper_z': {'endstop_pin': 'probe:z_virtual_endstop', 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'enable_pin': '!Z_ZERO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200', 'position_max': '200', 'position_min': '-10', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'probe': {'pin': 'nhk:gpio10', 'z_offset': '6.445', 'x_offset': '0', 'y_offset': '19.75', 'speed': '8.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.0075', 'samples_tolerance_retries': '3'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '120', 'retries': '3', 'retry_tolerance': '0.0075', 'horizontal_move_z': '10'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '8', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'probe_count': '5,5', 'zero_reference_position': '150, 150', 'algorithm': 'bicubic', 'fade_start': '0.6', 'fade_end': '10', 'fade_target': '0'}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': '3', 'color_order': 'RGBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'stepper_x': {'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'enable_pin': '!B_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true', 'endstop_pin': 'nhk:gpio12'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'interpolate': 'false', 'run_current': '1', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'enable_pin': '!A_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'ENDSTOP_Y', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'interpolate': 'false', 'run_current': '1', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'enable_pin': '!Z_ONE_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'enable_pin': '!Z_TWO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00'}, 'output_pin act_led': {'pin': '!nhk:gpio8'}, 'adxl345': {'cs_pin': 'nhk:gpio21', 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_mosi_pin': 'nhk:gpio20', 'spi_software_miso_pin': 'nhk:gpio19'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n155, 155, 20'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor Nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'sensor_pin': 'nhk:gpio26', 'pullup_resistor': '2200', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'filament_motion_sensor filament_sensor': {'detection_length': '14', 'extruder': 'extruder', 'switch_pin': '^BTTFS', 'pause_on_runout': 'True', 'insert_gcode': '\nNozzle_ON', 'runout_gcode': '\nBEEP_ERROR\nPAUSE'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_OFF': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_ON': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1'}, 'gcode_macro _AIR_FILTER_VARIABLES': {'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1', 'gcode': ''}, 'gcode_macro RESET_AIR_FILTER': {'description': 'Resets the air-filter replacement timer', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }'}, 'gcode_macro QUERY_AIR_FILTER': {'description': 'Displays the amount of time the air filter has run since it was last reset.', 'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }'}, 'delayed_gcode _AIR_FILTER_TIMER': {'initial_duration': '1', 'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1"}, 'delayed_gcode _AIR_FILTER_FLUSH_TIMER': {'initial_duration': '300', 'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300"}, 'gcode_macro HEATSOAKER': {'description': 'HeatSoak for an Hour', 'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999'}, 'gcode_macro BEEP': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}'}, 'gcode_macro BEEP_SUCCESS': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000'}, 'gcode_macro BEEP_ERROR': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100'}, 'gcode_macro CG28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CHOME': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CENTER_ACCURACY': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY'}, 'gcode_macro Lights_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro Lights_ON': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25'}, 'gcode_macro PID_HOTEND': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260'}, 'gcode_macro PID_BED': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110'}, 'gcode_macro MANUAL_FLOW_CALIBRATION': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'delayed_gcode HEATSOAK_DELAY': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}'}, 'gcode_macro HEATSOAK_TIMER': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}'}, 'gcode_macro PARK_FRONT': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT'}, 'gcode_macro PARK_FRONT_LOW': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW'}, 'gcode_macro PARK_REAR': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR'}, 'gcode_macro PARK_CENTER': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER'}, 'gcode_macro PARK_BED': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED'}, 'gcode_macro FORCE_BED_DOWN': {'description': 'Force move bed down without homing', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_UP': {'description': 'Force move bed down without homing.', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_LOCK': {'description': 'Active Z steppers to lock down the bed, Without Homing', 'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90'}, 'gcode_macro FORCE_BED_UNLOCK': {'description': 'Unlocks the Bed', 'gcode': '\nM84'}, 'delayed_gcode FILTER_AIR_STOP': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}'}, 'gcode_macro PRIME_BLOB': {'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.', 'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state'}, 'gcode_macro RINGING_TOWER': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_MZV': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_EI': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro PRIMING': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107'}, 'gcode_macro CLEAN': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro Z_TILT_ADJUST': {'rename_existing': '_Z_TILT_ADJUST', 'description': '', 'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro Smart_Park': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'exclude_object': {}, 'skew_correction': {}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '10000', 'max_z_velocity': '15', 'max_z_accel': '50', 'square_corner_velocity': '5.0'}, 'input_shaper': {'shaper_freq_x': '58.8', 'shaper_type_x': 'zv', 'shaper_freq_y': '43.4', 'shaper_type_y': 'mzv'}, 'bed_mesh default': {'version': '1', 'points': '\n0.048750, 0.068750, 0.040000, 0.078750, 0.070000\n0.050000, 0.067500, 0.053750, 0.063750, 0.090000\n0.006250, 0.036250, 0.000000, 0.045000, 0.075000\n0.021250, 0.082500, 0.071250, 0.081250, 0.098750\n-0.025000, 0.068750, 0.046250, 0.088750, 0.078750', 'tension': '0.2', 'min_x': '40.0', 'algo': 'bicubic', 'y_count': '5', 'mesh_y_pps': '2', 'min_y': '40.0', 'x_count': '5', 'max_y': '260.0', 'mesh_x_pps': '2', 'max_x': '260.0'}, 'skew_correction my_skew_profile': {'xy_skew': '-0.000802972249612', 'xz_skew': '0.0', 'yz_skew': '0.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': '\\\\'}, 'gcode_macro cancel_print': {'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}', 'rename_existing': 'BASE_PAUSE', 'description': 'Pauses Print'}, 'gcode_macro resume': {'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'rename_existing': 'BASE_RESUME', 'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro polylite_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026', 'description': 'G-Code macro'}, 'gcode_macro polylite_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro sparta_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325', 'description': 'G-Code macro'}, 'gcode_macro sparta_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300', 'description': 'G-Code macro'}, 'gcode_macro sparta_purple': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_abs': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polylite_yellow_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro filament_reset': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro abs_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_reset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro clean_filament_cold_pull': {'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0', 'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince'}, 'gcode_macro manual_clean': {'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0', 'description': 'Grab a Brush ready, Start Scrubbing!'}, 'gcode_macro load_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro load_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro polyterra_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031', 'description': 'G-Code macro'}, 'gcode_macro polyterra_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro polyterra_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550', 'description': 'G-Code macro'}, 'gcode_macro polyterra_candy': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035', 'description': 'G-Code macro'}, 'gcode_macro polyterra_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polyterra_blue': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445', 'description': 'G-Code macro'}, 'gcode_macro polyterra_lav': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054', 'description': 'G-Code macro'}, 'gcode_macro ziro_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252', 'description': 'G-Code macro'}, 'gcode_macro jessie_tan': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029', 'description': 'G-Code macro'}, 'gcode_macro sunlu_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER', 'description': 'Run standard input shaper test for all axes'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS', 'description': 'Run custom demi-axe test to analyze belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400', 'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations'}, 'gcode_macro xybelt_tension': {'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }', 'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': 300.0, 'verbose': True}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_BED', 'min_temp': -20.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.5, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 33.946, 'pid_ki': 0.997, 'pid_kd': 288.961, 'heater_pin': 'HEATER_BED', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'tmc2209 extruder': {'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.1, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'PT1000', 'pullup_resistor': 2200.0, 'sensor_pin': 'nhk:gpio29', 'min_temp': 10.0, 'max_temp': 280.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.239, 'pid_ki': 1.965, 'pid_kd': 87.574, 'heater_pin': 'nhk:gpio9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'nhk:gpio23', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!nhk:gpio24', 'rotation_distance': 47.088, 'full_steps_per_rotation': 200, 'gear_ratio': [[9.0, 1.0]], 'enable_pin': '!nhk:gpio25'}, 'firmware_retraction': {'retract_length': 0.5, 'retract_speed': 30.0, 'unretract_extra_length': 0.0, 'unretract_speed': 30.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'nhk:gpio5', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'nhk:gpio6'}, 'output_pin caselight': {'pwm': True, 'pin': 'HEATER_LED', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.15, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_CHM', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'temperature_sensor pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'heater_fan vent': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BAY_1', 'fan_speed': 0.4}, 'fan_generic boombox': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'NMFAN'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BEDFAN'}, 'output_pin beeper': {'pwm': True, 'pin': 'BUZZ', 'cycle_time': 0.0005, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'temperature_sensor nitehawkchip': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'nhk', 'min_temp': 0.0, 'max_temp': 100.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['B_MOTOR_EN', 'PF14'], ['B_MOTOR_STEP', 'PF13'], ['B_MOTOR_DIR', 'PF12'], ['B_MOTOR_UART', 'PC4'], ['A_MOTOR_EN', 'PF15'], ['A_MOTOR_STEP', 'PG0'], ['A_MOTOR_DIR', 'PG1'], ['A_MOTOR_UART', 'PD11'], ['EXTRUDER_EN', 'PG5'], ['EXTRUDER_STEP', 'PF11'], ['EXTRUDER_DIR', 'PG3'], ['EXTRUDER_UART', 'PC6'], ['Z_ZERO_EN', 'PF1'], ['Z_ZERO_STEP', 'PC13'], ['Z_ZERO_DIR', 'PF0'], ['Z_ZERO_UART', 'PE4'], ['Z_ONE_EN', 'PD4'], ['Z_ONE_STEP', 'PE2'], ['Z_ONE_DIR', 'PE3'], ['Z_ONE_UART', 'PE1'], ['Z_TWO_EN', 'PE0'], ['Z_TWO_STEP', 'PE6'], ['Z_TWO_DIR', 'PA14'], ['Z_TWO_UART', 'PD3'], ['HEATER_BED', 'PA3'], ['HEATER_HE', 'PA2'], ['HEATER_LED', 'PB10'], ['TEMP_BED', 'PF3'], ['TEMP_HE', 'PF4'], ['TEMP_CHM', 'PF5'], ['BAY_1', 'PD12'], ['BEDFAN', 'PA8'], ['NMFAN', 'PE5'], ['BUZZ', 'PD15'], ['ENDSTOP_Z', 'PG10'], ['ENDSTOP_X', 'PG6'], ['ENDSTOP_Y', 'PG9'], ['BTTFS', 'PG15']]}, 'probe': {'z_offset': 6.445, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'nhk:gpio10', 'speed': 8.0, 'lift_speed': 8.0, 'x_offset': 0.0, 'y_offset': 19.75, 'samples': 3, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.0075, 'samples_tolerance_retries': 3}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 3, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 120.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [150.0, 150.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 8.0, 'speed': 150.0, 'fade_start': 0.6, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.04875, 0.06875, 0.04, 0.07875, 0.07], [0.05, 0.0675, 0.05375, 0.06375, 0.09], [0.00625, 0.03625, 0.0, 0.045, 0.075], [0.02125, 0.0825, 0.07125, 0.08125, 0.09875], [-0.025, 0.06875, 0.04625, 0.08875, 0.07875]], 'min_x': 40.0, 'max_x': 260.0, 'min_y': 40.0, 'max_y': 260.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': 3, 'color_order': ['RGBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!B_MOTOR_EN', 'endstop_pin': 'nhk:gpio12', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!A_MOTOR_EN', 'endstop_pin': 'ENDSTOP_Y', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ZERO_EN', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 200.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ONE_EN'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_TWO_EN'}, 'output_pin act_led': {'pwm': False, 'pin': '!nhk:gpio8', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'nhk:gpio21', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_miso_pin': 'nhk:gpio19', 'spi_software_mosi_pin': 'nhk:gpio20'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[155.0, 155.0, 20.0]], 'accel_chip': 'adxl345'}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'pullup_resistor': 2200.0, 'inline_resistor': 0.0, 'sensor_pin': 'nhk:gpio26', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'filament_motion_sensor filament_sensor': {'switch_pin': '^BTTFS', 'extruder': 'extruder', 'detection_length': 14.0, 'pause_on_runout': True, 'runout_gcode': '\nBEEP_ERROR\nPAUSE', 'insert_gcode': '\nNozzle_ON', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro fs_off': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro fs_on': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro _air_filter_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1'}, 'gcode_macro reset_air_filter': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }', 'description': 'Resets the air-filter replacement timer'}, 'gcode_macro query_air_filter': {'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }', 'description': 'Displays the amount of time the air filter has run since it was last reset.'}, 'delayed_gcode _air_filter_timer': {'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1", 'initial_duration': 1.0}, 'delayed_gcode _air_filter_flush_timer': {'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300", 'initial_duration': 300.0}, 'gcode_macro heatsoaker': {'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999', 'description': 'HeatSoak for an Hour'}, 'gcode_macro beep': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro beep_success': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000', 'description': 'G-Code macro'}, 'gcode_macro beep_error': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100', 'description': 'G-Code macro'}, 'gcode_macro cg28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro chome': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro center_accuracy': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro lights_on': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25', 'description': 'G-Code macro'}, 'gcode_macro pid_hotend': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260', 'description': 'G-Code macro'}, 'gcode_macro pid_bed': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110', 'description': 'G-Code macro'}, 'gcode_macro manual_flow_calibration': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'delayed_gcode heatsoak_delay': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro heatsoak_timer': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}', 'description': 'G-Code macro'}, 'gcode_macro park_front': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT', 'description': 'G-Code macro'}, 'gcode_macro park_front_low': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW', 'description': 'G-Code macro'}, 'gcode_macro park_rear': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR', 'description': 'G-Code macro'}, 'gcode_macro park_center': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER', 'description': 'G-Code macro'}, 'gcode_macro park_bed': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED', 'description': 'G-Code macro'}, 'gcode_macro force_bed_down': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing'}, 'gcode_macro force_bed_up': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing.'}, 'gcode_macro force_bed_lock': {'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90', 'description': 'Active Z steppers to lock down the bed, Without Homing'}, 'gcode_macro force_bed_unlock': {'gcode': '\nM84', 'description': 'Unlocks the Bed'}, 'delayed_gcode filter_air_stop': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro print_end': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro prime_blob': {'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state', 'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.'}, 'gcode_macro ringing_tower': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_mzv': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_ei': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro priming': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000', 'description': 'G-Code macro'}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount'}, 'gcode_macro z_tilt_adjust': {'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0', 'rename_existing': '_Z_TILT_ADJUST', 'description': ''}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'skew_correction my_skew_profile': {'xy_skew': -0.000802972249612, 'xz_skew': 0.0, 'yz_skew': 0.0}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'zv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 58.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 43.4}, 'printer': {'max_velocity': 300.0, 'max_accel': 10000.0, 'max_accel_to_decel': 5000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 50.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-08 01:18:14,070 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-08 01:18:14,072 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-08 01:18:14,072 [printer.py:reinit()] - # Extruders: 1
2024-02-08 01:18:14,072 [printer.py:reinit()] - # Temperature devices: 6
2024-02-08 01:18:14,072 [printer.py:reinit()] - # Fans: 5
2024-02-08 01:18:14,072 [printer.py:reinit()] - # Output pins: 3
2024-02-08 01:18:14,072 [printer.py:reinit()] - # Leds: 1
2024-02-08 01:18:14,082 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-08 01:18:14,084 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-08 01:18:14,365 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor Pi&temperature_sensor Octopus&temperature_sensor NitehawkChip&temperature_sensor Nitehawk&fan&fan_generic BoomBox&fan_generic BedFans&heater_fan hotend_fan&heater_fan Vent&filament_motion_sensor filament_sensor&output_pin caselight&output_pin beeper&output_pin act_led&neopixel sb_leds
2024-02-08 01:18:14,368 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-08 01:18:14,368 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-08 01:18:14,369 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-08 01:18:14,369 [screen.py:init_klipper()] - Printer initialized
2024-02-08 01:18:14,369 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-08 01:18:14,370 [printer.py:change_state()] - Adding callback for state: startup
2024-02-08 01:18:15,047 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-08 01:18:15,047 [printer.py:change_state()] - Adding callback for state: ready
2024-02-08 01:18:15,049 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 01:18:15,049 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 01:18:15,110 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-08 01:18:15,128 [main_menu.py:add_device()] - Adding device: extruder
2024-02-08 01:18:15,132 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-08 01:18:15,136 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-08 01:18:15,136 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-08 01:18:15,136 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-08 01:18:15,136 [main_menu.py:add_device()] - Adding device: temperature_sensor NitehawkChip
2024-02-08 01:18:15,136 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-08 01:18:15,162 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-08 01:18:15,182 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-08 01:18:15,186 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor Pi', 'temperature_sensor Octopus', 'temperature_sensor NitehawkChip', 'temperature_sensor Nitehawk', 'extruder']
2024-02-08 01:18:15,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-08 01:18:15,194 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-08 01:21:04,016 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 01:21:28,890 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 01:21:28,912 [screen.py:wake_screen()] - Screen wake up
2024-02-08 01:21:29,308 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_PREP"
2024-02-08 01:21:29,366 [files.py:_callback()] - Error in getting metadata for .thumbs/flat_rectangle_ABS_15m45s-300x300.png. Retrying in 6 seconds
2024-02-08 01:21:29,367 [files.py:_callback()] - Error in getting metadata for .thumbs/flat_rectangle_ABS_15m45s-32x32.png. Retrying in 6 seconds
2024-02-08 01:21:29,368 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-08 01:21:29,368 [printer.py:change_state()] - Adding callback for state: printing
2024-02-08 01:21:29,372 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 01:21:29,372 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 01:21:29,435 [job_status.py:create_status_grid()] - Titlebar items: ['']
2024-02-08 01:21:29,462 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-08 01:21:29,467 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-08 01:21:29,477 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-02-08 01:21:29,478 [job_status.py:show_file_thumbnail()] - flat_rectangle_ABS_15m45s.gcode
2024-02-08 01:21:29,478 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-02-08 01:21:29,517 [job_status.py:update_file_metadata()] - Update Metadata. File: flat_rectangle_ABS_15m45s.gcode Size: 90837
2024-02-08 01:21:29,522 [job_status.py:show_file_thumbnail()] - flat_rectangle_ABS_15m45s.gcode
2024-02-08 01:21:29,524 [files.py:remove_file_callback()] - removing callback <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 01:21:29,524 [job_status.py:update_file_metadata()] - Update Metadata. File: flat_rectangle_ABS_15m45s.gcode Size: 90837
2024-02-08 01:21:29,529 [job_status.py:show_file_thumbnail()] - flat_rectangle_ABS_15m45s.gcode
2024-02-08 01:21:29,530 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 01:26:30,015 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 01:28:07,803 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 01:28:07,838 [screen.py:wake_screen()] - Screen wake up
2024-02-08 01:28:08,239 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_ON"
2024-02-08 01:31:04,818 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_OFF"
2024-02-08 01:31:04,951 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-08 01:31:04,951 [printer.py:change_state()] - Adding callback for state: ready
2024-02-08 01:31:04,956 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'standby'
2024-02-08 01:31:10,059 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0x7f792ccf00 (GtkDialog at 0x6abdf50)>
2024-02-08 01:31:10,083 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-02-08 01:31:54,278 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-08 01:31:54,278 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-08 01:31:54,279 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-08 01:31:54,279 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-08 01:31:54,287 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-08 01:31:54,287 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 01:31:54,288 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 01:31:54,345 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-08 01:31:58,022 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-08 01:31:58,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-08 01:31:58,029 [printer.py:configure_cameras()] - Cameras: []
2024-02-08 01:31:58,029 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-08 01:31:58,036 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-08 01:31:58,060 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-08 01:31:58,065 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_prefix': '\\\\'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pauses Print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'gcode_macro POLYLITE_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026'}, 'gcode_macro POLYLITE_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro SPARTA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325'}, 'gcode_macro SPARTA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300'}, 'gcode_macro SPARTA_PURPLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro POLYLITE_BLACK_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510'}, 'gcode_macro POLYLITE_BLACK_ABS': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYLITE_YELLOW_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro FILAMENT_RESET': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro ABS_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0'}, 'gcode_macro PRINT_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0'}, 'gcode_macro PRINT_RESET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0'}, 'gcode_macro Clean_Filament_Cold_Pull': {'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince', 'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0'}, 'gcode_macro Manual_Clean': {'description': 'Grab a Brush ready, Start Scrubbing!', 'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0'}, 'gcode_macro LOAD_FILAMENT_PLA': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro LOAD_FILAMENT_ABS': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_PLA': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_ABS': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro POLYTERRA_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031'}, 'gcode_macro POLYTERRA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro POLYTERRA_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550'}, 'gcode_macro POLYTERRA_CANDY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035'}, 'gcode_macro POLYTERRA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYTERRA_BLUE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445'}, 'gcode_macro POLYTERRA_LAV': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054'}, 'gcode_macro ZIRO_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252'}, 'gcode_macro JESSIE_TAN': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029'}, 'gcode_macro SUNLU_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066'}, 'gcode_macro M600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Run standard input shaper test for all axes', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Run custom demi-axe test to analyze belts on CoreXY printers', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations', 'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400'}, 'gcode_macro XYBelt_Tension': {'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115', 'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': '300.0', 'verbose': 'True'}, 'heater_bed': {'pwm_cycle_time': '0.0166', 'heater_pin': 'HEATER_BED', 'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_BED', 'max_power': '0.5', 'min_temp': '-20', 'max_temp': '120', 'control': 'pid', 'pid_kp': '33.946', 'pid_ki': '0.997', 'pid_kd': '288.961'}, 'extruder': {'step_pin': 'nhk:gpio23', 'dir_pin': '!nhk:gpio24', 'enable_pin': '!nhk:gpio25', 'rotation_distance': '47.088', 'gear_ratio': '9:1', 'microsteps': '16', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'nhk:gpio9', 'sensor_pin': 'nhk:gpio29', 'pullup_resistor': '2200', 'sensor_type': 'PT1000', 'min_temp': '10', 'max_temp': '280', 'max_power': '1.0', 'min_extrude_temp': '10', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'control': 'pid', 'pid_kp': '26.239', 'pid_ki': '1.965', 'pid_kd': '87.574'}, 'tmc2209 extruder': {'stealthchop_threshold': '0', 'run_current': '0.6', 'interpolate': 'false', 'sense_resistor': '0.100', 'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1'}, 'firmware_retraction': {'retract_length': '0.5', 'retract_speed': '30', 'unretract_speed': '30'}, 'heater_fan hotend_fan': {'pin': 'nhk:gpio5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'nhk:gpio6', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.010'}, 'output_pin caselight': {'pin': 'HEATER_LED', 'pwm': 'true', 'cycle_time': '0.01', 'value': '0.15'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_CHM', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'temperature_sensor Pi': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'heater_fan Vent': {'pin': 'BAY_1', 'max_power': '1', 'kick_start_time': '0.5', 'shutdown_speed': '0', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '0.40', 'cycle_time': '0.008'}, 'fan_generic BoomBox': {'pin': 'NMFAN', 'shutdown_speed': '0.0', 'hardware_pwm': 'False', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.008'}, 'fan_generic BedFans': {'pin': 'BEDFAN', 'kick_start_time': '0.5', 'cycle_time': '0.008'}, 'output_pin beeper': {'pin': 'BUZZ', 'value': '0', 'shutdown_value': '0', 'pwm': 'True', 'cycle_time': '0.0005'}, 'temperature_sensor NitehawkChip': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'nhk', 'min_temp': '0', 'max_temp': '100'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00'}, 'board_pins': {'aliases': '\n\n\nB_MOTOR_EN=PF14,  B_MOTOR_STEP=PF13,  B_MOTOR_DIR=PF12,  B_MOTOR_UART=PC4,\n\nA_MOTOR_EN=PF15,  A_MOTOR_STEP=PG0,  A_MOTOR_DIR=PG1,  A_MOTOR_UART=PD11,\n\nEXTRUDER_EN=PG5,  EXTRUDER_STEP=PF11,  EXTRUDER_DIR=PG3,  EXTRUDER_UART=PC6,\n\n\n\nZ_ZERO_EN=PF1,  Z_ZERO_STEP=PC13,  Z_ZERO_DIR=PF0,  Z_ZERO_UART=PE4,\n\nZ_ONE_EN=PD4,  Z_ONE_STEP=PE2,  Z_ONE_DIR=PE3,  Z_ONE_UART=PE1,\n\nZ_TWO_EN=PE0,  Z_TWO_STEP=PE6,  Z_TWO_DIR=PA14, Z_TWO_UART=PD3,\n\n\n\nHEATER_BED=PA3, HEATER_HE=PA2, HEATER_LED=PB10,\n\nTEMP_BED=PF3, TEMP_HE=PF4, TEMP_CHM=PF5,\n\nBAY_1=PD12, BEDFAN=PA8, NMFAN=PE5, BUZZ=PD15,\n\nENDSTOP_Z=PG10,  ENDSTOP_X=PG6,  ENDSTOP_Y=PG9, BTTFS=PG15'}, 'stepper_z': {'endstop_pin': 'probe:z_virtual_endstop', 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'enable_pin': '!Z_ZERO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200', 'position_max': '200', 'position_min': '-10', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'probe': {'pin': 'nhk:gpio10', 'z_offset': '6.345', 'x_offset': '0', 'y_offset': '19.75', 'speed': '8.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.0075', 'samples_tolerance_retries': '3'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '120', 'retries': '3', 'retry_tolerance': '0.0075', 'horizontal_move_z': '14'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '8', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'probe_count': '5,5', 'zero_reference_position': '150, 150', 'algorithm': 'bicubic', 'fade_start': '0.6', 'fade_end': '10', 'fade_target': '0'}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': '3', 'color_order': 'RGBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'stepper_x': {'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'enable_pin': '!B_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true', 'endstop_pin': 'nhk:gpio12'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'interpolate': 'false', 'run_current': '1', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'enable_pin': '!A_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'ENDSTOP_Y', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'interpolate': 'false', 'run_current': '1', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'enable_pin': '!Z_ONE_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'enable_pin': '!Z_TWO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00'}, 'output_pin act_led': {'pin': '!nhk:gpio8'}, 'adxl345': {'cs_pin': 'nhk:gpio21', 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_mosi_pin': 'nhk:gpio20', 'spi_software_miso_pin': 'nhk:gpio19'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n155, 155, 20'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor Nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'sensor_pin': 'nhk:gpio26', 'pullup_resistor': '2200', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'filament_motion_sensor filament_sensor': {'detection_length': '14', 'extruder': 'extruder', 'switch_pin': '^BTTFS', 'pause_on_runout': 'True', 'insert_gcode': '\nNozzle_ON', 'runout_gcode': '\nBEEP_ERROR\nPAUSE'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_OFF': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_ON': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1'}, 'gcode_macro _AIR_FILTER_VARIABLES': {'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1', 'gcode': ''}, 'gcode_macro RESET_AIR_FILTER': {'description': 'Resets the air-filter replacement timer', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }'}, 'gcode_macro QUERY_AIR_FILTER': {'description': 'Displays the amount of time the air filter has run since it was last reset.', 'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }'}, 'delayed_gcode _AIR_FILTER_TIMER': {'initial_duration': '1', 'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1"}, 'delayed_gcode _AIR_FILTER_FLUSH_TIMER': {'initial_duration': '300', 'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300"}, 'gcode_macro HEATSOAKER': {'description': 'HeatSoak for an Hour', 'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999'}, 'gcode_macro BEEP': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}'}, 'gcode_macro BEEP_SUCCESS': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000'}, 'gcode_macro BEEP_ERROR': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100'}, 'gcode_macro CG28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CHOME': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CENTER_ACCURACY': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY'}, 'gcode_macro Lights_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro Lights_ON': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25'}, 'gcode_macro PID_HOTEND': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260'}, 'gcode_macro PID_BED': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110'}, 'gcode_macro MANUAL_FLOW_CALIBRATION': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'delayed_gcode HEATSOAK_DELAY': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}'}, 'gcode_macro HEATSOAK_TIMER': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}'}, 'gcode_macro PARK_FRONT': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT'}, 'gcode_macro PARK_FRONT_LOW': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW'}, 'gcode_macro PARK_REAR': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR'}, 'gcode_macro PARK_CENTER': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER'}, 'gcode_macro PARK_BED': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED'}, 'gcode_macro FORCE_BED_DOWN': {'description': 'Force move bed down without homing', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_UP': {'description': 'Force move bed down without homing.', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_LOCK': {'description': 'Active Z steppers to lock down the bed, Without Homing', 'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90'}, 'gcode_macro FORCE_BED_UNLOCK': {'description': 'Unlocks the Bed', 'gcode': '\nM84'}, 'delayed_gcode FILTER_AIR_STOP': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}'}, 'gcode_macro PRIME_BLOB': {'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.', 'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state'}, 'gcode_macro RINGING_TOWER': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_MZV': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_EI': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro PRIMING': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107'}, 'gcode_macro CLEAN': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro Z_TILT_ADJUST': {'rename_existing': '_Z_TILT_ADJUST', 'description': '', 'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro Smart_Park': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'exclude_object': {}, 'skew_correction': {}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '10000', 'max_z_velocity': '15', 'max_z_accel': '50', 'square_corner_velocity': '5.0'}, 'input_shaper': {'shaper_freq_x': '58.8', 'shaper_type_x': 'zv', 'shaper_freq_y': '43.4', 'shaper_type_y': 'mzv'}, 'bed_mesh default': {'version': '1', 'points': '\n0.048750, 0.068750, 0.040000, 0.078750, 0.070000\n0.050000, 0.067500, 0.053750, 0.063750, 0.090000\n0.006250, 0.036250, 0.000000, 0.045000, 0.075000\n0.021250, 0.082500, 0.071250, 0.081250, 0.098750\n-0.025000, 0.068750, 0.046250, 0.088750, 0.078750', 'tension': '0.2', 'min_x': '40.0', 'algo': 'bicubic', 'y_count': '5', 'mesh_y_pps': '2', 'min_y': '40.0', 'x_count': '5', 'max_y': '260.0', 'mesh_x_pps': '2', 'max_x': '260.0'}, 'skew_correction my_skew_profile': {'xy_skew': '-0.000802972249612', 'xz_skew': '0.0', 'yz_skew': '0.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': '\\\\'}, 'gcode_macro cancel_print': {'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}', 'rename_existing': 'BASE_PAUSE', 'description': 'Pauses Print'}, 'gcode_macro resume': {'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'rename_existing': 'BASE_RESUME', 'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro polylite_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026', 'description': 'G-Code macro'}, 'gcode_macro polylite_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro sparta_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325', 'description': 'G-Code macro'}, 'gcode_macro sparta_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300', 'description': 'G-Code macro'}, 'gcode_macro sparta_purple': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_abs': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polylite_yellow_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro filament_reset': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro abs_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_reset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro clean_filament_cold_pull': {'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0', 'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince'}, 'gcode_macro manual_clean': {'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0', 'description': 'Grab a Brush ready, Start Scrubbing!'}, 'gcode_macro load_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro load_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro polyterra_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031', 'description': 'G-Code macro'}, 'gcode_macro polyterra_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro polyterra_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550', 'description': 'G-Code macro'}, 'gcode_macro polyterra_candy': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035', 'description': 'G-Code macro'}, 'gcode_macro polyterra_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polyterra_blue': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445', 'description': 'G-Code macro'}, 'gcode_macro polyterra_lav': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054', 'description': 'G-Code macro'}, 'gcode_macro ziro_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252', 'description': 'G-Code macro'}, 'gcode_macro jessie_tan': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029', 'description': 'G-Code macro'}, 'gcode_macro sunlu_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER', 'description': 'Run standard input shaper test for all axes'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS', 'description': 'Run custom demi-axe test to analyze belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400', 'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations'}, 'gcode_macro xybelt_tension': {'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }', 'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': 300.0, 'verbose': True}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_BED', 'min_temp': -20.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.5, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 33.946, 'pid_ki': 0.997, 'pid_kd': 288.961, 'heater_pin': 'HEATER_BED', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'tmc2209 extruder': {'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.1, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'PT1000', 'pullup_resistor': 2200.0, 'sensor_pin': 'nhk:gpio29', 'min_temp': 10.0, 'max_temp': 280.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.239, 'pid_ki': 1.965, 'pid_kd': 87.574, 'heater_pin': 'nhk:gpio9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'nhk:gpio23', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!nhk:gpio24', 'rotation_distance': 47.088, 'full_steps_per_rotation': 200, 'gear_ratio': [[9.0, 1.0]], 'enable_pin': '!nhk:gpio25'}, 'firmware_retraction': {'retract_length': 0.5, 'retract_speed': 30.0, 'unretract_extra_length': 0.0, 'unretract_speed': 30.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'nhk:gpio5', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'nhk:gpio6'}, 'output_pin caselight': {'pwm': True, 'pin': 'HEATER_LED', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.15, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_CHM', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'temperature_sensor pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'heater_fan vent': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BAY_1', 'fan_speed': 0.4}, 'fan_generic boombox': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'NMFAN'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BEDFAN'}, 'output_pin beeper': {'pwm': True, 'pin': 'BUZZ', 'cycle_time': 0.0005, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'temperature_sensor nitehawkchip': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'nhk', 'min_temp': 0.0, 'max_temp': 100.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['B_MOTOR_EN', 'PF14'], ['B_MOTOR_STEP', 'PF13'], ['B_MOTOR_DIR', 'PF12'], ['B_MOTOR_UART', 'PC4'], ['A_MOTOR_EN', 'PF15'], ['A_MOTOR_STEP', 'PG0'], ['A_MOTOR_DIR', 'PG1'], ['A_MOTOR_UART', 'PD11'], ['EXTRUDER_EN', 'PG5'], ['EXTRUDER_STEP', 'PF11'], ['EXTRUDER_DIR', 'PG3'], ['EXTRUDER_UART', 'PC6'], ['Z_ZERO_EN', 'PF1'], ['Z_ZERO_STEP', 'PC13'], ['Z_ZERO_DIR', 'PF0'], ['Z_ZERO_UART', 'PE4'], ['Z_ONE_EN', 'PD4'], ['Z_ONE_STEP', 'PE2'], ['Z_ONE_DIR', 'PE3'], ['Z_ONE_UART', 'PE1'], ['Z_TWO_EN', 'PE0'], ['Z_TWO_STEP', 'PE6'], ['Z_TWO_DIR', 'PA14'], ['Z_TWO_UART', 'PD3'], ['HEATER_BED', 'PA3'], ['HEATER_HE', 'PA2'], ['HEATER_LED', 'PB10'], ['TEMP_BED', 'PF3'], ['TEMP_HE', 'PF4'], ['TEMP_CHM', 'PF5'], ['BAY_1', 'PD12'], ['BEDFAN', 'PA8'], ['NMFAN', 'PE5'], ['BUZZ', 'PD15'], ['ENDSTOP_Z', 'PG10'], ['ENDSTOP_X', 'PG6'], ['ENDSTOP_Y', 'PG9'], ['BTTFS', 'PG15']]}, 'probe': {'z_offset': 6.345, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'nhk:gpio10', 'speed': 8.0, 'lift_speed': 8.0, 'x_offset': 0.0, 'y_offset': 19.75, 'samples': 3, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.0075, 'samples_tolerance_retries': 3}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 3, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 14.0, 'speed': 120.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [150.0, 150.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 8.0, 'speed': 150.0, 'fade_start': 0.6, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.04875, 0.06875, 0.04, 0.07875, 0.07], [0.05, 0.0675, 0.05375, 0.06375, 0.09], [0.00625, 0.03625, 0.0, 0.045, 0.075], [0.02125, 0.0825, 0.07125, 0.08125, 0.09875], [-0.025, 0.06875, 0.04625, 0.08875, 0.07875]], 'min_x': 40.0, 'max_x': 260.0, 'min_y': 40.0, 'max_y': 260.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': 3, 'color_order': ['RGBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!B_MOTOR_EN', 'endstop_pin': 'nhk:gpio12', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!A_MOTOR_EN', 'endstop_pin': 'ENDSTOP_Y', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ZERO_EN', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 200.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ONE_EN'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_TWO_EN'}, 'output_pin act_led': {'pwm': False, 'pin': '!nhk:gpio8', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'nhk:gpio21', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_miso_pin': 'nhk:gpio19', 'spi_software_mosi_pin': 'nhk:gpio20'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[155.0, 155.0, 20.0]], 'accel_chip': 'adxl345'}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'pullup_resistor': 2200.0, 'inline_resistor': 0.0, 'sensor_pin': 'nhk:gpio26', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'filament_motion_sensor filament_sensor': {'switch_pin': '^BTTFS', 'extruder': 'extruder', 'detection_length': 14.0, 'pause_on_runout': True, 'runout_gcode': '\nBEEP_ERROR\nPAUSE', 'insert_gcode': '\nNozzle_ON', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro fs_off': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro fs_on': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro _air_filter_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1'}, 'gcode_macro reset_air_filter': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }', 'description': 'Resets the air-filter replacement timer'}, 'gcode_macro query_air_filter': {'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }', 'description': 'Displays the amount of time the air filter has run since it was last reset.'}, 'delayed_gcode _air_filter_timer': {'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1", 'initial_duration': 1.0}, 'delayed_gcode _air_filter_flush_timer': {'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300", 'initial_duration': 300.0}, 'gcode_macro heatsoaker': {'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999', 'description': 'HeatSoak for an Hour'}, 'gcode_macro beep': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro beep_success': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000', 'description': 'G-Code macro'}, 'gcode_macro beep_error': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100', 'description': 'G-Code macro'}, 'gcode_macro cg28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro chome': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro center_accuracy': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro lights_on': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25', 'description': 'G-Code macro'}, 'gcode_macro pid_hotend': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260', 'description': 'G-Code macro'}, 'gcode_macro pid_bed': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110', 'description': 'G-Code macro'}, 'gcode_macro manual_flow_calibration': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'delayed_gcode heatsoak_delay': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro heatsoak_timer': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}', 'description': 'G-Code macro'}, 'gcode_macro park_front': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT', 'description': 'G-Code macro'}, 'gcode_macro park_front_low': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW', 'description': 'G-Code macro'}, 'gcode_macro park_rear': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR', 'description': 'G-Code macro'}, 'gcode_macro park_center': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER', 'description': 'G-Code macro'}, 'gcode_macro park_bed': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED', 'description': 'G-Code macro'}, 'gcode_macro force_bed_down': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing'}, 'gcode_macro force_bed_up': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing.'}, 'gcode_macro force_bed_lock': {'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90', 'description': 'Active Z steppers to lock down the bed, Without Homing'}, 'gcode_macro force_bed_unlock': {'gcode': '\nM84', 'description': 'Unlocks the Bed'}, 'delayed_gcode filter_air_stop': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro print_end': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro prime_blob': {'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state', 'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.'}, 'gcode_macro ringing_tower': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_mzv': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_ei': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro priming': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000', 'description': 'G-Code macro'}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount'}, 'gcode_macro z_tilt_adjust': {'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0', 'rename_existing': '_Z_TILT_ADJUST', 'description': ''}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'skew_correction my_skew_profile': {'xy_skew': -0.000802972249612, 'xz_skew': 0.0, 'yz_skew': 0.0}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'zv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 58.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 43.4}, 'printer': {'max_velocity': 300.0, 'max_accel': 10000.0, 'max_accel_to_decel': 5000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 50.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-08 01:31:58,071 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-08 01:31:58,072 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-08 01:31:58,072 [printer.py:reinit()] - # Extruders: 1
2024-02-08 01:31:58,072 [printer.py:reinit()] - # Temperature devices: 6
2024-02-08 01:31:58,072 [printer.py:reinit()] - # Fans: 5
2024-02-08 01:31:58,072 [printer.py:reinit()] - # Output pins: 3
2024-02-08 01:31:58,072 [printer.py:reinit()] - # Leds: 1
2024-02-08 01:31:58,083 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-08 01:31:58,085 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-08 01:31:58,366 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor Pi&temperature_sensor Octopus&temperature_sensor NitehawkChip&temperature_sensor Nitehawk&fan&fan_generic BoomBox&fan_generic BedFans&heater_fan hotend_fan&heater_fan Vent&filament_motion_sensor filament_sensor&output_pin caselight&output_pin beeper&output_pin act_led&neopixel sb_leds
2024-02-08 01:31:58,371 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-08 01:31:58,371 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-08 01:31:58,372 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-08 01:31:58,373 [screen.py:init_klipper()] - Printer initialized
2024-02-08 01:31:58,373 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-08 01:31:58,373 [printer.py:change_state()] - Adding callback for state: startup
2024-02-08 01:31:58,544 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-08 01:31:58,544 [printer.py:change_state()] - Adding callback for state: ready
2024-02-08 01:31:58,546 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 01:31:58,547 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 01:31:58,610 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-08 01:31:58,628 [main_menu.py:add_device()] - Adding device: extruder
2024-02-08 01:31:58,632 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-08 01:31:58,636 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-08 01:31:58,636 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-08 01:31:58,636 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-08 01:31:58,636 [main_menu.py:add_device()] - Adding device: temperature_sensor NitehawkChip
2024-02-08 01:31:58,636 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-08 01:31:58,661 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-08 01:31:58,681 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-08 01:31:58,686 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor Pi', 'temperature_sensor Octopus', 'temperature_sensor NitehawkChip', 'temperature_sensor Nitehawk', 'extruder']
2024-02-08 01:31:58,692 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-08 01:31:58,693 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-08 01:32:55,508 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_PREP"
2024-02-08 01:32:55,560 [files.py:_callback()] - Error in getting metadata for .thumbs/flat_rectangle_ABS_15m45s-300x300.png. Retrying in 6 seconds
2024-02-08 01:32:55,561 [files.py:_callback()] - Error in getting metadata for .thumbs/flat_rectangle_ABS_15m45s-32x32.png. Retrying in 6 seconds
2024-02-08 01:32:55,561 [files.py:add_file()] - File already exists: flat_rectangle_ABS_15m45s.gcode
2024-02-08 01:32:55,700 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-08 01:32:55,701 [printer.py:change_state()] - Adding callback for state: printing
2024-02-08 01:32:55,704 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 01:32:55,705 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 01:32:55,767 [job_status.py:create_status_grid()] - Titlebar items: ['']
2024-02-08 01:32:55,798 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-08 01:32:55,802 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-08 01:32:55,814 [job_status.py:update_file_metadata()] - Update Metadata. File: flat_rectangle_ABS_15m45s.gcode Size: 90837
2024-02-08 01:32:55,819 [job_status.py:show_file_thumbnail()] - flat_rectangle_ABS_15m45s.gcode
2024-02-08 01:33:09,033 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 01:38:25,973 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 01:38:25,989 [screen.py:wake_screen()] - Screen wake up
2024-02-08 01:38:26,384 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_ON"
2024-02-08 01:40:17,121 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_OFF"
2024-02-08 01:40:17,169 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-08 01:40:17,170 [printer.py:change_state()] - Adding callback for state: ready
2024-02-08 01:40:17,181 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'standby'
2024-02-08 01:41:31,400 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_PREP"
2024-02-08 01:41:31,434 [files.py:_callback()] - Error in getting metadata for .thumbs/Voron_Design_Cube_v7_ABS_42m13s-300x300.png. Retrying in 6 seconds
2024-02-08 01:41:31,434 [files.py:_callback()] - Error in getting metadata for .thumbs/Voron_Design_Cube_v7_ABS_42m13s-32x32.png. Retrying in 6 seconds
2024-02-08 01:41:31,580 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-08 01:41:31,580 [printer.py:change_state()] - Adding callback for state: printing
2024-02-08 01:41:31,586 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-08 01:41:31,591 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_ABS_42m13s.gcode Size: 3788364
2024-02-08 01:41:31,596 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_ABS_42m13s.gcode
2024-02-08 01:41:31,621 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 01:41:31,621 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 01:41:31,687 [job_status.py:create_status_grid()] - Titlebar items: ['']
2024-02-08 01:41:31,714 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-08 01:41:31,719 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-08 01:41:31,728 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_ABS_42m13s.gcode Size: 3788364
2024-02-08 01:41:31,733 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_ABS_42m13s.gcode
2024-02-08 01:43:27,015 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 01:46:19,238 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 01:46:19,282 [screen.py:wake_screen()] - Screen wake up
2024-02-08 01:46:19,685 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_ON"
2024-02-08 01:51:20,015 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 01:55:02,518 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 01:55:02,561 [screen.py:wake_screen()] - Screen wake up
2024-02-08 02:00:03,015 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 02:33:43,130 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 02:33:43,171 [screen.py:wake_screen()] - Screen wake up
2024-02-08 02:33:43,572 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_OFF"
2024-02-08 02:33:47,153 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-08 02:33:47,153 [printer.py:change_state()] - Adding callback for state: ready
2024-02-08 02:33:47,159 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-02-08 02:38:44,023 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 02:39:43,002 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 02:39:43,039 [screen.py:wake_screen()] - Screen wake up
2024-02-08 02:44:43,030 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 02:46:45,184 [files.py:_callback()] - Error in getting metadata for .thumbs/corner_lock_body_4_ABS_1h51m-300x300.png. Retrying in 6 seconds
2024-02-08 02:46:45,184 [files.py:_callback()] - Error in getting metadata for .thumbs/corner_lock_body_4_ABS_1h51m-32x32.png. Retrying in 6 seconds
2024-02-08 02:46:45,217 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 02:46:45,239 [screen.py:wake_screen()] - Screen wake up
2024-02-08 02:46:45,636 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_PREP"
2024-02-08 02:46:45,673 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-08 02:46:45,674 [printer.py:change_state()] - Adding callback for state: printing
2024-02-08 02:46:45,677 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2024-02-08 02:46:45,682 [job_status.py:update_file_metadata()] - Update Metadata. File: corner_lock_body_4_ABS_1h51m.gcode Size: 11793098
2024-02-08 02:46:45,688 [job_status.py:show_file_thumbnail()] - corner_lock_body_4_ABS_1h51m.gcode
2024-02-08 02:46:45,725 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 02:46:45,725 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 02:46:45,786 [job_status.py:create_status_grid()] - Titlebar items: ['']
2024-02-08 02:46:45,811 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-08 02:46:45,817 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-08 02:46:45,827 [job_status.py:update_file_metadata()] - Update Metadata. File: corner_lock_body_4_ABS_1h51m.gcode Size: 11793098
2024-02-08 02:46:45,833 [job_status.py:show_file_thumbnail()] - corner_lock_body_4_ABS_1h51m.gcode
2024-02-08 02:51:46,016 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 02:55:26,289 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 02:55:26,332 [screen.py:wake_screen()] - Screen wake up
2024-02-08 02:55:26,732 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_ON"
2024-02-08 03:00:27,015 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 05:16:09,126 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 05:16:09,165 [screen.py:wake_screen()] - Screen wake up
2024-02-08 05:20:09,645 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_OFF"
2024-02-08 05:20:12,907 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-08 05:20:12,907 [printer.py:change_state()] - Adding callback for state: ready
2024-02-08 05:20:12,912 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-02-08 05:21:10,016 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 05:25:25,615 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 05:25:25,652 [screen.py:wake_screen()] - Screen wake up
2024-02-08 05:25:27,791 [job_status.py:close_panel()] - Closing job_status panel
2024-02-08 05:25:27,795 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 05:25:27,795 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 05:25:27,897 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-08 05:25:27,915 [main_menu.py:add_device()] - Adding device: extruder
2024-02-08 05:25:27,918 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-08 05:25:27,923 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-08 05:25:27,923 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-08 05:25:27,923 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-08 05:25:27,923 [main_menu.py:add_device()] - Adding device: temperature_sensor NitehawkChip
2024-02-08 05:25:27,923 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-08 05:25:27,949 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-08 05:25:34,615 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-08 05:25:34,615 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-08 05:25:34,622 [screen.py:_load_panel()] - Loading panel: menu
2024-02-08 05:25:34,827 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-08 05:25:34,843 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-08 05:25:34,857 [menu.py:arrangeMenuItems()] - X > more power
2024-02-08 05:25:34,859 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-08 05:25:34,868 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-08 05:25:36,947 [screen.py:_load_panel()] - Loading panel: led
2024-02-08 05:25:36,960 [led.py:color_selector()] - neopixel sb_leds
2024-02-08 05:25:36,977 [KlippyRest.py:_do_request()] - 404 Client Error>>Namespace mainsail not found for url>>http://127.0.0.1:7125/server/database/item?namespace=mainsail&key=miscellaneous.entries
2024-02-08 05:25:36,978 [led.py:color_selector()] - Adding preset: off
2024-02-08 05:25:36,980 [led.py:color_selector()] - Adding preset: on
2024-02-08 05:25:37,006 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > led
2024-02-08 05:25:39,876 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-08 05:25:39,934 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-08 05:25:39,971 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-08 05:25:39,990 [menu.py:arrangeMenuItems()] - X > more power
2024-02-08 05:25:39,992 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-08 05:25:40,001 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-08 05:25:51,410 [screen.py:_load_panel()] - Loading panel: fan
2024-02-08 05:25:51,418 [fan.py:add_fan()] - Adding fan: fan
2024-02-08 05:25:51,431 [fan.py:add_fan()] - Adding fan: fan_generic BoomBox
2024-02-08 05:25:51,441 [fan.py:add_fan()] - Adding fan: fan_generic BedFans
2024-02-08 05:25:51,452 [fan.py:add_fan()] - Adding fan: heater_fan hotend_fan
2024-02-08 05:25:51,462 [fan.py:add_fan()] - Adding fan: heater_fan Vent
2024-02-08 05:25:51,499 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > fan
2024-02-08 05:26:00,223 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-08 05:26:00,281 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-08 05:26:00,305 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-08 05:26:00,327 [menu.py:arrangeMenuItems()] - X > more power
2024-02-08 05:26:00,330 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-08 05:26:00,342 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-08 05:26:08,577 [screen.py:_load_panel()] - Loading panel: limits
2024-02-08 05:26:08,590 [limits.py:add_option()] - Adding option: max_accel
2024-02-08 05:26:08,598 [limits.py:add_option()] - Adding option: max_accel_to_decel
2024-02-08 05:26:08,607 [limits.py:add_option()] - Adding option: max_velocity
2024-02-08 05:26:08,614 [limits.py:add_option()] - Adding option: square_corner_velocity
2024-02-08 05:26:08,655 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > limits
2024-02-08 05:26:11,826 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-08 05:26:11,855 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-08 05:26:11,872 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-08 05:26:11,888 [menu.py:arrangeMenuItems()] - X > more power
2024-02-08 05:26:11,890 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-08 05:26:11,898 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-08 05:26:27,313 [screen.py:_load_panel()] - Loading panel: system
2024-02-08 05:26:27,332 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/machine/system_info
2024-02-08 05:26:27,398 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > system
2024-02-08 05:26:27,433 [system.py:get_updates()] - {'jsonrpc': '2.0', 'result': {'github_rate_limit': None, 'github_requests_remaining': None, 'github_limit_reset_time': None, 'version_info': {'system': {'package_count': 39, 'package_list': ['bluez', 'firmware-atheros', 'firmware-brcm80211', 'firmware-libertas', 'firmware-misc-nonfree', 'firmware-realtek', 'kms++-utils', 'libbluetooth3', 'libc-bin', 'libc-dev-bin', 'libc-devtools', 'libc-l10n', 'libc6', 'libc6-dbg', 'libc6-dev', 'libcamera-apps-lite', 'libkms++0', 'linux-headers-rpi-2712', 'linux-headers-rpi-v8', 'linux-image-rpi-2712', 'linux-image-rpi-v8', 'linux-kbuild-6.1', 'linux-libc-dev', 'locales', 'openssh-client', 'openssh-server', 'openssh-sftp-server', 'raspberrypi-net-mods', 'raspberrypi-sys-mods', 'raspi-config', 'raspi-firmware', 'rpi-eeprom', 'rpicam-apps-lite', 'ssh', 'linux-headers-6.1.0-rpi8-common-rpi', 'linux-headers-6.1.0-rpi8-rpi-2712', 'linux-headers-6.1.0-rpi8-rpi-v8', 'linux-image-6.1.0-rpi8-rpi-2712', 'linux-image-6.1.0-rpi8-rpi-v8']}, 'moonraker': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Arksine', 'repo_name': 'moonraker', 'remote_url': 'https://github.com/Arksine/moonraker.git', 'recovery_url': 'https://github.com/Arksine/moonraker.git', 'version': 'v0.8.0-309', 'remote_version': 'v0.8.0-309', 'rollback_version': 'v0.8.0-309', 'current_hash': 'f946e6a28d7506d8da16851cbf730fa89b267926', 'remote_hash': 'f946e6a28d7506d8da16851cbf730fa89b267926', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.8.0-309-gf946e6a2', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'klipper': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Klipper3d', 'repo_name': 'klipper', 'remote_url': 'https://github.com/Klipper3d/klipper', 'recovery_url': 'https://github.com/Klipper3d/klipper', 'version': 'v0.12.0-102', 'remote_version': 'v0.12.0-102', 'rollback_version': 'v0.12.0-102', 'current_hash': '9f41f53c5e364694b9b41279b3b3aee34250b93a', 'remote_hash': '9f41f53c5e364694b9b41279b3b3aee34250b93a', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.12.0-102-g9f41f53c', 'pristine': False, 'corrupt': False, 'warnings': [], 'anomalies': ["Repo has untracked source files: ['klippy/extras/gcode_shell_command.py']"]}, 'KlipperScreen': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'KlipperScreen', 'repo_name': 'KlipperScreen', 'remote_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'recovery_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'version': 'v0.3.8-88', 'remote_version': 'v0.3.8-88', 'rollback_version': 'v0.3.8-88', 'current_hash': 'c832c90f47984ba234d87bebe306b55ad142ecc2', 'remote_hash': 'c832c90f47984ba234d87bebe306b55ad142ecc2', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.3.8-88-gc832c90f', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}}, 'busy': False}, 'id': 73}
2024-02-08 05:26:27,444 [system.py:_needs_update()] - system  -> 39
2024-02-08 05:26:30,722 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-08 05:26:30,751 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-08 05:26:30,768 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-08 05:26:30,782 [menu.py:arrangeMenuItems()] - X > more power
2024-02-08 05:26:30,784 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-08 05:26:30,793 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-08 05:26:33,118 [screen.py:_load_panel()] - Loading panel: pins
2024-02-08 05:26:33,132 [pins.py:add_pin()] - Adding pin: output_pin caselight
2024-02-08 05:26:33,140 [pins.py:add_pin()] - Adding pin: output_pin beeper
2024-02-08 05:26:33,148 [pins.py:add_pin()] - Adding pin: output_pin act_led
2024-02-08 05:26:33,179 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > pins
2024-02-08 05:26:42,099 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-08 05:26:42,154 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-08 05:26:42,190 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-08 05:26:42,218 [menu.py:arrangeMenuItems()] - X > more power
2024-02-08 05:26:42,220 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-08 05:26:42,230 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-08 05:26:47,047 [screen.py:_load_panel()] - Loading panel: settings
2024-02-08 05:26:47,174 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > settings
2024-02-08 05:27:19,981 [screen_panel.py:on_dropdown_change()] - [main] screen_blanking changed to 120
2024-02-08 05:27:19,991 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 120
2024-02-08 05:27:19,997 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-08 05:27:26,869 [screen_panel.py:switch_config_option()] - [main] show_heater_power toggled True
2024-02-08 05:27:26,880 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 05:27:26,880 [printer.py:change_state()] - Adding callback for state: ready
2024-02-08 05:27:26,884 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 05:27:26,885 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 05:27:26,972 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-08 05:27:26,990 [main_menu.py:add_device()] - Adding device: extruder
2024-02-08 05:27:26,994 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-08 05:27:26,998 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-08 05:27:26,999 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-08 05:27:26,999 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-08 05:27:26,999 [main_menu.py:add_device()] - Adding device: temperature_sensor NitehawkChip
2024-02-08 05:27:26,999 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-08 05:27:27,025 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-08 05:27:43,414 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-08 05:27:43,415 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-08 05:27:43,418 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 05:27:43,585 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-08 05:27:43,600 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-08 05:27:43,616 [menu.py:arrangeMenuItems()] - X > more power
2024-02-08 05:27:43,618 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-08 05:27:43,627 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-08 05:27:44,667 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 05:27:44,797 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > settings
2024-02-08 05:27:52,725 [screen_panel.py:switch_config_option()] - [main] show_heater_power toggled False
2024-02-08 05:27:52,736 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 05:27:52,736 [printer.py:change_state()] - Adding callback for state: ready
2024-02-08 05:27:52,743 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 05:27:52,743 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 05:27:52,836 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-08 05:27:52,854 [main_menu.py:add_device()] - Adding device: extruder
2024-02-08 05:27:52,858 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-08 05:27:52,862 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-08 05:27:52,862 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-08 05:27:52,862 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-08 05:27:52,863 [main_menu.py:add_device()] - Adding device: temperature_sensor NitehawkChip
2024-02-08 05:27:52,863 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-08 05:27:52,888 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-08 05:27:57,198 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-08 05:27:57,199 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-08 05:27:57,203 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 05:27:57,372 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-08 05:27:57,387 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-08 05:27:57,402 [menu.py:arrangeMenuItems()] - X > more power
2024-02-08 05:27:57,404 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-08 05:27:57,413 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-08 05:27:58,753 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 05:27:58,909 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > settings
2024-02-08 05:28:01,056 [screen_panel.py:switch_config_option()] - [main] show_heater_power toggled True
2024-02-08 05:28:01,064 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 05:28:01,064 [printer.py:change_state()] - Adding callback for state: ready
2024-02-08 05:28:01,068 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7b136dd0>>
2024-02-08 05:28:01,068 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 05:28:01,131 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-08 05:28:01,149 [main_menu.py:add_device()] - Adding device: extruder
2024-02-08 05:28:01,152 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-08 05:28:01,157 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-08 05:28:01,157 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-08 05:28:01,157 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-08 05:28:01,157 [main_menu.py:add_device()] - Adding device: temperature_sensor NitehawkChip
2024-02-08 05:28:01,157 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-08 05:28:01,183 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-08 05:28:09,287 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-08 05:28:09,287 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-08 05:28:09,297 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 05:28:09,520 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-08 05:28:09,535 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-08 05:28:09,551 [menu.py:arrangeMenuItems()] - X > more power
2024-02-08 05:28:09,553 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-08 05:28:09,562 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-08 05:28:11,203 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 05:28:11,330 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > settings
2024-02-08 05:28:25,494 [screen_panel.py:on_dropdown_change()] - [main] theme changed to material-dark
2024-02-08 05:28:29,971 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-08 05:28:29,972 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-88-gc832c90
2024-02-08 05:28:29,972 [functions.py:log_start()] - Python version: 3.11
2024-02-08 05:28:30,044 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-08 05:28:30,044 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-08 05:28:30,056 [config.py:log_config()] -  ===== Config File =====
[printer Zarya]

[menu __main my_macros_menu]
name = Macros

[menu __main my_macros_menu sub_macro_item]
name = PARK CENTER
method = printer.gcode.script
params = {"script":"PARK_CENTER"}

[menu __main my_macros_menu sub_macro_item2]
name = Force Bed Down
method = printer.gcode.script
params = {"script":"force_bed_down DISTANCE=4"}

[menu __main my_macros_menu sub_macro_item3]
name = HEATSOAKER
method = printer.gcode.script
params = {"script":"HEATSOAKER"}
=======================
2024-02-08 05:28:30,062 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-dark
screen_blanking = 120
24htime = False
side_macro_shortcut = False
font_size = large
only_heaters = True
show_heater_power = True
invert_z = True
move_speed_xy = 199

[displayed_macros Printer]
attach_probe = False
bed_mesh_calibrate = False
attach_probe_lock = False
center_toolhead = False
dock_probe = False
g32 = False
dock_probe_unlock = False
jessie_tan = False
center_accuracy = False
filament_reset = False
jessie_soulblack = False
m900 = False
preheat = False
polyterra_white = False
nmfan_on = False
polyterra_marble = False
polylite_black = False
purgeline = False
probe_calibrate = False
probe_accuracy = False
polyterra_gray = False
polylite_gray = False
polyterra_black = False
status_busy = False
print_start = False
status_meshing = False
status_calibrating_z = False
test_speed = False
status_off = False
status_leveling = False
status_ready = False
set_nozzle_leds_on = False
set_nozzle_leds_off = False
set_logo_leds_off = False
status_heating = False
status_homing = False
status_cleaning = False
status_printing = False
abs_offset = False
beep = False
blk_paramount = False
cg28 = False
polyterra_blue = False
pause = False
measure_resonnances_x = False
m600 = False
measure_resonnances_y = False
polyterra_candy = False
polyterra_purp = False
sparta_black = False
query_air_filter = False
print_end = False
z_tilt_adjust = False
reset_air_filter = False
polylite_black_asa = False
ziro_marble = False
ziro_sparkle = False
sparta_purple = False
status_caution = False
sparta_gray = False
calibrate_z = False
cancel_print = False
axes_shaper_calibration = False
beep_error = False
belts_shaper_calibration = False
beep_success = False
excitate_axis_at_freq = False
compute_flow_multiplier = False
flow_multiplier_calibration = False
manual_flow_calibration = False
line_purge = False
prime_blob = False
polylite_black_abs = False
polylite_yellow_asa = False
pressure_advance_calibration = False
setup_kamp_meshing = False
sparta_reset = False
setup_line_purge = False
sparta_offset = False
print_reset = False

[graph Printer]
heater_bed = False
extruder = False

=======================
2024-02-08 05:28:30,062 [config.py:__init__()] - Configured printers: [
  {
    "Zarya": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-08 05:28:30,108 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-08 05:28:30,108 [config.py:install_language()] - Using lang en
2024-02-08 05:28:30,119 [screen.py:__init__()] - Screen resolution: 800x480
2024-02-08 05:28:30,120 [KlippyGtk.py:__init__()] - Font size: 18.0 (large)
2024-02-08 05:28:30,353 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 120
2024-02-08 05:28:30,360 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-08 05:28:30,365 [screen.py:initial_connection()] - Default printer: None
2024-02-08 05:28:30,397 [screen.py:connect_printer()] - Connecting to printer: Zarya
2024-02-08 05:28:30,397 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-08 05:28:30,435 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-08 05:28:30,445 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-08 05:28:30,454 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-08 05:28:30,461 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-08 05:28:30,462 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-08 05:28:30,467 [_logging.py:info()] - Websocket connected
2024-02-08 05:28:30,467 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-08 05:28:30,547 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-08 05:28:30,553 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-08 05:28:30,554 [printer.py:configure_cameras()] - Cameras: []
2024-02-08 05:28:30,554 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-08 05:28:30,561 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-08 05:28:30,814 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-08 05:28:30,822 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_prefix': '\\\\'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pauses Print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'gcode_macro POLYLITE_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026'}, 'gcode_macro POLYLITE_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro SPARTA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325'}, 'gcode_macro SPARTA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300'}, 'gcode_macro SPARTA_PURPLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro POLYLITE_BLACK_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510'}, 'gcode_macro POLYLITE_BLACK_ABS': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYLITE_YELLOW_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro FILAMENT_RESET': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro ABS_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0'}, 'gcode_macro PRINT_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0'}, 'gcode_macro PRINT_RESET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0'}, 'gcode_macro Clean_Filament_Cold_Pull': {'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince', 'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0'}, 'gcode_macro Manual_Clean': {'description': 'Grab a Brush ready, Start Scrubbing!', 'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0'}, 'gcode_macro LOAD_FILAMENT_PLA': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro LOAD_FILAMENT_ABS': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_PLA': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_ABS': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro POLYTERRA_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031'}, 'gcode_macro POLYTERRA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro POLYTERRA_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550'}, 'gcode_macro POLYTERRA_CANDY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035'}, 'gcode_macro POLYTERRA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYTERRA_BLUE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445'}, 'gcode_macro POLYTERRA_LAV': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054'}, 'gcode_macro ZIRO_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252'}, 'gcode_macro JESSIE_TAN': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029'}, 'gcode_macro SUNLU_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066'}, 'gcode_macro M600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Run standard input shaper test for all axes', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Run custom demi-axe test to analyze belts on CoreXY printers', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations', 'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400'}, 'gcode_macro XYBelt_Tension': {'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115', 'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': '300.0', 'verbose': 'True'}, 'heater_bed': {'pwm_cycle_time': '0.0166', 'heater_pin': 'HEATER_BED', 'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_BED', 'max_power': '0.5', 'min_temp': '-20', 'max_temp': '120', 'control': 'pid', 'pid_kp': '33.946', 'pid_ki': '0.997', 'pid_kd': '288.961'}, 'extruder': {'step_pin': 'nhk:gpio23', 'dir_pin': '!nhk:gpio24', 'enable_pin': '!nhk:gpio25', 'rotation_distance': '47.088', 'gear_ratio': '9:1', 'microsteps': '16', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'nhk:gpio9', 'sensor_pin': 'nhk:gpio29', 'pullup_resistor': '2200', 'sensor_type': 'PT1000', 'min_temp': '10', 'max_temp': '280', 'max_power': '1.0', 'min_extrude_temp': '10', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'control': 'pid', 'pid_kp': '26.239', 'pid_ki': '1.965', 'pid_kd': '87.574'}, 'tmc2209 extruder': {'stealthchop_threshold': '0', 'run_current': '0.6', 'interpolate': 'false', 'sense_resistor': '0.100', 'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1'}, 'firmware_retraction': {'retract_length': '0.5', 'retract_speed': '30', 'unretract_speed': '30'}, 'heater_fan hotend_fan': {'pin': 'nhk:gpio5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'nhk:gpio6', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.010'}, 'output_pin caselight': {'pin': 'HEATER_LED', 'pwm': 'true', 'cycle_time': '0.01', 'value': '0.15'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_CHM', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'temperature_sensor Pi': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'heater_fan Vent': {'pin': 'BAY_1', 'max_power': '1', 'kick_start_time': '0.5', 'shutdown_speed': '0', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '0.40', 'cycle_time': '0.008'}, 'fan_generic BoomBox': {'pin': 'NMFAN', 'shutdown_speed': '0.0', 'hardware_pwm': 'False', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.008'}, 'fan_generic BedFans': {'pin': 'BEDFAN', 'kick_start_time': '0.5', 'cycle_time': '0.008'}, 'output_pin beeper': {'pin': 'BUZZ', 'value': '0', 'shutdown_value': '0', 'pwm': 'True', 'cycle_time': '0.0005'}, 'temperature_sensor NitehawkChip': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'nhk', 'min_temp': '0', 'max_temp': '100'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00'}, 'board_pins': {'aliases': '\n\n\nB_MOTOR_EN=PF14,  B_MOTOR_STEP=PF13,  B_MOTOR_DIR=PF12,  B_MOTOR_UART=PC4,\n\nA_MOTOR_EN=PF15,  A_MOTOR_STEP=PG0,  A_MOTOR_DIR=PG1,  A_MOTOR_UART=PD11,\n\nEXTRUDER_EN=PG5,  EXTRUDER_STEP=PF11,  EXTRUDER_DIR=PG3,  EXTRUDER_UART=PC6,\n\n\n\nZ_ZERO_EN=PF1,  Z_ZERO_STEP=PC13,  Z_ZERO_DIR=PF0,  Z_ZERO_UART=PE4,\n\nZ_ONE_EN=PD4,  Z_ONE_STEP=PE2,  Z_ONE_DIR=PE3,  Z_ONE_UART=PE1,\n\nZ_TWO_EN=PE0,  Z_TWO_STEP=PE6,  Z_TWO_DIR=PA14, Z_TWO_UART=PD3,\n\n\n\nHEATER_BED=PA3, HEATER_HE=PA2, HEATER_LED=PB10,\n\nTEMP_BED=PF3, TEMP_HE=PF4, TEMP_CHM=PF5,\n\nBAY_1=PD12, BEDFAN=PA8, NMFAN=PE5, BUZZ=PD15,\n\nENDSTOP_Z=PG10,  ENDSTOP_X=PG6,  ENDSTOP_Y=PG9, BTTFS=PG15'}, 'stepper_z': {'endstop_pin': 'probe:z_virtual_endstop', 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'enable_pin': '!Z_ZERO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200', 'position_max': '200', 'position_min': '-10', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'probe': {'pin': 'nhk:gpio10', 'z_offset': '6.345', 'x_offset': '0', 'y_offset': '19.75', 'speed': '8.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.0075', 'samples_tolerance_retries': '3'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '120', 'retries': '3', 'retry_tolerance': '0.0075', 'horizontal_move_z': '14'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '8', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'probe_count': '5,5', 'zero_reference_position': '150, 150', 'algorithm': 'bicubic', 'fade_start': '0.6', 'fade_end': '10', 'fade_target': '0'}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': '3', 'color_order': 'RGBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'stepper_x': {'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'enable_pin': '!B_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true', 'endstop_pin': 'nhk:gpio12'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'interpolate': 'false', 'run_current': '1', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'enable_pin': '!A_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'ENDSTOP_Y', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'interpolate': 'false', 'run_current': '1', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'enable_pin': '!Z_ONE_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'enable_pin': '!Z_TWO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00'}, 'output_pin act_led': {'pin': '!nhk:gpio8'}, 'adxl345': {'cs_pin': 'nhk:gpio21', 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_mosi_pin': 'nhk:gpio20', 'spi_software_miso_pin': 'nhk:gpio19'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n155, 155, 20'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor Nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'sensor_pin': 'nhk:gpio26', 'pullup_resistor': '2200', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'filament_motion_sensor filament_sensor': {'detection_length': '14', 'extruder': 'extruder', 'switch_pin': '^BTTFS', 'pause_on_runout': 'True', 'insert_gcode': '\nNozzle_ON', 'runout_gcode': '\nBEEP_ERROR\nPAUSE'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_OFF': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_ON': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1'}, 'gcode_macro _AIR_FILTER_VARIABLES': {'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1', 'gcode': ''}, 'gcode_macro RESET_AIR_FILTER': {'description': 'Resets the air-filter replacement timer', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }'}, 'gcode_macro QUERY_AIR_FILTER': {'description': 'Displays the amount of time the air filter has run since it was last reset.', 'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }'}, 'delayed_gcode _AIR_FILTER_TIMER': {'initial_duration': '1', 'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1"}, 'delayed_gcode _AIR_FILTER_FLUSH_TIMER': {'initial_duration': '300', 'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300"}, 'gcode_macro HEATSOAKER': {'description': 'HeatSoak for an Hour', 'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999'}, 'gcode_macro BEEP': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}'}, 'gcode_macro BEEP_SUCCESS': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000'}, 'gcode_macro BEEP_ERROR': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100'}, 'gcode_macro CG28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CHOME': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CENTER_ACCURACY': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY'}, 'gcode_macro Lights_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro Lights_ON': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25'}, 'gcode_macro PID_HOTEND': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260'}, 'gcode_macro PID_BED': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110'}, 'gcode_macro MANUAL_FLOW_CALIBRATION': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'delayed_gcode HEATSOAK_DELAY': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}'}, 'gcode_macro HEATSOAK_TIMER': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}'}, 'gcode_macro PARK_FRONT': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT'}, 'gcode_macro PARK_FRONT_LOW': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW'}, 'gcode_macro PARK_REAR': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR'}, 'gcode_macro PARK_CENTER': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER'}, 'gcode_macro PARK_BED': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED'}, 'gcode_macro FORCE_BED_DOWN': {'description': 'Force move bed down without homing', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_UP': {'description': 'Force move bed down without homing.', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_LOCK': {'description': 'Active Z steppers to lock down the bed, Without Homing', 'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90'}, 'gcode_macro FORCE_BED_UNLOCK': {'description': 'Unlocks the Bed', 'gcode': '\nM84'}, 'delayed_gcode FILTER_AIR_STOP': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}'}, 'gcode_macro PRIME_BLOB': {'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.', 'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state'}, 'gcode_macro RINGING_TOWER': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_MZV': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_EI': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro PRIMING': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107'}, 'gcode_macro CLEAN': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro Z_TILT_ADJUST': {'rename_existing': '_Z_TILT_ADJUST', 'description': '', 'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro Smart_Park': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'exclude_object': {}, 'skew_correction': {}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '10000', 'max_z_velocity': '15', 'max_z_accel': '50', 'square_corner_velocity': '5.0'}, 'input_shaper': {'shaper_freq_x': '58.8', 'shaper_type_x': 'zv', 'shaper_freq_y': '43.4', 'shaper_type_y': 'mzv'}, 'bed_mesh default': {'version': '1', 'points': '\n0.048750, 0.068750, 0.040000, 0.078750, 0.070000\n0.050000, 0.067500, 0.053750, 0.063750, 0.090000\n0.006250, 0.036250, 0.000000, 0.045000, 0.075000\n0.021250, 0.082500, 0.071250, 0.081250, 0.098750\n-0.025000, 0.068750, 0.046250, 0.088750, 0.078750', 'tension': '0.2', 'min_x': '40.0', 'algo': 'bicubic', 'y_count': '5', 'mesh_y_pps': '2', 'min_y': '40.0', 'x_count': '5', 'max_y': '260.0', 'mesh_x_pps': '2', 'max_x': '260.0'}, 'skew_correction my_skew_profile': {'xy_skew': '-0.000802972249612', 'xz_skew': '0.0', 'yz_skew': '0.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': '\\\\'}, 'gcode_macro cancel_print': {'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}', 'rename_existing': 'BASE_PAUSE', 'description': 'Pauses Print'}, 'gcode_macro resume': {'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'rename_existing': 'BASE_RESUME', 'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro polylite_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026', 'description': 'G-Code macro'}, 'gcode_macro polylite_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro sparta_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325', 'description': 'G-Code macro'}, 'gcode_macro sparta_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300', 'description': 'G-Code macro'}, 'gcode_macro sparta_purple': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_abs': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polylite_yellow_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro filament_reset': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro abs_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_reset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro clean_filament_cold_pull': {'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0', 'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince'}, 'gcode_macro manual_clean': {'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0', 'description': 'Grab a Brush ready, Start Scrubbing!'}, 'gcode_macro load_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro load_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro polyterra_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031', 'description': 'G-Code macro'}, 'gcode_macro polyterra_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro polyterra_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550', 'description': 'G-Code macro'}, 'gcode_macro polyterra_candy': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035', 'description': 'G-Code macro'}, 'gcode_macro polyterra_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polyterra_blue': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445', 'description': 'G-Code macro'}, 'gcode_macro polyterra_lav': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054', 'description': 'G-Code macro'}, 'gcode_macro ziro_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252', 'description': 'G-Code macro'}, 'gcode_macro jessie_tan': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029', 'description': 'G-Code macro'}, 'gcode_macro sunlu_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER', 'description': 'Run standard input shaper test for all axes'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS', 'description': 'Run custom demi-axe test to analyze belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400', 'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations'}, 'gcode_macro xybelt_tension': {'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }', 'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': 300.0, 'verbose': True}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_BED', 'min_temp': -20.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.5, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 33.946, 'pid_ki': 0.997, 'pid_kd': 288.961, 'heater_pin': 'HEATER_BED', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'tmc2209 extruder': {'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.1, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'PT1000', 'pullup_resistor': 2200.0, 'sensor_pin': 'nhk:gpio29', 'min_temp': 10.0, 'max_temp': 280.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.239, 'pid_ki': 1.965, 'pid_kd': 87.574, 'heater_pin': 'nhk:gpio9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'nhk:gpio23', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!nhk:gpio24', 'rotation_distance': 47.088, 'full_steps_per_rotation': 200, 'gear_ratio': [[9.0, 1.0]], 'enable_pin': '!nhk:gpio25'}, 'firmware_retraction': {'retract_length': 0.5, 'retract_speed': 30.0, 'unretract_extra_length': 0.0, 'unretract_speed': 30.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'nhk:gpio5', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'nhk:gpio6'}, 'output_pin caselight': {'pwm': True, 'pin': 'HEATER_LED', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.15, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_CHM', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'temperature_sensor pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'heater_fan vent': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BAY_1', 'fan_speed': 0.4}, 'fan_generic boombox': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'NMFAN'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BEDFAN'}, 'output_pin beeper': {'pwm': True, 'pin': 'BUZZ', 'cycle_time': 0.0005, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'temperature_sensor nitehawkchip': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'nhk', 'min_temp': 0.0, 'max_temp': 100.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['B_MOTOR_EN', 'PF14'], ['B_MOTOR_STEP', 'PF13'], ['B_MOTOR_DIR', 'PF12'], ['B_MOTOR_UART', 'PC4'], ['A_MOTOR_EN', 'PF15'], ['A_MOTOR_STEP', 'PG0'], ['A_MOTOR_DIR', 'PG1'], ['A_MOTOR_UART', 'PD11'], ['EXTRUDER_EN', 'PG5'], ['EXTRUDER_STEP', 'PF11'], ['EXTRUDER_DIR', 'PG3'], ['EXTRUDER_UART', 'PC6'], ['Z_ZERO_EN', 'PF1'], ['Z_ZERO_STEP', 'PC13'], ['Z_ZERO_DIR', 'PF0'], ['Z_ZERO_UART', 'PE4'], ['Z_ONE_EN', 'PD4'], ['Z_ONE_STEP', 'PE2'], ['Z_ONE_DIR', 'PE3'], ['Z_ONE_UART', 'PE1'], ['Z_TWO_EN', 'PE0'], ['Z_TWO_STEP', 'PE6'], ['Z_TWO_DIR', 'PA14'], ['Z_TWO_UART', 'PD3'], ['HEATER_BED', 'PA3'], ['HEATER_HE', 'PA2'], ['HEATER_LED', 'PB10'], ['TEMP_BED', 'PF3'], ['TEMP_HE', 'PF4'], ['TEMP_CHM', 'PF5'], ['BAY_1', 'PD12'], ['BEDFAN', 'PA8'], ['NMFAN', 'PE5'], ['BUZZ', 'PD15'], ['ENDSTOP_Z', 'PG10'], ['ENDSTOP_X', 'PG6'], ['ENDSTOP_Y', 'PG9'], ['BTTFS', 'PG15']]}, 'probe': {'z_offset': 6.345, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'nhk:gpio10', 'speed': 8.0, 'lift_speed': 8.0, 'x_offset': 0.0, 'y_offset': 19.75, 'samples': 3, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.0075, 'samples_tolerance_retries': 3}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 3, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 14.0, 'speed': 120.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [150.0, 150.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 8.0, 'speed': 150.0, 'fade_start': 0.6, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.04875, 0.06875, 0.04, 0.07875, 0.07], [0.05, 0.0675, 0.05375, 0.06375, 0.09], [0.00625, 0.03625, 0.0, 0.045, 0.075], [0.02125, 0.0825, 0.07125, 0.08125, 0.09875], [-0.025, 0.06875, 0.04625, 0.08875, 0.07875]], 'min_x': 40.0, 'max_x': 260.0, 'min_y': 40.0, 'max_y': 260.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': 3, 'color_order': ['RGBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!B_MOTOR_EN', 'endstop_pin': 'nhk:gpio12', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!A_MOTOR_EN', 'endstop_pin': 'ENDSTOP_Y', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ZERO_EN', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 200.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ONE_EN'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_TWO_EN'}, 'output_pin act_led': {'pwm': False, 'pin': '!nhk:gpio8', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'nhk:gpio21', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_miso_pin': 'nhk:gpio19', 'spi_software_mosi_pin': 'nhk:gpio20'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[155.0, 155.0, 20.0]], 'accel_chip': 'adxl345'}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'pullup_resistor': 2200.0, 'inline_resistor': 0.0, 'sensor_pin': 'nhk:gpio26', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'filament_motion_sensor filament_sensor': {'switch_pin': '^BTTFS', 'extruder': 'extruder', 'detection_length': 14.0, 'pause_on_runout': True, 'runout_gcode': '\nBEEP_ERROR\nPAUSE', 'insert_gcode': '\nNozzle_ON', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro fs_off': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro fs_on': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro _air_filter_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1'}, 'gcode_macro reset_air_filter': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }', 'description': 'Resets the air-filter replacement timer'}, 'gcode_macro query_air_filter': {'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }', 'description': 'Displays the amount of time the air filter has run since it was last reset.'}, 'delayed_gcode _air_filter_timer': {'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1", 'initial_duration': 1.0}, 'delayed_gcode _air_filter_flush_timer': {'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300", 'initial_duration': 300.0}, 'gcode_macro heatsoaker': {'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999', 'description': 'HeatSoak for an Hour'}, 'gcode_macro beep': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro beep_success': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000', 'description': 'G-Code macro'}, 'gcode_macro beep_error': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100', 'description': 'G-Code macro'}, 'gcode_macro cg28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro chome': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro center_accuracy': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro lights_on': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25', 'description': 'G-Code macro'}, 'gcode_macro pid_hotend': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260', 'description': 'G-Code macro'}, 'gcode_macro pid_bed': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110', 'description': 'G-Code macro'}, 'gcode_macro manual_flow_calibration': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'delayed_gcode heatsoak_delay': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro heatsoak_timer': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}', 'description': 'G-Code macro'}, 'gcode_macro park_front': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT', 'description': 'G-Code macro'}, 'gcode_macro park_front_low': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW', 'description': 'G-Code macro'}, 'gcode_macro park_rear': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR', 'description': 'G-Code macro'}, 'gcode_macro park_center': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER', 'description': 'G-Code macro'}, 'gcode_macro park_bed': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED', 'description': 'G-Code macro'}, 'gcode_macro force_bed_down': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing'}, 'gcode_macro force_bed_up': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing.'}, 'gcode_macro force_bed_lock': {'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90', 'description': 'Active Z steppers to lock down the bed, Without Homing'}, 'gcode_macro force_bed_unlock': {'gcode': '\nM84', 'description': 'Unlocks the Bed'}, 'delayed_gcode filter_air_stop': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro print_end': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro prime_blob': {'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state', 'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.'}, 'gcode_macro ringing_tower': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_mzv': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_ei': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro priming': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000', 'description': 'G-Code macro'}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount'}, 'gcode_macro z_tilt_adjust': {'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0', 'rename_existing': '_Z_TILT_ADJUST', 'description': ''}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'skew_correction my_skew_profile': {'xy_skew': -0.000802972249612, 'xz_skew': 0.0, 'yz_skew': 0.0}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'zv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 58.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 43.4}, 'printer': {'max_velocity': 300.0, 'max_accel': 10000.0, 'max_accel_to_decel': 5000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 50.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': True, 'save_config_pending_items': {'bed_mesh default': {'version': '1', 'points': '\n  0.097080, 0.023330, -0.020420\n  0.029580, -0.005420, -0.024170\n  0.018330, 0.008330, -0.014170\n  0.027080, 0.005830, -0.022920', 'x_count': '3', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '98.74', 'max_x': '201.25', 'min_y': '80.07', 'max_y': '219.9'}}}}
2024-02-08 05:28:30,832 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-08 05:28:30,835 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-08 05:28:30,835 [printer.py:reinit()] - # Extruders: 1
2024-02-08 05:28:30,835 [printer.py:reinit()] - # Temperature devices: 6
2024-02-08 05:28:30,835 [printer.py:reinit()] - # Fans: 5
2024-02-08 05:28:30,835 [printer.py:reinit()] - # Output pins: 3
2024-02-08 05:28:30,835 [printer.py:reinit()] - # Leds: 1
2024-02-08 05:28:30,856 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-08 05:28:30,860 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-08 05:28:31,144 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor Pi&temperature_sensor Octopus&temperature_sensor NitehawkChip&temperature_sensor Nitehawk&fan&fan_generic BoomBox&fan_generic BedFans&heater_fan hotend_fan&heater_fan Vent&filament_motion_sensor filament_sensor&output_pin caselight&output_pin beeper&output_pin act_led&neopixel sb_leds
2024-02-08 05:28:31,148 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-08 05:28:31,148 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-08 05:28:31,148 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-08 05:28:31,149 [screen.py:init_klipper()] - Printer initialized
2024-02-08 05:28:31,149 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-08 05:28:31,149 [printer.py:change_state()] - Adding callback for state: ready
2024-02-08 05:28:31,152 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-08 05:28:31,222 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-08 05:28:31,239 [main_menu.py:add_device()] - Adding device: extruder
2024-02-08 05:28:31,246 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-08 05:28:31,251 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-08 05:28:31,251 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-08 05:28:31,252 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-08 05:28:31,252 [main_menu.py:add_device()] - Adding device: temperature_sensor NitehawkChip
2024-02-08 05:28:31,252 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-08 05:28:31,277 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-08 05:28:31,297 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-08 05:28:31,301 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor Pi', 'temperature_sensor Octopus', 'temperature_sensor NitehawkChip', 'temperature_sensor Nitehawk', 'extruder']
2024-02-08 05:28:31,308 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-08 05:28:31,309 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-08 05:28:32,962 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-08 05:28:32,962 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-08 05:28:32,966 [screen.py:_load_panel()] - Loading panel: menu
2024-02-08 05:28:33,151 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-08 05:28:33,166 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-08 05:28:33,181 [menu.py:arrangeMenuItems()] - X > more power
2024-02-08 05:28:33,183 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-08 05:28:33,192 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-08 05:28:35,659 [screen.py:_load_panel()] - Loading panel: settings
2024-02-08 05:28:35,778 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > settings
2024-02-08 05:28:40,483 [screen_panel.py:on_dropdown_change()] - [main] theme changed to z-bolt
2024-02-08 05:28:44,975 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-08 05:28:44,975 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-88-gc832c90
2024-02-08 05:28:44,975 [functions.py:log_start()] - Python version: 3.11
2024-02-08 05:28:45,044 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-08 05:28:45,044 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-08 05:28:45,057 [config.py:log_config()] -  ===== Config File =====
[printer Zarya]

[menu __main my_macros_menu]
name = Macros

[menu __main my_macros_menu sub_macro_item]
name = PARK CENTER
method = printer.gcode.script
params = {"script":"PARK_CENTER"}

[menu __main my_macros_menu sub_macro_item2]
name = Force Bed Down
method = printer.gcode.script
params = {"script":"force_bed_down DISTANCE=4"}

[menu __main my_macros_menu sub_macro_item3]
name = HEATSOAKER
method = printer.gcode.script
params = {"script":"HEATSOAKER"}
=======================
2024-02-08 05:28:45,063 [config.py:__init__()] - ====== Saved Def ======

[main]
screen_blanking = 120
24htime = False
side_macro_shortcut = False
font_size = large
only_heaters = True
show_heater_power = True
invert_z = True
move_speed_xy = 199

[displayed_macros Printer]
attach_probe = False
bed_mesh_calibrate = False
attach_probe_lock = False
center_toolhead = False
dock_probe = False
g32 = False
dock_probe_unlock = False
jessie_tan = False
center_accuracy = False
filament_reset = False
jessie_soulblack = False
m900 = False
preheat = False
polyterra_white = False
nmfan_on = False
polyterra_marble = False
polylite_black = False
purgeline = False
probe_calibrate = False
probe_accuracy = False
polyterra_gray = False
polylite_gray = False
polyterra_black = False
status_busy = False
print_start = False
status_meshing = False
status_calibrating_z = False
test_speed = False
status_off = False
status_leveling = False
status_ready = False
set_nozzle_leds_on = False
set_nozzle_leds_off = False
set_logo_leds_off = False
status_heating = False
status_homing = False
status_cleaning = False
status_printing = False
abs_offset = False
beep = False
blk_paramount = False
cg28 = False
polyterra_blue = False
pause = False
measure_resonnances_x = False
m600 = False
measure_resonnances_y = False
polyterra_candy = False
polyterra_purp = False
sparta_black = False
query_air_filter = False
print_end = False
z_tilt_adjust = False
reset_air_filter = False
polylite_black_asa = False
ziro_marble = False
ziro_sparkle = False
sparta_purple = False
status_caution = False
sparta_gray = False
calibrate_z = False
cancel_print = False
axes_shaper_calibration = False
beep_error = False
belts_shaper_calibration = False
beep_success = False
excitate_axis_at_freq = False
compute_flow_multiplier = False
flow_multiplier_calibration = False
manual_flow_calibration = False
line_purge = False
prime_blob = False
polylite_black_abs = False
polylite_yellow_asa = False
pressure_advance_calibration = False
setup_kamp_meshing = False
sparta_reset = False
setup_line_purge = False
sparta_offset = False
print_reset = False

[graph Printer]
heater_bed = False
extruder = False

=======================
2024-02-08 05:28:45,063 [config.py:__init__()] - Configured printers: [
  {
    "Zarya": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-08 05:28:45,107 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-08 05:28:45,107 [config.py:install_language()] - Using lang en
2024-02-08 05:28:45,118 [screen.py:__init__()] - Screen resolution: 800x480
2024-02-08 05:28:45,119 [KlippyGtk.py:__init__()] - Font size: 18.0 (large)
2024-02-08 05:28:45,353 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 120
2024-02-08 05:28:45,359 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-08 05:28:45,364 [screen.py:initial_connection()] - Default printer: None
2024-02-08 05:28:45,396 [screen.py:connect_printer()] - Connecting to printer: Zarya
2024-02-08 05:28:45,396 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-08 05:28:45,437 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-08 05:28:45,446 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-08 05:28:45,456 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-08 05:28:45,463 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-08 05:28:45,463 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-08 05:28:45,470 [_logging.py:info()] - Websocket connected
2024-02-08 05:28:45,471 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-08 05:28:45,545 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-08 05:28:45,553 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-08 05:28:45,554 [printer.py:configure_cameras()] - Cameras: []
2024-02-08 05:28:45,554 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-08 05:28:45,561 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-08 05:28:45,852 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-08 05:28:45,859 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_prefix': '\\\\'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pauses Print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'gcode_macro POLYLITE_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026'}, 'gcode_macro POLYLITE_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro SPARTA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325'}, 'gcode_macro SPARTA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300'}, 'gcode_macro SPARTA_PURPLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro POLYLITE_BLACK_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510'}, 'gcode_macro POLYLITE_BLACK_ABS': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYLITE_YELLOW_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro FILAMENT_RESET': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro ABS_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0'}, 'gcode_macro PRINT_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0'}, 'gcode_macro PRINT_RESET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0'}, 'gcode_macro Clean_Filament_Cold_Pull': {'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince', 'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0'}, 'gcode_macro Manual_Clean': {'description': 'Grab a Brush ready, Start Scrubbing!', 'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0'}, 'gcode_macro LOAD_FILAMENT_PLA': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro LOAD_FILAMENT_ABS': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_PLA': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_ABS': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro POLYTERRA_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031'}, 'gcode_macro POLYTERRA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro POLYTERRA_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550'}, 'gcode_macro POLYTERRA_CANDY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035'}, 'gcode_macro POLYTERRA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYTERRA_BLUE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445'}, 'gcode_macro POLYTERRA_LAV': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054'}, 'gcode_macro ZIRO_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252'}, 'gcode_macro JESSIE_TAN': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029'}, 'gcode_macro SUNLU_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066'}, 'gcode_macro M600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Run standard input shaper test for all axes', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Run custom demi-axe test to analyze belts on CoreXY printers', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations', 'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400'}, 'gcode_macro XYBelt_Tension': {'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115', 'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': '300.0', 'verbose': 'True'}, 'heater_bed': {'pwm_cycle_time': '0.0166', 'heater_pin': 'HEATER_BED', 'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_BED', 'max_power': '0.5', 'min_temp': '-20', 'max_temp': '120', 'control': 'pid', 'pid_kp': '33.946', 'pid_ki': '0.997', 'pid_kd': '288.961'}, 'extruder': {'step_pin': 'nhk:gpio23', 'dir_pin': '!nhk:gpio24', 'enable_pin': '!nhk:gpio25', 'rotation_distance': '47.088', 'gear_ratio': '9:1', 'microsteps': '16', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'nhk:gpio9', 'sensor_pin': 'nhk:gpio29', 'pullup_resistor': '2200', 'sensor_type': 'PT1000', 'min_temp': '10', 'max_temp': '280', 'max_power': '1.0', 'min_extrude_temp': '10', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'control': 'pid', 'pid_kp': '26.239', 'pid_ki': '1.965', 'pid_kd': '87.574'}, 'tmc2209 extruder': {'stealthchop_threshold': '0', 'run_current': '0.6', 'interpolate': 'false', 'sense_resistor': '0.100', 'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1'}, 'firmware_retraction': {'retract_length': '0.5', 'retract_speed': '30', 'unretract_speed': '30'}, 'heater_fan hotend_fan': {'pin': 'nhk:gpio5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'nhk:gpio6', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.010'}, 'output_pin caselight': {'pin': 'HEATER_LED', 'pwm': 'true', 'cycle_time': '0.01', 'value': '0.15'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_CHM', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'temperature_sensor Pi': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'heater_fan Vent': {'pin': 'BAY_1', 'max_power': '1', 'kick_start_time': '0.5', 'shutdown_speed': '0', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '0.40', 'cycle_time': '0.008'}, 'fan_generic BoomBox': {'pin': 'NMFAN', 'shutdown_speed': '0.0', 'hardware_pwm': 'False', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.008'}, 'fan_generic BedFans': {'pin': 'BEDFAN', 'kick_start_time': '0.5', 'cycle_time': '0.008'}, 'output_pin beeper': {'pin': 'BUZZ', 'value': '0', 'shutdown_value': '0', 'pwm': 'True', 'cycle_time': '0.0005'}, 'temperature_sensor NitehawkChip': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'nhk', 'min_temp': '0', 'max_temp': '100'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00'}, 'board_pins': {'aliases': '\n\n\nB_MOTOR_EN=PF14,  B_MOTOR_STEP=PF13,  B_MOTOR_DIR=PF12,  B_MOTOR_UART=PC4,\n\nA_MOTOR_EN=PF15,  A_MOTOR_STEP=PG0,  A_MOTOR_DIR=PG1,  A_MOTOR_UART=PD11,\n\nEXTRUDER_EN=PG5,  EXTRUDER_STEP=PF11,  EXTRUDER_DIR=PG3,  EXTRUDER_UART=PC6,\n\n\n\nZ_ZERO_EN=PF1,  Z_ZERO_STEP=PC13,  Z_ZERO_DIR=PF0,  Z_ZERO_UART=PE4,\n\nZ_ONE_EN=PD4,  Z_ONE_STEP=PE2,  Z_ONE_DIR=PE3,  Z_ONE_UART=PE1,\n\nZ_TWO_EN=PE0,  Z_TWO_STEP=PE6,  Z_TWO_DIR=PA14, Z_TWO_UART=PD3,\n\n\n\nHEATER_BED=PA3, HEATER_HE=PA2, HEATER_LED=PB10,\n\nTEMP_BED=PF3, TEMP_HE=PF4, TEMP_CHM=PF5,\n\nBAY_1=PD12, BEDFAN=PA8, NMFAN=PE5, BUZZ=PD15,\n\nENDSTOP_Z=PG10,  ENDSTOP_X=PG6,  ENDSTOP_Y=PG9, BTTFS=PG15'}, 'stepper_z': {'endstop_pin': 'probe:z_virtual_endstop', 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'enable_pin': '!Z_ZERO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200', 'position_max': '200', 'position_min': '-10', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'probe': {'pin': 'nhk:gpio10', 'z_offset': '6.345', 'x_offset': '0', 'y_offset': '19.75', 'speed': '8.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.0075', 'samples_tolerance_retries': '3'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '120', 'retries': '3', 'retry_tolerance': '0.0075', 'horizontal_move_z': '14'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '8', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'probe_count': '5,5', 'zero_reference_position': '150, 150', 'algorithm': 'bicubic', 'fade_start': '0.6', 'fade_end': '10', 'fade_target': '0'}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': '3', 'color_order': 'RGBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'stepper_x': {'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'enable_pin': '!B_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true', 'endstop_pin': 'nhk:gpio12'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'interpolate': 'false', 'run_current': '1', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'enable_pin': '!A_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'ENDSTOP_Y', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'interpolate': 'false', 'run_current': '1', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'enable_pin': '!Z_ONE_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'enable_pin': '!Z_TWO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00'}, 'output_pin act_led': {'pin': '!nhk:gpio8'}, 'adxl345': {'cs_pin': 'nhk:gpio21', 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_mosi_pin': 'nhk:gpio20', 'spi_software_miso_pin': 'nhk:gpio19'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n155, 155, 20'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor Nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'sensor_pin': 'nhk:gpio26', 'pullup_resistor': '2200', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'filament_motion_sensor filament_sensor': {'detection_length': '14', 'extruder': 'extruder', 'switch_pin': '^BTTFS', 'pause_on_runout': 'True', 'insert_gcode': '\nNozzle_ON', 'runout_gcode': '\nBEEP_ERROR\nPAUSE'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_OFF': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_ON': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1'}, 'gcode_macro _AIR_FILTER_VARIABLES': {'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1', 'gcode': ''}, 'gcode_macro RESET_AIR_FILTER': {'description': 'Resets the air-filter replacement timer', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }'}, 'gcode_macro QUERY_AIR_FILTER': {'description': 'Displays the amount of time the air filter has run since it was last reset.', 'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }'}, 'delayed_gcode _AIR_FILTER_TIMER': {'initial_duration': '1', 'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1"}, 'delayed_gcode _AIR_FILTER_FLUSH_TIMER': {'initial_duration': '300', 'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300"}, 'gcode_macro HEATSOAKER': {'description': 'HeatSoak for an Hour', 'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999'}, 'gcode_macro BEEP': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}'}, 'gcode_macro BEEP_SUCCESS': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000'}, 'gcode_macro BEEP_ERROR': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100'}, 'gcode_macro CG28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CHOME': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CENTER_ACCURACY': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY'}, 'gcode_macro Lights_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro Lights_ON': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25'}, 'gcode_macro PID_HOTEND': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260'}, 'gcode_macro PID_BED': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110'}, 'gcode_macro MANUAL_FLOW_CALIBRATION': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'delayed_gcode HEATSOAK_DELAY': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}'}, 'gcode_macro HEATSOAK_TIMER': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}'}, 'gcode_macro PARK_FRONT': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT'}, 'gcode_macro PARK_FRONT_LOW': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW'}, 'gcode_macro PARK_REAR': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR'}, 'gcode_macro PARK_CENTER': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER'}, 'gcode_macro PARK_BED': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED'}, 'gcode_macro FORCE_BED_DOWN': {'description': 'Force move bed down without homing', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_UP': {'description': 'Force move bed down without homing.', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_LOCK': {'description': 'Active Z steppers to lock down the bed, Without Homing', 'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90'}, 'gcode_macro FORCE_BED_UNLOCK': {'description': 'Unlocks the Bed', 'gcode': '\nM84'}, 'delayed_gcode FILTER_AIR_STOP': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}'}, 'gcode_macro PRIME_BLOB': {'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.', 'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state'}, 'gcode_macro RINGING_TOWER': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_MZV': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_EI': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro PRIMING': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107'}, 'gcode_macro CLEAN': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro Z_TILT_ADJUST': {'rename_existing': '_Z_TILT_ADJUST', 'description': '', 'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro Smart_Park': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'exclude_object': {}, 'skew_correction': {}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '10000', 'max_z_velocity': '15', 'max_z_accel': '50', 'square_corner_velocity': '5.0'}, 'input_shaper': {'shaper_freq_x': '58.8', 'shaper_type_x': 'zv', 'shaper_freq_y': '43.4', 'shaper_type_y': 'mzv'}, 'bed_mesh default': {'version': '1', 'points': '\n0.048750, 0.068750, 0.040000, 0.078750, 0.070000\n0.050000, 0.067500, 0.053750, 0.063750, 0.090000\n0.006250, 0.036250, 0.000000, 0.045000, 0.075000\n0.021250, 0.082500, 0.071250, 0.081250, 0.098750\n-0.025000, 0.068750, 0.046250, 0.088750, 0.078750', 'tension': '0.2', 'min_x': '40.0', 'algo': 'bicubic', 'y_count': '5', 'mesh_y_pps': '2', 'min_y': '40.0', 'x_count': '5', 'max_y': '260.0', 'mesh_x_pps': '2', 'max_x': '260.0'}, 'skew_correction my_skew_profile': {'xy_skew': '-0.000802972249612', 'xz_skew': '0.0', 'yz_skew': '0.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': '\\\\'}, 'gcode_macro cancel_print': {'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}', 'rename_existing': 'BASE_PAUSE', 'description': 'Pauses Print'}, 'gcode_macro resume': {'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'rename_existing': 'BASE_RESUME', 'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro polylite_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026', 'description': 'G-Code macro'}, 'gcode_macro polylite_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro sparta_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325', 'description': 'G-Code macro'}, 'gcode_macro sparta_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300', 'description': 'G-Code macro'}, 'gcode_macro sparta_purple': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_abs': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polylite_yellow_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro filament_reset': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro abs_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_reset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro clean_filament_cold_pull': {'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0', 'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince'}, 'gcode_macro manual_clean': {'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0', 'description': 'Grab a Brush ready, Start Scrubbing!'}, 'gcode_macro load_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro load_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro polyterra_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031', 'description': 'G-Code macro'}, 'gcode_macro polyterra_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro polyterra_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550', 'description': 'G-Code macro'}, 'gcode_macro polyterra_candy': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035', 'description': 'G-Code macro'}, 'gcode_macro polyterra_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polyterra_blue': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445', 'description': 'G-Code macro'}, 'gcode_macro polyterra_lav': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054', 'description': 'G-Code macro'}, 'gcode_macro ziro_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252', 'description': 'G-Code macro'}, 'gcode_macro jessie_tan': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029', 'description': 'G-Code macro'}, 'gcode_macro sunlu_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER', 'description': 'Run standard input shaper test for all axes'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS', 'description': 'Run custom demi-axe test to analyze belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400', 'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations'}, 'gcode_macro xybelt_tension': {'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }', 'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': 300.0, 'verbose': True}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_BED', 'min_temp': -20.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.5, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 33.946, 'pid_ki': 0.997, 'pid_kd': 288.961, 'heater_pin': 'HEATER_BED', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'tmc2209 extruder': {'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.1, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'PT1000', 'pullup_resistor': 2200.0, 'sensor_pin': 'nhk:gpio29', 'min_temp': 10.0, 'max_temp': 280.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.239, 'pid_ki': 1.965, 'pid_kd': 87.574, 'heater_pin': 'nhk:gpio9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'nhk:gpio23', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!nhk:gpio24', 'rotation_distance': 47.088, 'full_steps_per_rotation': 200, 'gear_ratio': [[9.0, 1.0]], 'enable_pin': '!nhk:gpio25'}, 'firmware_retraction': {'retract_length': 0.5, 'retract_speed': 30.0, 'unretract_extra_length': 0.0, 'unretract_speed': 30.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'nhk:gpio5', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'nhk:gpio6'}, 'output_pin caselight': {'pwm': True, 'pin': 'HEATER_LED', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.15, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_CHM', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'temperature_sensor pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'heater_fan vent': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BAY_1', 'fan_speed': 0.4}, 'fan_generic boombox': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'NMFAN'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BEDFAN'}, 'output_pin beeper': {'pwm': True, 'pin': 'BUZZ', 'cycle_time': 0.0005, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'temperature_sensor nitehawkchip': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'nhk', 'min_temp': 0.0, 'max_temp': 100.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['B_MOTOR_EN', 'PF14'], ['B_MOTOR_STEP', 'PF13'], ['B_MOTOR_DIR', 'PF12'], ['B_MOTOR_UART', 'PC4'], ['A_MOTOR_EN', 'PF15'], ['A_MOTOR_STEP', 'PG0'], ['A_MOTOR_DIR', 'PG1'], ['A_MOTOR_UART', 'PD11'], ['EXTRUDER_EN', 'PG5'], ['EXTRUDER_STEP', 'PF11'], ['EXTRUDER_DIR', 'PG3'], ['EXTRUDER_UART', 'PC6'], ['Z_ZERO_EN', 'PF1'], ['Z_ZERO_STEP', 'PC13'], ['Z_ZERO_DIR', 'PF0'], ['Z_ZERO_UART', 'PE4'], ['Z_ONE_EN', 'PD4'], ['Z_ONE_STEP', 'PE2'], ['Z_ONE_DIR', 'PE3'], ['Z_ONE_UART', 'PE1'], ['Z_TWO_EN', 'PE0'], ['Z_TWO_STEP', 'PE6'], ['Z_TWO_DIR', 'PA14'], ['Z_TWO_UART', 'PD3'], ['HEATER_BED', 'PA3'], ['HEATER_HE', 'PA2'], ['HEATER_LED', 'PB10'], ['TEMP_BED', 'PF3'], ['TEMP_HE', 'PF4'], ['TEMP_CHM', 'PF5'], ['BAY_1', 'PD12'], ['BEDFAN', 'PA8'], ['NMFAN', 'PE5'], ['BUZZ', 'PD15'], ['ENDSTOP_Z', 'PG10'], ['ENDSTOP_X', 'PG6'], ['ENDSTOP_Y', 'PG9'], ['BTTFS', 'PG15']]}, 'probe': {'z_offset': 6.345, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'nhk:gpio10', 'speed': 8.0, 'lift_speed': 8.0, 'x_offset': 0.0, 'y_offset': 19.75, 'samples': 3, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.0075, 'samples_tolerance_retries': 3}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 3, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 14.0, 'speed': 120.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [150.0, 150.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 8.0, 'speed': 150.0, 'fade_start': 0.6, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.04875, 0.06875, 0.04, 0.07875, 0.07], [0.05, 0.0675, 0.05375, 0.06375, 0.09], [0.00625, 0.03625, 0.0, 0.045, 0.075], [0.02125, 0.0825, 0.07125, 0.08125, 0.09875], [-0.025, 0.06875, 0.04625, 0.08875, 0.07875]], 'min_x': 40.0, 'max_x': 260.0, 'min_y': 40.0, 'max_y': 260.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': 3, 'color_order': ['RGBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!B_MOTOR_EN', 'endstop_pin': 'nhk:gpio12', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!A_MOTOR_EN', 'endstop_pin': 'ENDSTOP_Y', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ZERO_EN', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 200.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ONE_EN'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_TWO_EN'}, 'output_pin act_led': {'pwm': False, 'pin': '!nhk:gpio8', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'nhk:gpio21', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_miso_pin': 'nhk:gpio19', 'spi_software_mosi_pin': 'nhk:gpio20'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[155.0, 155.0, 20.0]], 'accel_chip': 'adxl345'}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'pullup_resistor': 2200.0, 'inline_resistor': 0.0, 'sensor_pin': 'nhk:gpio26', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'filament_motion_sensor filament_sensor': {'switch_pin': '^BTTFS', 'extruder': 'extruder', 'detection_length': 14.0, 'pause_on_runout': True, 'runout_gcode': '\nBEEP_ERROR\nPAUSE', 'insert_gcode': '\nNozzle_ON', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro fs_off': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro fs_on': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro _air_filter_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1'}, 'gcode_macro reset_air_filter': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }', 'description': 'Resets the air-filter replacement timer'}, 'gcode_macro query_air_filter': {'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }', 'description': 'Displays the amount of time the air filter has run since it was last reset.'}, 'delayed_gcode _air_filter_timer': {'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1", 'initial_duration': 1.0}, 'delayed_gcode _air_filter_flush_timer': {'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300", 'initial_duration': 300.0}, 'gcode_macro heatsoaker': {'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999', 'description': 'HeatSoak for an Hour'}, 'gcode_macro beep': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro beep_success': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000', 'description': 'G-Code macro'}, 'gcode_macro beep_error': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100', 'description': 'G-Code macro'}, 'gcode_macro cg28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro chome': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro center_accuracy': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro lights_on': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25', 'description': 'G-Code macro'}, 'gcode_macro pid_hotend': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260', 'description': 'G-Code macro'}, 'gcode_macro pid_bed': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110', 'description': 'G-Code macro'}, 'gcode_macro manual_flow_calibration': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'delayed_gcode heatsoak_delay': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro heatsoak_timer': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}', 'description': 'G-Code macro'}, 'gcode_macro park_front': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT', 'description': 'G-Code macro'}, 'gcode_macro park_front_low': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW', 'description': 'G-Code macro'}, 'gcode_macro park_rear': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR', 'description': 'G-Code macro'}, 'gcode_macro park_center': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER', 'description': 'G-Code macro'}, 'gcode_macro park_bed': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED', 'description': 'G-Code macro'}, 'gcode_macro force_bed_down': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing'}, 'gcode_macro force_bed_up': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing.'}, 'gcode_macro force_bed_lock': {'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90', 'description': 'Active Z steppers to lock down the bed, Without Homing'}, 'gcode_macro force_bed_unlock': {'gcode': '\nM84', 'description': 'Unlocks the Bed'}, 'delayed_gcode filter_air_stop': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro print_end': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro prime_blob': {'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state', 'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.'}, 'gcode_macro ringing_tower': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_mzv': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_ei': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro priming': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000', 'description': 'G-Code macro'}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount'}, 'gcode_macro z_tilt_adjust': {'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0', 'rename_existing': '_Z_TILT_ADJUST', 'description': ''}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'skew_correction my_skew_profile': {'xy_skew': -0.000802972249612, 'xz_skew': 0.0, 'yz_skew': 0.0}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'zv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 58.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 43.4}, 'printer': {'max_velocity': 300.0, 'max_accel': 10000.0, 'max_accel_to_decel': 5000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 50.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': True, 'save_config_pending_items': {'bed_mesh default': {'version': '1', 'points': '\n  0.097080, 0.023330, -0.020420\n  0.029580, -0.005420, -0.024170\n  0.018330, 0.008330, -0.014170\n  0.027080, 0.005830, -0.022920', 'x_count': '3', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '98.74', 'max_x': '201.25', 'min_y': '80.07', 'max_y': '219.9'}}}}
2024-02-08 05:28:45,868 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-08 05:28:45,870 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-08 05:28:45,871 [printer.py:reinit()] - # Extruders: 1
2024-02-08 05:28:45,871 [printer.py:reinit()] - # Temperature devices: 6
2024-02-08 05:28:45,871 [printer.py:reinit()] - # Fans: 5
2024-02-08 05:28:45,871 [printer.py:reinit()] - # Output pins: 3
2024-02-08 05:28:45,871 [printer.py:reinit()] - # Leds: 1
2024-02-08 05:28:45,889 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-08 05:28:45,893 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-08 05:28:46,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor Pi&temperature_sensor Octopus&temperature_sensor NitehawkChip&temperature_sensor Nitehawk&fan&fan_generic BoomBox&fan_generic BedFans&heater_fan hotend_fan&heater_fan Vent&filament_motion_sensor filament_sensor&output_pin caselight&output_pin beeper&output_pin act_led&neopixel sb_leds
2024-02-08 05:28:46,199 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-08 05:28:46,199 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-08 05:28:46,200 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-08 05:28:46,201 [screen.py:init_klipper()] - Printer initialized
2024-02-08 05:28:46,201 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-08 05:28:46,201 [printer.py:change_state()] - Adding callback for state: ready
2024-02-08 05:28:46,205 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-08 05:28:46,280 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-08 05:28:46,298 [main_menu.py:add_device()] - Adding device: extruder
2024-02-08 05:28:46,306 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-08 05:28:46,311 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-08 05:28:46,312 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-08 05:28:46,312 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-08 05:28:46,312 [main_menu.py:add_device()] - Adding device: temperature_sensor NitehawkChip
2024-02-08 05:28:46,312 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-08 05:28:46,343 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-08 05:28:46,364 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-08 05:28:46,368 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor Pi', 'temperature_sensor Octopus', 'temperature_sensor NitehawkChip', 'temperature_sensor Nitehawk', 'extruder']
2024-02-08 05:28:46,375 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-08 05:28:46,376 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-08 05:28:48,855 [screen.py:_load_panel()] - Loading panel: temperature
2024-02-08 05:28:48,868 [temperature.py:add_device()] - Adding device: extruder
2024-02-08 05:28:48,874 [temperature.py:add_device()] - Adding device: heater_bed
2024-02-08 05:28:48,880 [temperature.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-08 05:28:48,880 [temperature.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-08 05:28:48,880 [temperature.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-08 05:28:48,880 [temperature.py:add_device()] - Adding device: temperature_sensor NitehawkChip
2024-02-08 05:28:48,880 [temperature.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-08 05:28:48,882 [temperature.py:select_heater()] - Selecting extruder
2024-02-08 05:28:48,882 [temperature.py:select_heater()] - Selecting heater_bed
2024-02-08 05:28:48,917 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-02-08 05:28:53,861 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-08 05:28:53,917 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-08 05:28:55,846 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-08 05:28:55,846 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-08 05:28:55,850 [screen.py:_load_panel()] - Loading panel: menu
2024-02-08 05:28:56,055 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-08 05:28:56,070 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-08 05:28:56,086 [menu.py:arrangeMenuItems()] - X > more power
2024-02-08 05:28:56,088 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-08 05:28:56,097 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-08 05:28:56,991 [screen.py:_load_panel()] - Loading panel: settings
2024-02-08 05:28:57,129 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > settings
2024-02-08 05:29:02,311 [screen_panel.py:on_dropdown_change()] - [main] theme changed to material-light
2024-02-08 05:29:06,921 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-08 05:29:06,922 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-88-gc832c90
2024-02-08 05:29:06,922 [functions.py:log_start()] - Python version: 3.11
2024-02-08 05:29:06,991 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-08 05:29:06,991 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-08 05:29:07,003 [config.py:log_config()] -  ===== Config File =====
[printer Zarya]

[menu __main my_macros_menu]
name = Macros

[menu __main my_macros_menu sub_macro_item]
name = PARK CENTER
method = printer.gcode.script
params = {"script":"PARK_CENTER"}

[menu __main my_macros_menu sub_macro_item2]
name = Force Bed Down
method = printer.gcode.script
params = {"script":"force_bed_down DISTANCE=4"}

[menu __main my_macros_menu sub_macro_item3]
name = HEATSOAKER
method = printer.gcode.script
params = {"script":"HEATSOAKER"}
=======================
2024-02-08 05:29:07,009 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-light
screen_blanking = 120
24htime = False
side_macro_shortcut = False
font_size = large
only_heaters = True
show_heater_power = True
invert_z = True
move_speed_xy = 199

[displayed_macros Printer]
attach_probe = False
bed_mesh_calibrate = False
attach_probe_lock = False
center_toolhead = False
dock_probe = False
g32 = False
dock_probe_unlock = False
jessie_tan = False
center_accuracy = False
filament_reset = False
jessie_soulblack = False
m900 = False
preheat = False
polyterra_white = False
nmfan_on = False
polyterra_marble = False
polylite_black = False
purgeline = False
probe_calibrate = False
probe_accuracy = False
polyterra_gray = False
polylite_gray = False
polyterra_black = False
status_busy = False
print_start = False
status_meshing = False
status_calibrating_z = False
test_speed = False
status_off = False
status_leveling = False
status_ready = False
set_nozzle_leds_on = False
set_nozzle_leds_off = False
set_logo_leds_off = False
status_heating = False
status_homing = False
status_cleaning = False
status_printing = False
abs_offset = False
beep = False
blk_paramount = False
cg28 = False
polyterra_blue = False
pause = False
measure_resonnances_x = False
m600 = False
measure_resonnances_y = False
polyterra_candy = False
polyterra_purp = False
sparta_black = False
query_air_filter = False
print_end = False
z_tilt_adjust = False
reset_air_filter = False
polylite_black_asa = False
ziro_marble = False
ziro_sparkle = False
sparta_purple = False
status_caution = False
sparta_gray = False
calibrate_z = False
cancel_print = False
axes_shaper_calibration = False
beep_error = False
belts_shaper_calibration = False
beep_success = False
excitate_axis_at_freq = False
compute_flow_multiplier = False
flow_multiplier_calibration = False
manual_flow_calibration = False
line_purge = False
prime_blob = False
polylite_black_abs = False
polylite_yellow_asa = False
pressure_advance_calibration = False
setup_kamp_meshing = False
sparta_reset = False
setup_line_purge = False
sparta_offset = False
print_reset = False

[graph Printer]
heater_bed = False
extruder = False

=======================
2024-02-08 05:29:07,009 [config.py:__init__()] - Configured printers: [
  {
    "Zarya": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-08 05:29:07,055 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-08 05:29:07,055 [config.py:install_language()] - Using lang en
2024-02-08 05:29:07,066 [screen.py:__init__()] - Screen resolution: 800x480
2024-02-08 05:29:07,067 [KlippyGtk.py:__init__()] - Font size: 18.0 (large)
2024-02-08 05:29:07,296 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 120
2024-02-08 05:29:07,302 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-08 05:29:07,307 [screen.py:initial_connection()] - Default printer: None
2024-02-08 05:29:07,338 [screen.py:connect_printer()] - Connecting to printer: Zarya
2024-02-08 05:29:07,338 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-08 05:29:07,370 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-08 05:29:07,378 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-08 05:29:07,389 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-08 05:29:07,395 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-08 05:29:07,396 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-08 05:29:07,401 [_logging.py:info()] - Websocket connected
2024-02-08 05:29:07,402 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-08 05:29:07,495 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-08 05:29:07,505 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-08 05:29:07,506 [printer.py:configure_cameras()] - Cameras: []
2024-02-08 05:29:07,506 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-08 05:29:07,516 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-08 05:29:07,665 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-08 05:29:07,672 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_prefix': '\\\\'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pauses Print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'gcode_macro POLYLITE_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026'}, 'gcode_macro POLYLITE_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro SPARTA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325'}, 'gcode_macro SPARTA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300'}, 'gcode_macro SPARTA_PURPLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro POLYLITE_BLACK_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510'}, 'gcode_macro POLYLITE_BLACK_ABS': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYLITE_YELLOW_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro FILAMENT_RESET': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro ABS_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0'}, 'gcode_macro PRINT_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0'}, 'gcode_macro PRINT_RESET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0'}, 'gcode_macro Clean_Filament_Cold_Pull': {'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince', 'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0'}, 'gcode_macro Manual_Clean': {'description': 'Grab a Brush ready, Start Scrubbing!', 'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0'}, 'gcode_macro LOAD_FILAMENT_PLA': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro LOAD_FILAMENT_ABS': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_PLA': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_ABS': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro POLYTERRA_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031'}, 'gcode_macro POLYTERRA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro POLYTERRA_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550'}, 'gcode_macro POLYTERRA_CANDY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035'}, 'gcode_macro POLYTERRA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYTERRA_BLUE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445'}, 'gcode_macro POLYTERRA_LAV': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054'}, 'gcode_macro ZIRO_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252'}, 'gcode_macro JESSIE_TAN': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029'}, 'gcode_macro SUNLU_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066'}, 'gcode_macro M600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Run standard input shaper test for all axes', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Run custom demi-axe test to analyze belts on CoreXY printers', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations', 'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400'}, 'gcode_macro XYBelt_Tension': {'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115', 'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': '300.0', 'verbose': 'True'}, 'heater_bed': {'pwm_cycle_time': '0.0166', 'heater_pin': 'HEATER_BED', 'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_BED', 'max_power': '0.5', 'min_temp': '-20', 'max_temp': '120', 'control': 'pid', 'pid_kp': '33.946', 'pid_ki': '0.997', 'pid_kd': '288.961'}, 'extruder': {'step_pin': 'nhk:gpio23', 'dir_pin': '!nhk:gpio24', 'enable_pin': '!nhk:gpio25', 'rotation_distance': '47.088', 'gear_ratio': '9:1', 'microsteps': '16', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'nhk:gpio9', 'sensor_pin': 'nhk:gpio29', 'pullup_resistor': '2200', 'sensor_type': 'PT1000', 'min_temp': '10', 'max_temp': '280', 'max_power': '1.0', 'min_extrude_temp': '10', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'control': 'pid', 'pid_kp': '26.239', 'pid_ki': '1.965', 'pid_kd': '87.574'}, 'tmc2209 extruder': {'stealthchop_threshold': '0', 'run_current': '0.6', 'interpolate': 'false', 'sense_resistor': '0.100', 'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1'}, 'firmware_retraction': {'retract_length': '0.5', 'retract_speed': '30', 'unretract_speed': '30'}, 'heater_fan hotend_fan': {'pin': 'nhk:gpio5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'nhk:gpio6', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.010'}, 'output_pin caselight': {'pin': 'HEATER_LED', 'pwm': 'true', 'cycle_time': '0.01', 'value': '0.15'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_CHM', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'temperature_sensor Pi': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'heater_fan Vent': {'pin': 'BAY_1', 'max_power': '1', 'kick_start_time': '0.5', 'shutdown_speed': '0', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '0.40', 'cycle_time': '0.008'}, 'fan_generic BoomBox': {'pin': 'NMFAN', 'shutdown_speed': '0.0', 'hardware_pwm': 'False', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.008'}, 'fan_generic BedFans': {'pin': 'BEDFAN', 'kick_start_time': '0.5', 'cycle_time': '0.008'}, 'output_pin beeper': {'pin': 'BUZZ', 'value': '0', 'shutdown_value': '0', 'pwm': 'True', 'cycle_time': '0.0005'}, 'temperature_sensor NitehawkChip': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'nhk', 'min_temp': '0', 'max_temp': '100'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00'}, 'board_pins': {'aliases': '\n\n\nB_MOTOR_EN=PF14,  B_MOTOR_STEP=PF13,  B_MOTOR_DIR=PF12,  B_MOTOR_UART=PC4,\n\nA_MOTOR_EN=PF15,  A_MOTOR_STEP=PG0,  A_MOTOR_DIR=PG1,  A_MOTOR_UART=PD11,\n\nEXTRUDER_EN=PG5,  EXTRUDER_STEP=PF11,  EXTRUDER_DIR=PG3,  EXTRUDER_UART=PC6,\n\n\n\nZ_ZERO_EN=PF1,  Z_ZERO_STEP=PC13,  Z_ZERO_DIR=PF0,  Z_ZERO_UART=PE4,\n\nZ_ONE_EN=PD4,  Z_ONE_STEP=PE2,  Z_ONE_DIR=PE3,  Z_ONE_UART=PE1,\n\nZ_TWO_EN=PE0,  Z_TWO_STEP=PE6,  Z_TWO_DIR=PA14, Z_TWO_UART=PD3,\n\n\n\nHEATER_BED=PA3, HEATER_HE=PA2, HEATER_LED=PB10,\n\nTEMP_BED=PF3, TEMP_HE=PF4, TEMP_CHM=PF5,\n\nBAY_1=PD12, BEDFAN=PA8, NMFAN=PE5, BUZZ=PD15,\n\nENDSTOP_Z=PG10,  ENDSTOP_X=PG6,  ENDSTOP_Y=PG9, BTTFS=PG15'}, 'stepper_z': {'endstop_pin': 'probe:z_virtual_endstop', 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'enable_pin': '!Z_ZERO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200', 'position_max': '200', 'position_min': '-10', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'probe': {'pin': 'nhk:gpio10', 'z_offset': '6.345', 'x_offset': '0', 'y_offset': '19.75', 'speed': '8.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.0075', 'samples_tolerance_retries': '3'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '120', 'retries': '3', 'retry_tolerance': '0.0075', 'horizontal_move_z': '14'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '8', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'probe_count': '5,5', 'zero_reference_position': '150, 150', 'algorithm': 'bicubic', 'fade_start': '0.6', 'fade_end': '10', 'fade_target': '0'}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': '3', 'color_order': 'RGBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'stepper_x': {'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'enable_pin': '!B_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true', 'endstop_pin': 'nhk:gpio12'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'interpolate': 'false', 'run_current': '1', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'enable_pin': '!A_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'ENDSTOP_Y', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'interpolate': 'false', 'run_current': '1', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'enable_pin': '!Z_ONE_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'enable_pin': '!Z_TWO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00'}, 'output_pin act_led': {'pin': '!nhk:gpio8'}, 'adxl345': {'cs_pin': 'nhk:gpio21', 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_mosi_pin': 'nhk:gpio20', 'spi_software_miso_pin': 'nhk:gpio19'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n155, 155, 20'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor Nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'sensor_pin': 'nhk:gpio26', 'pullup_resistor': '2200', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'filament_motion_sensor filament_sensor': {'detection_length': '14', 'extruder': 'extruder', 'switch_pin': '^BTTFS', 'pause_on_runout': 'True', 'insert_gcode': '\nNozzle_ON', 'runout_gcode': '\nBEEP_ERROR\nPAUSE'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_OFF': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_ON': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1'}, 'gcode_macro _AIR_FILTER_VARIABLES': {'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1', 'gcode': ''}, 'gcode_macro RESET_AIR_FILTER': {'description': 'Resets the air-filter replacement timer', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }'}, 'gcode_macro QUERY_AIR_FILTER': {'description': 'Displays the amount of time the air filter has run since it was last reset.', 'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }'}, 'delayed_gcode _AIR_FILTER_TIMER': {'initial_duration': '1', 'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1"}, 'delayed_gcode _AIR_FILTER_FLUSH_TIMER': {'initial_duration': '300', 'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300"}, 'gcode_macro HEATSOAKER': {'description': 'HeatSoak for an Hour', 'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999'}, 'gcode_macro BEEP': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}'}, 'gcode_macro BEEP_SUCCESS': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000'}, 'gcode_macro BEEP_ERROR': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100'}, 'gcode_macro CG28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CHOME': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CENTER_ACCURACY': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY'}, 'gcode_macro Lights_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro Lights_ON': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25'}, 'gcode_macro PID_HOTEND': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260'}, 'gcode_macro PID_BED': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110'}, 'gcode_macro MANUAL_FLOW_CALIBRATION': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'delayed_gcode HEATSOAK_DELAY': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}'}, 'gcode_macro HEATSOAK_TIMER': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}'}, 'gcode_macro PARK_FRONT': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT'}, 'gcode_macro PARK_FRONT_LOW': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW'}, 'gcode_macro PARK_REAR': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR'}, 'gcode_macro PARK_CENTER': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER'}, 'gcode_macro PARK_BED': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED'}, 'gcode_macro FORCE_BED_DOWN': {'description': 'Force move bed down without homing', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_UP': {'description': 'Force move bed down without homing.', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_LOCK': {'description': 'Active Z steppers to lock down the bed, Without Homing', 'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90'}, 'gcode_macro FORCE_BED_UNLOCK': {'description': 'Unlocks the Bed', 'gcode': '\nM84'}, 'delayed_gcode FILTER_AIR_STOP': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}'}, 'gcode_macro PRIME_BLOB': {'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.', 'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state'}, 'gcode_macro RINGING_TOWER': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_MZV': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_EI': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro PRIMING': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107'}, 'gcode_macro CLEAN': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro Z_TILT_ADJUST': {'rename_existing': '_Z_TILT_ADJUST', 'description': '', 'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro Smart_Park': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'exclude_object': {}, 'skew_correction': {}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '10000', 'max_z_velocity': '15', 'max_z_accel': '50', 'square_corner_velocity': '5.0'}, 'input_shaper': {'shaper_freq_x': '58.8', 'shaper_type_x': 'zv', 'shaper_freq_y': '43.4', 'shaper_type_y': 'mzv'}, 'bed_mesh default': {'version': '1', 'points': '\n0.048750, 0.068750, 0.040000, 0.078750, 0.070000\n0.050000, 0.067500, 0.053750, 0.063750, 0.090000\n0.006250, 0.036250, 0.000000, 0.045000, 0.075000\n0.021250, 0.082500, 0.071250, 0.081250, 0.098750\n-0.025000, 0.068750, 0.046250, 0.088750, 0.078750', 'tension': '0.2', 'min_x': '40.0', 'algo': 'bicubic', 'y_count': '5', 'mesh_y_pps': '2', 'min_y': '40.0', 'x_count': '5', 'max_y': '260.0', 'mesh_x_pps': '2', 'max_x': '260.0'}, 'skew_correction my_skew_profile': {'xy_skew': '-0.000802972249612', 'xz_skew': '0.0', 'yz_skew': '0.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': '\\\\'}, 'gcode_macro cancel_print': {'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}', 'rename_existing': 'BASE_PAUSE', 'description': 'Pauses Print'}, 'gcode_macro resume': {'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'rename_existing': 'BASE_RESUME', 'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro polylite_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026', 'description': 'G-Code macro'}, 'gcode_macro polylite_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro sparta_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325', 'description': 'G-Code macro'}, 'gcode_macro sparta_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300', 'description': 'G-Code macro'}, 'gcode_macro sparta_purple': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_abs': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polylite_yellow_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro filament_reset': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro abs_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_reset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro clean_filament_cold_pull': {'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0', 'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince'}, 'gcode_macro manual_clean': {'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0', 'description': 'Grab a Brush ready, Start Scrubbing!'}, 'gcode_macro load_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro load_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro polyterra_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031', 'description': 'G-Code macro'}, 'gcode_macro polyterra_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro polyterra_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550', 'description': 'G-Code macro'}, 'gcode_macro polyterra_candy': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035', 'description': 'G-Code macro'}, 'gcode_macro polyterra_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polyterra_blue': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445', 'description': 'G-Code macro'}, 'gcode_macro polyterra_lav': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054', 'description': 'G-Code macro'}, 'gcode_macro ziro_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252', 'description': 'G-Code macro'}, 'gcode_macro jessie_tan': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029', 'description': 'G-Code macro'}, 'gcode_macro sunlu_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER', 'description': 'Run standard input shaper test for all axes'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS', 'description': 'Run custom demi-axe test to analyze belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400', 'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations'}, 'gcode_macro xybelt_tension': {'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }', 'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': 300.0, 'verbose': True}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_BED', 'min_temp': -20.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.5, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 33.946, 'pid_ki': 0.997, 'pid_kd': 288.961, 'heater_pin': 'HEATER_BED', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'tmc2209 extruder': {'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.1, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'PT1000', 'pullup_resistor': 2200.0, 'sensor_pin': 'nhk:gpio29', 'min_temp': 10.0, 'max_temp': 280.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.239, 'pid_ki': 1.965, 'pid_kd': 87.574, 'heater_pin': 'nhk:gpio9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'nhk:gpio23', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!nhk:gpio24', 'rotation_distance': 47.088, 'full_steps_per_rotation': 200, 'gear_ratio': [[9.0, 1.0]], 'enable_pin': '!nhk:gpio25'}, 'firmware_retraction': {'retract_length': 0.5, 'retract_speed': 30.0, 'unretract_extra_length': 0.0, 'unretract_speed': 30.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'nhk:gpio5', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'nhk:gpio6'}, 'output_pin caselight': {'pwm': True, 'pin': 'HEATER_LED', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.15, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_CHM', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'temperature_sensor pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'heater_fan vent': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BAY_1', 'fan_speed': 0.4}, 'fan_generic boombox': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'NMFAN'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BEDFAN'}, 'output_pin beeper': {'pwm': True, 'pin': 'BUZZ', 'cycle_time': 0.0005, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'temperature_sensor nitehawkchip': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'nhk', 'min_temp': 0.0, 'max_temp': 100.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['B_MOTOR_EN', 'PF14'], ['B_MOTOR_STEP', 'PF13'], ['B_MOTOR_DIR', 'PF12'], ['B_MOTOR_UART', 'PC4'], ['A_MOTOR_EN', 'PF15'], ['A_MOTOR_STEP', 'PG0'], ['A_MOTOR_DIR', 'PG1'], ['A_MOTOR_UART', 'PD11'], ['EXTRUDER_EN', 'PG5'], ['EXTRUDER_STEP', 'PF11'], ['EXTRUDER_DIR', 'PG3'], ['EXTRUDER_UART', 'PC6'], ['Z_ZERO_EN', 'PF1'], ['Z_ZERO_STEP', 'PC13'], ['Z_ZERO_DIR', 'PF0'], ['Z_ZERO_UART', 'PE4'], ['Z_ONE_EN', 'PD4'], ['Z_ONE_STEP', 'PE2'], ['Z_ONE_DIR', 'PE3'], ['Z_ONE_UART', 'PE1'], ['Z_TWO_EN', 'PE0'], ['Z_TWO_STEP', 'PE6'], ['Z_TWO_DIR', 'PA14'], ['Z_TWO_UART', 'PD3'], ['HEATER_BED', 'PA3'], ['HEATER_HE', 'PA2'], ['HEATER_LED', 'PB10'], ['TEMP_BED', 'PF3'], ['TEMP_HE', 'PF4'], ['TEMP_CHM', 'PF5'], ['BAY_1', 'PD12'], ['BEDFAN', 'PA8'], ['NMFAN', 'PE5'], ['BUZZ', 'PD15'], ['ENDSTOP_Z', 'PG10'], ['ENDSTOP_X', 'PG6'], ['ENDSTOP_Y', 'PG9'], ['BTTFS', 'PG15']]}, 'probe': {'z_offset': 6.345, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'nhk:gpio10', 'speed': 8.0, 'lift_speed': 8.0, 'x_offset': 0.0, 'y_offset': 19.75, 'samples': 3, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.0075, 'samples_tolerance_retries': 3}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 3, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 14.0, 'speed': 120.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [150.0, 150.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 8.0, 'speed': 150.0, 'fade_start': 0.6, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.04875, 0.06875, 0.04, 0.07875, 0.07], [0.05, 0.0675, 0.05375, 0.06375, 0.09], [0.00625, 0.03625, 0.0, 0.045, 0.075], [0.02125, 0.0825, 0.07125, 0.08125, 0.09875], [-0.025, 0.06875, 0.04625, 0.08875, 0.07875]], 'min_x': 40.0, 'max_x': 260.0, 'min_y': 40.0, 'max_y': 260.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': 3, 'color_order': ['RGBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!B_MOTOR_EN', 'endstop_pin': 'nhk:gpio12', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!A_MOTOR_EN', 'endstop_pin': 'ENDSTOP_Y', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ZERO_EN', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 200.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ONE_EN'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_TWO_EN'}, 'output_pin act_led': {'pwm': False, 'pin': '!nhk:gpio8', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'nhk:gpio21', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_miso_pin': 'nhk:gpio19', 'spi_software_mosi_pin': 'nhk:gpio20'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[155.0, 155.0, 20.0]], 'accel_chip': 'adxl345'}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'pullup_resistor': 2200.0, 'inline_resistor': 0.0, 'sensor_pin': 'nhk:gpio26', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'filament_motion_sensor filament_sensor': {'switch_pin': '^BTTFS', 'extruder': 'extruder', 'detection_length': 14.0, 'pause_on_runout': True, 'runout_gcode': '\nBEEP_ERROR\nPAUSE', 'insert_gcode': '\nNozzle_ON', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro fs_off': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro fs_on': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro _air_filter_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1'}, 'gcode_macro reset_air_filter': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }', 'description': 'Resets the air-filter replacement timer'}, 'gcode_macro query_air_filter': {'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }', 'description': 'Displays the amount of time the air filter has run since it was last reset.'}, 'delayed_gcode _air_filter_timer': {'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1", 'initial_duration': 1.0}, 'delayed_gcode _air_filter_flush_timer': {'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300", 'initial_duration': 300.0}, 'gcode_macro heatsoaker': {'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999', 'description': 'HeatSoak for an Hour'}, 'gcode_macro beep': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro beep_success': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000', 'description': 'G-Code macro'}, 'gcode_macro beep_error': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100', 'description': 'G-Code macro'}, 'gcode_macro cg28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro chome': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro center_accuracy': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro lights_on': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25', 'description': 'G-Code macro'}, 'gcode_macro pid_hotend': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260', 'description': 'G-Code macro'}, 'gcode_macro pid_bed': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110', 'description': 'G-Code macro'}, 'gcode_macro manual_flow_calibration': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'delayed_gcode heatsoak_delay': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro heatsoak_timer': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}', 'description': 'G-Code macro'}, 'gcode_macro park_front': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT', 'description': 'G-Code macro'}, 'gcode_macro park_front_low': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW', 'description': 'G-Code macro'}, 'gcode_macro park_rear': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR', 'description': 'G-Code macro'}, 'gcode_macro park_center': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER', 'description': 'G-Code macro'}, 'gcode_macro park_bed': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED', 'description': 'G-Code macro'}, 'gcode_macro force_bed_down': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing'}, 'gcode_macro force_bed_up': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing.'}, 'gcode_macro force_bed_lock': {'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90', 'description': 'Active Z steppers to lock down the bed, Without Homing'}, 'gcode_macro force_bed_unlock': {'gcode': '\nM84', 'description': 'Unlocks the Bed'}, 'delayed_gcode filter_air_stop': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro print_end': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro prime_blob': {'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state', 'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.'}, 'gcode_macro ringing_tower': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_mzv': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_ei': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro priming': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000', 'description': 'G-Code macro'}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount'}, 'gcode_macro z_tilt_adjust': {'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0', 'rename_existing': '_Z_TILT_ADJUST', 'description': ''}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'skew_correction my_skew_profile': {'xy_skew': -0.000802972249612, 'xz_skew': 0.0, 'yz_skew': 0.0}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'zv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 58.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 43.4}, 'printer': {'max_velocity': 300.0, 'max_accel': 10000.0, 'max_accel_to_decel': 5000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 50.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': True, 'save_config_pending_items': {'bed_mesh default': {'version': '1', 'points': '\n  0.097080, 0.023330, -0.020420\n  0.029580, -0.005420, -0.024170\n  0.018330, 0.008330, -0.014170\n  0.027080, 0.005830, -0.022920', 'x_count': '3', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '98.74', 'max_x': '201.25', 'min_y': '80.07', 'max_y': '219.9'}}}}
2024-02-08 05:29:07,680 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-08 05:29:07,683 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-08 05:29:07,683 [printer.py:reinit()] - # Extruders: 1
2024-02-08 05:29:07,683 [printer.py:reinit()] - # Temperature devices: 6
2024-02-08 05:29:07,683 [printer.py:reinit()] - # Fans: 5
2024-02-08 05:29:07,684 [printer.py:reinit()] - # Output pins: 3
2024-02-08 05:29:07,684 [printer.py:reinit()] - # Leds: 1
2024-02-08 05:29:07,701 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-08 05:29:07,704 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-08 05:29:08,026 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor Pi&temperature_sensor Octopus&temperature_sensor NitehawkChip&temperature_sensor Nitehawk&fan&fan_generic BoomBox&fan_generic BedFans&heater_fan hotend_fan&heater_fan Vent&filament_motion_sensor filament_sensor&output_pin caselight&output_pin beeper&output_pin act_led&neopixel sb_leds
2024-02-08 05:29:08,030 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-08 05:29:08,030 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-08 05:29:08,030 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-08 05:29:08,031 [screen.py:init_klipper()] - Printer initialized
2024-02-08 05:29:08,031 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-08 05:29:08,031 [printer.py:change_state()] - Adding callback for state: ready
2024-02-08 05:29:08,034 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-08 05:29:08,101 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-08 05:29:08,119 [main_menu.py:add_device()] - Adding device: extruder
2024-02-08 05:29:08,125 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-08 05:29:08,129 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-08 05:29:08,130 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-08 05:29:08,130 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-08 05:29:08,130 [main_menu.py:add_device()] - Adding device: temperature_sensor NitehawkChip
2024-02-08 05:29:08,130 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-08 05:29:08,153 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-08 05:29:08,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-08 05:29:08,178 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor Pi', 'temperature_sensor Octopus', 'temperature_sensor NitehawkChip', 'temperature_sensor Nitehawk', 'extruder']
2024-02-08 05:29:08,184 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-08 05:29:08,185 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-08 05:29:11,923 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-08 05:29:11,923 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-08 05:29:11,926 [screen.py:_load_panel()] - Loading panel: menu
2024-02-08 05:29:12,094 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-08 05:29:12,109 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-08 05:29:12,124 [menu.py:arrangeMenuItems()] - X > more power
2024-02-08 05:29:12,126 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-08 05:29:12,134 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-08 05:29:12,921 [screen.py:_load_panel()] - Loading panel: settings
2024-02-08 05:29:13,074 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > settings
2024-02-08 05:29:30,835 [screen_panel.py:on_dropdown_change()] - [main] theme changed to material-darker
2024-02-08 05:29:35,451 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-08 05:29:35,451 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-88-gc832c90
2024-02-08 05:29:35,451 [functions.py:log_start()] - Python version: 3.11
2024-02-08 05:29:35,520 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-08 05:29:35,521 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-08 05:29:35,533 [config.py:log_config()] -  ===== Config File =====
[printer Zarya]

[menu __main my_macros_menu]
name = Macros

[menu __main my_macros_menu sub_macro_item]
name = PARK CENTER
method = printer.gcode.script
params = {"script":"PARK_CENTER"}

[menu __main my_macros_menu sub_macro_item2]
name = Force Bed Down
method = printer.gcode.script
params = {"script":"force_bed_down DISTANCE=4"}

[menu __main my_macros_menu sub_macro_item3]
name = HEATSOAKER
method = printer.gcode.script
params = {"script":"HEATSOAKER"}
=======================
2024-02-08 05:29:35,539 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
screen_blanking = 120
24htime = False
side_macro_shortcut = False
font_size = large
only_heaters = True
show_heater_power = True
invert_z = True
move_speed_xy = 199

[displayed_macros Printer]
attach_probe = False
bed_mesh_calibrate = False
attach_probe_lock = False
center_toolhead = False
dock_probe = False
g32 = False
dock_probe_unlock = False
jessie_tan = False
center_accuracy = False
filament_reset = False
jessie_soulblack = False
m900 = False
preheat = False
polyterra_white = False
nmfan_on = False
polyterra_marble = False
polylite_black = False
purgeline = False
probe_calibrate = False
probe_accuracy = False
polyterra_gray = False
polylite_gray = False
polyterra_black = False
status_busy = False
print_start = False
status_meshing = False
status_calibrating_z = False
test_speed = False
status_off = False
status_leveling = False
status_ready = False
set_nozzle_leds_on = False
set_nozzle_leds_off = False
set_logo_leds_off = False
status_heating = False
status_homing = False
status_cleaning = False
status_printing = False
abs_offset = False
beep = False
blk_paramount = False
cg28 = False
polyterra_blue = False
pause = False
measure_resonnances_x = False
m600 = False
measure_resonnances_y = False
polyterra_candy = False
polyterra_purp = False
sparta_black = False
query_air_filter = False
print_end = False
z_tilt_adjust = False
reset_air_filter = False
polylite_black_asa = False
ziro_marble = False
ziro_sparkle = False
sparta_purple = False
status_caution = False
sparta_gray = False
calibrate_z = False
cancel_print = False
axes_shaper_calibration = False
beep_error = False
belts_shaper_calibration = False
beep_success = False
excitate_axis_at_freq = False
compute_flow_multiplier = False
flow_multiplier_calibration = False
manual_flow_calibration = False
line_purge = False
prime_blob = False
polylite_black_abs = False
polylite_yellow_asa = False
pressure_advance_calibration = False
setup_kamp_meshing = False
sparta_reset = False
setup_line_purge = False
sparta_offset = False
print_reset = False

[graph Printer]
heater_bed = False
extruder = False

=======================
2024-02-08 05:29:35,539 [config.py:__init__()] - Configured printers: [
  {
    "Zarya": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-08 05:29:35,582 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-08 05:29:35,583 [config.py:install_language()] - Using lang en
2024-02-08 05:29:35,594 [screen.py:__init__()] - Screen resolution: 800x480
2024-02-08 05:29:35,595 [KlippyGtk.py:__init__()] - Font size: 18.0 (large)
2024-02-08 05:29:35,819 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 120
2024-02-08 05:29:35,825 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-08 05:29:35,830 [screen.py:initial_connection()] - Default printer: None
2024-02-08 05:29:35,861 [screen.py:connect_printer()] - Connecting to printer: Zarya
2024-02-08 05:29:35,861 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-08 05:29:35,891 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-08 05:29:35,900 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-08 05:29:35,908 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-08 05:29:35,915 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-08 05:29:35,915 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-08 05:29:35,921 [_logging.py:info()] - Websocket connected
2024-02-08 05:29:35,921 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-08 05:29:36,037 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-08 05:29:36,049 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-08 05:29:36,051 [printer.py:configure_cameras()] - Cameras: []
2024-02-08 05:29:36,051 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-08 05:29:36,063 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-08 05:29:36,241 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-08 05:29:36,244 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_prefix': '\\\\'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pauses Print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'gcode_macro POLYLITE_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026'}, 'gcode_macro POLYLITE_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro SPARTA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325'}, 'gcode_macro SPARTA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300'}, 'gcode_macro SPARTA_PURPLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro POLYLITE_BLACK_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510'}, 'gcode_macro POLYLITE_BLACK_ABS': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYLITE_YELLOW_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro FILAMENT_RESET': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro ABS_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0'}, 'gcode_macro PRINT_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0'}, 'gcode_macro PRINT_RESET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0'}, 'gcode_macro Clean_Filament_Cold_Pull': {'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince', 'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0'}, 'gcode_macro Manual_Clean': {'description': 'Grab a Brush ready, Start Scrubbing!', 'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0'}, 'gcode_macro LOAD_FILAMENT_PLA': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro LOAD_FILAMENT_ABS': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_PLA': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_ABS': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro POLYTERRA_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031'}, 'gcode_macro POLYTERRA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro POLYTERRA_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550'}, 'gcode_macro POLYTERRA_CANDY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035'}, 'gcode_macro POLYTERRA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYTERRA_BLUE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445'}, 'gcode_macro POLYTERRA_LAV': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054'}, 'gcode_macro ZIRO_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252'}, 'gcode_macro JESSIE_TAN': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029'}, 'gcode_macro SUNLU_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066'}, 'gcode_macro M600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Run standard input shaper test for all axes', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Run custom demi-axe test to analyze belts on CoreXY printers', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations', 'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400'}, 'gcode_macro XYBelt_Tension': {'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115', 'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': '300.0', 'verbose': 'True'}, 'heater_bed': {'pwm_cycle_time': '0.0166', 'heater_pin': 'HEATER_BED', 'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_BED', 'max_power': '0.5', 'min_temp': '-20', 'max_temp': '120', 'control': 'pid', 'pid_kp': '33.946', 'pid_ki': '0.997', 'pid_kd': '288.961'}, 'extruder': {'step_pin': 'nhk:gpio23', 'dir_pin': '!nhk:gpio24', 'enable_pin': '!nhk:gpio25', 'rotation_distance': '47.088', 'gear_ratio': '9:1', 'microsteps': '16', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'nhk:gpio9', 'sensor_pin': 'nhk:gpio29', 'pullup_resistor': '2200', 'sensor_type': 'PT1000', 'min_temp': '10', 'max_temp': '280', 'max_power': '1.0', 'min_extrude_temp': '10', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'control': 'pid', 'pid_kp': '26.239', 'pid_ki': '1.965', 'pid_kd': '87.574'}, 'tmc2209 extruder': {'stealthchop_threshold': '0', 'run_current': '0.6', 'interpolate': 'false', 'sense_resistor': '0.100', 'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1'}, 'firmware_retraction': {'retract_length': '0.5', 'retract_speed': '30', 'unretract_speed': '30'}, 'heater_fan hotend_fan': {'pin': 'nhk:gpio5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'nhk:gpio6', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.010'}, 'output_pin caselight': {'pin': 'HEATER_LED', 'pwm': 'true', 'cycle_time': '0.01', 'value': '0.15'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_CHM', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'temperature_sensor Pi': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'heater_fan Vent': {'pin': 'BAY_1', 'max_power': '1', 'kick_start_time': '0.5', 'shutdown_speed': '0', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '0.40', 'cycle_time': '0.008'}, 'fan_generic BoomBox': {'pin': 'NMFAN', 'shutdown_speed': '0.0', 'hardware_pwm': 'False', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.008'}, 'fan_generic BedFans': {'pin': 'BEDFAN', 'kick_start_time': '0.5', 'cycle_time': '0.008'}, 'output_pin beeper': {'pin': 'BUZZ', 'value': '0', 'shutdown_value': '0', 'pwm': 'True', 'cycle_time': '0.0005'}, 'temperature_sensor NitehawkChip': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'nhk', 'min_temp': '0', 'max_temp': '100'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00'}, 'board_pins': {'aliases': '\n\n\nB_MOTOR_EN=PF14,  B_MOTOR_STEP=PF13,  B_MOTOR_DIR=PF12,  B_MOTOR_UART=PC4,\n\nA_MOTOR_EN=PF15,  A_MOTOR_STEP=PG0,  A_MOTOR_DIR=PG1,  A_MOTOR_UART=PD11,\n\nEXTRUDER_EN=PG5,  EXTRUDER_STEP=PF11,  EXTRUDER_DIR=PG3,  EXTRUDER_UART=PC6,\n\n\n\nZ_ZERO_EN=PF1,  Z_ZERO_STEP=PC13,  Z_ZERO_DIR=PF0,  Z_ZERO_UART=PE4,\n\nZ_ONE_EN=PD4,  Z_ONE_STEP=PE2,  Z_ONE_DIR=PE3,  Z_ONE_UART=PE1,\n\nZ_TWO_EN=PE0,  Z_TWO_STEP=PE6,  Z_TWO_DIR=PA14, Z_TWO_UART=PD3,\n\n\n\nHEATER_BED=PA3, HEATER_HE=PA2, HEATER_LED=PB10,\n\nTEMP_BED=PF3, TEMP_HE=PF4, TEMP_CHM=PF5,\n\nBAY_1=PD12, BEDFAN=PA8, NMFAN=PE5, BUZZ=PD15,\n\nENDSTOP_Z=PG10,  ENDSTOP_X=PG6,  ENDSTOP_Y=PG9, BTTFS=PG15'}, 'stepper_z': {'endstop_pin': 'probe:z_virtual_endstop', 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'enable_pin': '!Z_ZERO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200', 'position_max': '200', 'position_min': '-10', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'probe': {'pin': 'nhk:gpio10', 'z_offset': '6.345', 'x_offset': '0', 'y_offset': '19.75', 'speed': '8.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.0075', 'samples_tolerance_retries': '3'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '120', 'retries': '3', 'retry_tolerance': '0.0075', 'horizontal_move_z': '14'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '8', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'probe_count': '5,5', 'zero_reference_position': '150, 150', 'algorithm': 'bicubic', 'fade_start': '0.6', 'fade_end': '10', 'fade_target': '0'}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': '3', 'color_order': 'RGBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'stepper_x': {'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'enable_pin': '!B_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true', 'endstop_pin': 'nhk:gpio12'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'interpolate': 'false', 'run_current': '1', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'enable_pin': '!A_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'ENDSTOP_Y', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'interpolate': 'false', 'run_current': '1', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'enable_pin': '!Z_ONE_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'enable_pin': '!Z_TWO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00'}, 'output_pin act_led': {'pin': '!nhk:gpio8'}, 'adxl345': {'cs_pin': 'nhk:gpio21', 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_mosi_pin': 'nhk:gpio20', 'spi_software_miso_pin': 'nhk:gpio19'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n155, 155, 20'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor Nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'sensor_pin': 'nhk:gpio26', 'pullup_resistor': '2200', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'filament_motion_sensor filament_sensor': {'detection_length': '14', 'extruder': 'extruder', 'switch_pin': '^BTTFS', 'pause_on_runout': 'True', 'insert_gcode': '\nNozzle_ON', 'runout_gcode': '\nBEEP_ERROR\nPAUSE'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_OFF': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_ON': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1'}, 'gcode_macro _AIR_FILTER_VARIABLES': {'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1', 'gcode': ''}, 'gcode_macro RESET_AIR_FILTER': {'description': 'Resets the air-filter replacement timer', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }'}, 'gcode_macro QUERY_AIR_FILTER': {'description': 'Displays the amount of time the air filter has run since it was last reset.', 'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }'}, 'delayed_gcode _AIR_FILTER_TIMER': {'initial_duration': '1', 'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1"}, 'delayed_gcode _AIR_FILTER_FLUSH_TIMER': {'initial_duration': '300', 'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300"}, 'gcode_macro HEATSOAKER': {'description': 'HeatSoak for an Hour', 'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999'}, 'gcode_macro BEEP': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}'}, 'gcode_macro BEEP_SUCCESS': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000'}, 'gcode_macro BEEP_ERROR': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100'}, 'gcode_macro CG28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CHOME': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CENTER_ACCURACY': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY'}, 'gcode_macro Lights_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro Lights_ON': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25'}, 'gcode_macro PID_HOTEND': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260'}, 'gcode_macro PID_BED': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110'}, 'gcode_macro MANUAL_FLOW_CALIBRATION': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'delayed_gcode HEATSOAK_DELAY': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}'}, 'gcode_macro HEATSOAK_TIMER': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}'}, 'gcode_macro PARK_FRONT': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT'}, 'gcode_macro PARK_FRONT_LOW': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW'}, 'gcode_macro PARK_REAR': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR'}, 'gcode_macro PARK_CENTER': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER'}, 'gcode_macro PARK_BED': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED'}, 'gcode_macro FORCE_BED_DOWN': {'description': 'Force move bed down without homing', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_UP': {'description': 'Force move bed down without homing.', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_LOCK': {'description': 'Active Z steppers to lock down the bed, Without Homing', 'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90'}, 'gcode_macro FORCE_BED_UNLOCK': {'description': 'Unlocks the Bed', 'gcode': '\nM84'}, 'delayed_gcode FILTER_AIR_STOP': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}'}, 'gcode_macro PRIME_BLOB': {'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.', 'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state'}, 'gcode_macro RINGING_TOWER': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_MZV': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_EI': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro PRIMING': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107'}, 'gcode_macro CLEAN': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro Z_TILT_ADJUST': {'rename_existing': '_Z_TILT_ADJUST', 'description': '', 'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro Smart_Park': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'exclude_object': {}, 'skew_correction': {}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '10000', 'max_z_velocity': '15', 'max_z_accel': '50', 'square_corner_velocity': '5.0'}, 'input_shaper': {'shaper_freq_x': '58.8', 'shaper_type_x': 'zv', 'shaper_freq_y': '43.4', 'shaper_type_y': 'mzv'}, 'bed_mesh default': {'version': '1', 'points': '\n0.048750, 0.068750, 0.040000, 0.078750, 0.070000\n0.050000, 0.067500, 0.053750, 0.063750, 0.090000\n0.006250, 0.036250, 0.000000, 0.045000, 0.075000\n0.021250, 0.082500, 0.071250, 0.081250, 0.098750\n-0.025000, 0.068750, 0.046250, 0.088750, 0.078750', 'tension': '0.2', 'min_x': '40.0', 'algo': 'bicubic', 'y_count': '5', 'mesh_y_pps': '2', 'min_y': '40.0', 'x_count': '5', 'max_y': '260.0', 'mesh_x_pps': '2', 'max_x': '260.0'}, 'skew_correction my_skew_profile': {'xy_skew': '-0.000802972249612', 'xz_skew': '0.0', 'yz_skew': '0.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': '\\\\'}, 'gcode_macro cancel_print': {'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}', 'rename_existing': 'BASE_PAUSE', 'description': 'Pauses Print'}, 'gcode_macro resume': {'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'rename_existing': 'BASE_RESUME', 'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro polylite_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026', 'description': 'G-Code macro'}, 'gcode_macro polylite_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro sparta_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325', 'description': 'G-Code macro'}, 'gcode_macro sparta_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300', 'description': 'G-Code macro'}, 'gcode_macro sparta_purple': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_abs': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polylite_yellow_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro filament_reset': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro abs_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_reset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro clean_filament_cold_pull': {'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0', 'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince'}, 'gcode_macro manual_clean': {'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0', 'description': 'Grab a Brush ready, Start Scrubbing!'}, 'gcode_macro load_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro load_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro polyterra_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031', 'description': 'G-Code macro'}, 'gcode_macro polyterra_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro polyterra_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550', 'description': 'G-Code macro'}, 'gcode_macro polyterra_candy': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035', 'description': 'G-Code macro'}, 'gcode_macro polyterra_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polyterra_blue': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445', 'description': 'G-Code macro'}, 'gcode_macro polyterra_lav': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054', 'description': 'G-Code macro'}, 'gcode_macro ziro_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252', 'description': 'G-Code macro'}, 'gcode_macro jessie_tan': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029', 'description': 'G-Code macro'}, 'gcode_macro sunlu_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER', 'description': 'Run standard input shaper test for all axes'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS', 'description': 'Run custom demi-axe test to analyze belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400', 'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations'}, 'gcode_macro xybelt_tension': {'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }', 'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': 300.0, 'verbose': True}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_BED', 'min_temp': -20.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.5, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 33.946, 'pid_ki': 0.997, 'pid_kd': 288.961, 'heater_pin': 'HEATER_BED', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'tmc2209 extruder': {'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.1, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'PT1000', 'pullup_resistor': 2200.0, 'sensor_pin': 'nhk:gpio29', 'min_temp': 10.0, 'max_temp': 280.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.239, 'pid_ki': 1.965, 'pid_kd': 87.574, 'heater_pin': 'nhk:gpio9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'nhk:gpio23', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!nhk:gpio24', 'rotation_distance': 47.088, 'full_steps_per_rotation': 200, 'gear_ratio': [[9.0, 1.0]], 'enable_pin': '!nhk:gpio25'}, 'firmware_retraction': {'retract_length': 0.5, 'retract_speed': 30.0, 'unretract_extra_length': 0.0, 'unretract_speed': 30.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'nhk:gpio5', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'nhk:gpio6'}, 'output_pin caselight': {'pwm': True, 'pin': 'HEATER_LED', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.15, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_CHM', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'temperature_sensor pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'heater_fan vent': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BAY_1', 'fan_speed': 0.4}, 'fan_generic boombox': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'NMFAN'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BEDFAN'}, 'output_pin beeper': {'pwm': True, 'pin': 'BUZZ', 'cycle_time': 0.0005, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'temperature_sensor nitehawkchip': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'nhk', 'min_temp': 0.0, 'max_temp': 100.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['B_MOTOR_EN', 'PF14'], ['B_MOTOR_STEP', 'PF13'], ['B_MOTOR_DIR', 'PF12'], ['B_MOTOR_UART', 'PC4'], ['A_MOTOR_EN', 'PF15'], ['A_MOTOR_STEP', 'PG0'], ['A_MOTOR_DIR', 'PG1'], ['A_MOTOR_UART', 'PD11'], ['EXTRUDER_EN', 'PG5'], ['EXTRUDER_STEP', 'PF11'], ['EXTRUDER_DIR', 'PG3'], ['EXTRUDER_UART', 'PC6'], ['Z_ZERO_EN', 'PF1'], ['Z_ZERO_STEP', 'PC13'], ['Z_ZERO_DIR', 'PF0'], ['Z_ZERO_UART', 'PE4'], ['Z_ONE_EN', 'PD4'], ['Z_ONE_STEP', 'PE2'], ['Z_ONE_DIR', 'PE3'], ['Z_ONE_UART', 'PE1'], ['Z_TWO_EN', 'PE0'], ['Z_TWO_STEP', 'PE6'], ['Z_TWO_DIR', 'PA14'], ['Z_TWO_UART', 'PD3'], ['HEATER_BED', 'PA3'], ['HEATER_HE', 'PA2'], ['HEATER_LED', 'PB10'], ['TEMP_BED', 'PF3'], ['TEMP_HE', 'PF4'], ['TEMP_CHM', 'PF5'], ['BAY_1', 'PD12'], ['BEDFAN', 'PA8'], ['NMFAN', 'PE5'], ['BUZZ', 'PD15'], ['ENDSTOP_Z', 'PG10'], ['ENDSTOP_X', 'PG6'], ['ENDSTOP_Y', 'PG9'], ['BTTFS', 'PG15']]}, 'probe': {'z_offset': 6.345, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'nhk:gpio10', 'speed': 8.0, 'lift_speed': 8.0, 'x_offset': 0.0, 'y_offset': 19.75, 'samples': 3, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.0075, 'samples_tolerance_retries': 3}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 3, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 14.0, 'speed': 120.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [150.0, 150.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 8.0, 'speed': 150.0, 'fade_start': 0.6, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.04875, 0.06875, 0.04, 0.07875, 0.07], [0.05, 0.0675, 0.05375, 0.06375, 0.09], [0.00625, 0.03625, 0.0, 0.045, 0.075], [0.02125, 0.0825, 0.07125, 0.08125, 0.09875], [-0.025, 0.06875, 0.04625, 0.08875, 0.07875]], 'min_x': 40.0, 'max_x': 260.0, 'min_y': 40.0, 'max_y': 260.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': 3, 'color_order': ['RGBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!B_MOTOR_EN', 'endstop_pin': 'nhk:gpio12', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!A_MOTOR_EN', 'endstop_pin': 'ENDSTOP_Y', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ZERO_EN', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 200.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ONE_EN'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_TWO_EN'}, 'output_pin act_led': {'pwm': False, 'pin': '!nhk:gpio8', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'nhk:gpio21', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_miso_pin': 'nhk:gpio19', 'spi_software_mosi_pin': 'nhk:gpio20'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[155.0, 155.0, 20.0]], 'accel_chip': 'adxl345'}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'pullup_resistor': 2200.0, 'inline_resistor': 0.0, 'sensor_pin': 'nhk:gpio26', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'filament_motion_sensor filament_sensor': {'switch_pin': '^BTTFS', 'extruder': 'extruder', 'detection_length': 14.0, 'pause_on_runout': True, 'runout_gcode': '\nBEEP_ERROR\nPAUSE', 'insert_gcode': '\nNozzle_ON', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro fs_off': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro fs_on': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro _air_filter_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1'}, 'gcode_macro reset_air_filter': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }', 'description': 'Resets the air-filter replacement timer'}, 'gcode_macro query_air_filter': {'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }', 'description': 'Displays the amount of time the air filter has run since it was last reset.'}, 'delayed_gcode _air_filter_timer': {'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1", 'initial_duration': 1.0}, 'delayed_gcode _air_filter_flush_timer': {'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300", 'initial_duration': 300.0}, 'gcode_macro heatsoaker': {'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999', 'description': 'HeatSoak for an Hour'}, 'gcode_macro beep': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro beep_success': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000', 'description': 'G-Code macro'}, 'gcode_macro beep_error': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100', 'description': 'G-Code macro'}, 'gcode_macro cg28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro chome': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro center_accuracy': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro lights_on': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25', 'description': 'G-Code macro'}, 'gcode_macro pid_hotend': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260', 'description': 'G-Code macro'}, 'gcode_macro pid_bed': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110', 'description': 'G-Code macro'}, 'gcode_macro manual_flow_calibration': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'delayed_gcode heatsoak_delay': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro heatsoak_timer': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}', 'description': 'G-Code macro'}, 'gcode_macro park_front': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT', 'description': 'G-Code macro'}, 'gcode_macro park_front_low': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW', 'description': 'G-Code macro'}, 'gcode_macro park_rear': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR', 'description': 'G-Code macro'}, 'gcode_macro park_center': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER', 'description': 'G-Code macro'}, 'gcode_macro park_bed': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED', 'description': 'G-Code macro'}, 'gcode_macro force_bed_down': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing'}, 'gcode_macro force_bed_up': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing.'}, 'gcode_macro force_bed_lock': {'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90', 'description': 'Active Z steppers to lock down the bed, Without Homing'}, 'gcode_macro force_bed_unlock': {'gcode': '\nM84', 'description': 'Unlocks the Bed'}, 'delayed_gcode filter_air_stop': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro print_end': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro prime_blob': {'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state', 'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.'}, 'gcode_macro ringing_tower': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_mzv': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_ei': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro priming': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000', 'description': 'G-Code macro'}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount'}, 'gcode_macro z_tilt_adjust': {'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0', 'rename_existing': '_Z_TILT_ADJUST', 'description': ''}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'skew_correction my_skew_profile': {'xy_skew': -0.000802972249612, 'xz_skew': 0.0, 'yz_skew': 0.0}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'zv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 58.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 43.4}, 'printer': {'max_velocity': 300.0, 'max_accel': 10000.0, 'max_accel_to_decel': 5000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 50.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': True, 'save_config_pending_items': {'bed_mesh default': {'version': '1', 'points': '\n  0.097080, 0.023330, -0.020420\n  0.029580, -0.005420, -0.024170\n  0.018330, 0.008330, -0.014170\n  0.027080, 0.005830, -0.022920', 'x_count': '3', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '98.74', 'max_x': '201.25', 'min_y': '80.07', 'max_y': '219.9'}}}}
2024-02-08 05:29:36,249 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-08 05:29:36,250 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-08 05:29:36,251 [printer.py:reinit()] - # Extruders: 1
2024-02-08 05:29:36,251 [printer.py:reinit()] - # Temperature devices: 6
2024-02-08 05:29:36,251 [printer.py:reinit()] - # Fans: 5
2024-02-08 05:29:36,251 [printer.py:reinit()] - # Output pins: 3
2024-02-08 05:29:36,251 [printer.py:reinit()] - # Leds: 1
2024-02-08 05:29:36,262 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-08 05:29:36,264 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-08 05:29:36,512 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor Pi&temperature_sensor Octopus&temperature_sensor NitehawkChip&temperature_sensor Nitehawk&fan&fan_generic BoomBox&fan_generic BedFans&heater_fan hotend_fan&heater_fan Vent&filament_motion_sensor filament_sensor&output_pin caselight&output_pin beeper&output_pin act_led&neopixel sb_leds
2024-02-08 05:29:36,516 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-08 05:29:36,517 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-08 05:29:36,522 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-08 05:29:36,528 [screen.py:init_klipper()] - Printer initialized
2024-02-08 05:29:36,528 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-08 05:29:36,528 [printer.py:change_state()] - Adding callback for state: ready
2024-02-08 05:29:36,536 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-08 05:29:36,648 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-08 05:29:36,665 [main_menu.py:add_device()] - Adding device: extruder
2024-02-08 05:29:36,669 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-08 05:29:36,674 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-08 05:29:36,674 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-08 05:29:36,674 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-08 05:29:36,674 [main_menu.py:add_device()] - Adding device: temperature_sensor NitehawkChip
2024-02-08 05:29:36,674 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-08 05:29:36,698 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-08 05:29:36,718 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-08 05:29:36,722 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor Pi', 'temperature_sensor Octopus', 'temperature_sensor NitehawkChip', 'temperature_sensor Nitehawk', 'extruder']
2024-02-08 05:29:36,730 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-08 05:29:36,731 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-08 05:29:39,098 [screen.py:_go_to_submenu()] - #### Go to submenu my_macros_menu
2024-02-08 05:29:39,098 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-08 05:29:39,100 [screen.py:_load_panel()] - Loading panel: menu
2024-02-08 05:29:39,141 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > my_macros_menu
2024-02-08 05:29:41,907 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-08 05:29:41,954 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-08 05:29:42,842 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-08 05:29:42,843 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-08 05:29:42,846 [screen.py:_load_panel()] - Loading panel: menu
2024-02-08 05:29:43,007 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-08 05:29:43,022 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-08 05:29:43,038 [menu.py:arrangeMenuItems()] - X > more power
2024-02-08 05:29:43,040 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-08 05:29:43,048 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-08 05:29:45,642 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-08 05:29:45,667 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-08 05:29:47,879 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-08 05:29:47,879 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-08 05:29:47,934 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-08 05:29:47,953 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-08 05:29:47,968 [menu.py:arrangeMenuItems()] - X > more power
2024-02-08 05:29:47,970 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-08 05:29:47,979 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-08 05:29:48,887 [screen.py:_load_panel()] - Loading panel: settings
2024-02-08 05:29:49,002 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > settings
2024-02-08 05:29:59,845 [screen_panel.py:switch_config_option()] - [main] only_heaters toggled False
2024-02-08 05:29:59,858 [printer.py:change_state()] - Adding callback for state: ready
2024-02-08 05:29:59,862 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 05:29:59,958 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-08 05:29:59,975 [main_menu.py:add_device()] - Adding device: extruder
2024-02-08 05:29:59,979 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-08 05:29:59,983 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-08 05:29:59,987 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-08 05:29:59,991 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-08 05:29:59,995 [main_menu.py:add_device()] - Adding device: temperature_sensor NitehawkChip
2024-02-08 05:29:59,999 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-08 05:30:00,028 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-08 05:30:25,152 [screen.py:_load_panel()] - Loading panel: extrude
2024-02-08 05:30:25,261 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-02-08 05:30:25,266 [extrude.py:process_update()] - filament_motion_sensor filament_sensor: {'filament_detected': False, 'enabled': False}
2024-02-08 05:30:28,730 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-08 05:30:28,760 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-08 05:32:29,015 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 05:33:20,784 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 05:33:20,839 [screen.py:wake_screen()] - Screen wake up
2024-02-08 05:33:42,490 [screen.py:_go_to_submenu()] - #### Go to submenu my_macros_menu
2024-02-08 05:33:42,491 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-08 05:33:42,494 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 05:33:42,537 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > my_macros_menu
2024-02-08 05:33:44,499 [screen.py:_send_action()] - printer.gcode.script: {'script': 'force_bed_down DISTANCE=4'}
2024-02-08 05:33:46,227 [screen.py:_send_action()] - printer.gcode.script: {'script': 'force_bed_down DISTANCE=4'}
2024-02-08 05:33:47,631 [screen.py:_send_action()] - printer.gcode.script: {'script': 'force_bed_down DISTANCE=4'}
2024-02-08 05:33:48,895 [screen.py:_send_action()] - printer.gcode.script: {'script': 'force_bed_down DISTANCE=4'}
2024-02-08 05:33:50,255 [screen.py:_send_action()] - printer.gcode.script: {'script': 'force_bed_down DISTANCE=4'}
2024-02-08 05:35:51,016 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 06:02:12,234 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 06:02:12,253 [screen.py:wake_screen()] - Screen wake up
2024-02-08 06:02:14,323 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-08 06:02:14,399 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-08 06:02:16,502 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-08 06:02:16,502 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-08 06:02:16,506 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 06:02:16,678 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-08 06:02:16,693 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-08 06:02:16,708 [menu.py:arrangeMenuItems()] - X > more power
2024-02-08 06:02:16,710 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-08 06:02:16,719 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-08 06:02:19,131 [screen.py:_load_panel()] - Loading panel: system
2024-02-08 06:02:19,140 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/machine/system_info
2024-02-08 06:02:19,171 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > system
2024-02-08 06:02:19,196 [system.py:get_updates()] - {'jsonrpc': '2.0', 'result': {'github_rate_limit': None, 'github_requests_remaining': None, 'github_limit_reset_time': None, 'version_info': {'system': {'package_count': 39, 'package_list': ['bluez', 'firmware-atheros', 'firmware-brcm80211', 'firmware-libertas', 'firmware-misc-nonfree', 'firmware-realtek', 'kms++-utils', 'libbluetooth3', 'libc-bin', 'libc-dev-bin', 'libc-devtools', 'libc-l10n', 'libc6', 'libc6-dbg', 'libc6-dev', 'libcamera-apps-lite', 'libkms++0', 'linux-headers-rpi-2712', 'linux-headers-rpi-v8', 'linux-image-rpi-2712', 'linux-image-rpi-v8', 'linux-kbuild-6.1', 'linux-libc-dev', 'locales', 'openssh-client', 'openssh-server', 'openssh-sftp-server', 'raspberrypi-net-mods', 'raspberrypi-sys-mods', 'raspi-config', 'raspi-firmware', 'rpi-eeprom', 'rpicam-apps-lite', 'ssh', 'linux-headers-6.1.0-rpi8-common-rpi', 'linux-headers-6.1.0-rpi8-rpi-2712', 'linux-headers-6.1.0-rpi8-rpi-v8', 'linux-image-6.1.0-rpi8-rpi-2712', 'linux-image-6.1.0-rpi8-rpi-v8']}, 'moonraker': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Arksine', 'repo_name': 'moonraker', 'remote_url': 'https://github.com/Arksine/moonraker.git', 'recovery_url': 'https://github.com/Arksine/moonraker.git', 'version': 'v0.8.0-309', 'remote_version': 'v0.8.0-309', 'rollback_version': 'v0.8.0-309', 'current_hash': 'f946e6a28d7506d8da16851cbf730fa89b267926', 'remote_hash': 'f946e6a28d7506d8da16851cbf730fa89b267926', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.8.0-309-gf946e6a2', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'klipper': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Klipper3d', 'repo_name': 'klipper', 'remote_url': 'https://github.com/Klipper3d/klipper', 'recovery_url': 'https://github.com/Klipper3d/klipper', 'version': 'v0.12.0-102', 'remote_version': 'v0.12.0-102', 'rollback_version': 'v0.12.0-102', 'current_hash': '9f41f53c5e364694b9b41279b3b3aee34250b93a', 'remote_hash': '9f41f53c5e364694b9b41279b3b3aee34250b93a', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.12.0-102-g9f41f53c', 'pristine': False, 'corrupt': False, 'warnings': [], 'anomalies': ["Repo has untracked source files: ['klippy/extras/gcode_shell_command.py']"]}, 'KlipperScreen': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'KlipperScreen', 'repo_name': 'KlipperScreen', 'remote_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'recovery_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'version': 'v0.3.8-88', 'remote_version': 'v0.3.8-88', 'rollback_version': 'v0.3.8-88', 'current_hash': 'c832c90f47984ba234d87bebe306b55ad142ecc2', 'remote_hash': 'c832c90f47984ba234d87bebe306b55ad142ecc2', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.3.8-88-gc832c90f', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}}, 'busy': False}, 'id': 17}
2024-02-08 06:02:19,207 [system.py:_needs_update()] - system  -> 39
2024-02-08 06:02:21,615 [KlippyWebsocket.py:emergency_stop()] - Sending printer.emergency_stop
2024-02-08 06:02:21,688 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-02-08 06:02:21,688 [printer.py:change_state()] - Adding callback for state: shutdown
2024-02-08 06:02:21,693 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-08 06:02:21,695 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 06:02:21,749 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-08 06:02:32,822 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-08 06:02:32,823 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-88-gc832c90
2024-02-08 06:02:32,823 [functions.py:log_start()] - Python version: 3.11
2024-02-08 06:02:32,944 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-08 06:02:32,944 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-08 06:02:32,959 [config.py:log_config()] -  ===== Config File =====
[printer Zarya]

[menu __main my_macros_menu]
name = Macros

[menu __main my_macros_menu sub_macro_item]
name = PARK CENTER
method = printer.gcode.script
params = {"script":"PARK_CENTER"}

[menu __main my_macros_menu sub_macro_item2]
name = Force Bed Down
method = printer.gcode.script
params = {"script":"force_bed_down DISTANCE=4"}

[menu __main my_macros_menu sub_macro_item3]
name = HEATSOAKER
method = printer.gcode.script
params = {"script":"HEATSOAKER"}
=======================
2024-02-08 06:02:32,965 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
screen_blanking = 120
24htime = False
side_macro_shortcut = False
font_size = large
show_heater_power = True
invert_z = True
move_speed_xy = 199

[displayed_macros Printer]
attach_probe = False
bed_mesh_calibrate = False
attach_probe_lock = False
center_toolhead = False
dock_probe = False
g32 = False
dock_probe_unlock = False
jessie_tan = False
center_accuracy = False
filament_reset = False
jessie_soulblack = False
m900 = False
preheat = False
polyterra_white = False
nmfan_on = False
polyterra_marble = False
polylite_black = False
purgeline = False
probe_calibrate = False
probe_accuracy = False
polyterra_gray = False
polylite_gray = False
polyterra_black = False
status_busy = False
print_start = False
status_meshing = False
status_calibrating_z = False
test_speed = False
status_off = False
status_leveling = False
status_ready = False
set_nozzle_leds_on = False
set_nozzle_leds_off = False
set_logo_leds_off = False
status_heating = False
status_homing = False
status_cleaning = False
status_printing = False
abs_offset = False
beep = False
blk_paramount = False
cg28 = False
polyterra_blue = False
pause = False
measure_resonnances_x = False
m600 = False
measure_resonnances_y = False
polyterra_candy = False
polyterra_purp = False
sparta_black = False
query_air_filter = False
print_end = False
z_tilt_adjust = False
reset_air_filter = False
polylite_black_asa = False
ziro_marble = False
ziro_sparkle = False
sparta_purple = False
status_caution = False
sparta_gray = False
calibrate_z = False
cancel_print = False
axes_shaper_calibration = False
beep_error = False
belts_shaper_calibration = False
beep_success = False
excitate_axis_at_freq = False
compute_flow_multiplier = False
flow_multiplier_calibration = False
manual_flow_calibration = False
line_purge = False
prime_blob = False
polylite_black_abs = False
polylite_yellow_asa = False
pressure_advance_calibration = False
setup_kamp_meshing = False
sparta_reset = False
setup_line_purge = False
sparta_offset = False
print_reset = False

[graph Printer]
heater_bed = False
extruder = False

=======================
2024-02-08 06:02:32,965 [config.py:__init__()] - Configured printers: [
  {
    "Zarya": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-08 06:02:33,029 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-08 06:02:33,029 [config.py:install_language()] - Using lang en
2024-02-08 06:02:33,042 [screen.py:__init__()] - Screen resolution: 800x480
2024-02-08 06:02:33,043 [KlippyGtk.py:__init__()] - Font size: 18.0 (large)
2024-02-08 06:02:33,616 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 120
2024-02-08 06:02:33,623 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-08 06:02:33,628 [screen.py:initial_connection()] - Default printer: None
2024-02-08 06:02:33,659 [screen.py:connect_printer()] - Connecting to printer: Zarya
2024-02-08 06:02:33,659 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-08 06:02:33,695 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-08 06:02:33,704 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-08 06:02:33,718 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-08 06:02:33,725 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-08 06:02:33,727 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-08 06:02:33,733 [_logging.py:info()] - Websocket connected
2024-02-08 06:02:33,734 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-08 06:02:33,824 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-08 06:02:33,831 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-08 06:02:33,832 [printer.py:configure_cameras()] - Cameras: []
2024-02-08 06:02:33,832 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-08 06:02:33,839 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-08 06:02:34,067 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-08 06:02:34,071 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_prefix': '\\\\'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pauses Print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'gcode_macro POLYLITE_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026'}, 'gcode_macro POLYLITE_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro SPARTA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325'}, 'gcode_macro SPARTA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300'}, 'gcode_macro SPARTA_PURPLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275'}, 'gcode_macro POLYLITE_BLACK_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510'}, 'gcode_macro POLYLITE_BLACK_ABS': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYLITE_YELLOW_ASA': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro FILAMENT_RESET': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro ABS_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0'}, 'gcode_macro PRINT_OFFSET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0'}, 'gcode_macro PRINT_RESET': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0'}, 'gcode_macro Clean_Filament_Cold_Pull': {'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince', 'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0'}, 'gcode_macro Manual_Clean': {'description': 'Grab a Brush ready, Start Scrubbing!', 'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0'}, 'gcode_macro LOAD_FILAMENT_PLA': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro LOAD_FILAMENT_ABS': {'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_PLA': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro UNLOAD_FILAMENT_ABS': {'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)', 'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state'}, 'gcode_macro POLYTERRA_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031'}, 'gcode_macro POLYTERRA_BLACK': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05'}, 'gcode_macro POLYTERRA_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550'}, 'gcode_macro POLYTERRA_CANDY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035'}, 'gcode_macro POLYTERRA_GRAY': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03'}, 'gcode_macro POLYTERRA_BLUE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445'}, 'gcode_macro POLYTERRA_LAV': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054'}, 'gcode_macro ZIRO_MARBLE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252'}, 'gcode_macro JESSIE_TAN': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029'}, 'gcode_macro SUNLU_WHITE': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066'}, 'gcode_macro M600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Run standard input shaper test for all axes', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Run custom demi-axe test to analyze belts on CoreXY printers', 'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations', 'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400'}, 'gcode_macro XYBelt_Tension': {'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115', 'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': '300.0', 'verbose': 'True'}, 'heater_bed': {'pwm_cycle_time': '0.0166', 'heater_pin': 'HEATER_BED', 'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_BED', 'max_power': '0.5', 'min_temp': '-20', 'max_temp': '120', 'control': 'pid', 'pid_kp': '33.946', 'pid_ki': '0.997', 'pid_kd': '288.961'}, 'extruder': {'step_pin': 'nhk:gpio23', 'dir_pin': '!nhk:gpio24', 'enable_pin': '!nhk:gpio25', 'rotation_distance': '47.088', 'gear_ratio': '9:1', 'microsteps': '16', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'nhk:gpio9', 'sensor_pin': 'nhk:gpio29', 'pullup_resistor': '2200', 'sensor_type': 'PT1000', 'min_temp': '10', 'max_temp': '280', 'max_power': '1.0', 'min_extrude_temp': '10', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'control': 'pid', 'pid_kp': '26.239', 'pid_ki': '1.965', 'pid_kd': '87.574'}, 'tmc2209 extruder': {'stealthchop_threshold': '0', 'run_current': '0.6', 'interpolate': 'false', 'sense_resistor': '0.100', 'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1'}, 'firmware_retraction': {'retract_length': '0.5', 'retract_speed': '30', 'unretract_speed': '30'}, 'heater_fan hotend_fan': {'pin': 'nhk:gpio5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'nhk:gpio6', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.010'}, 'output_pin caselight': {'pin': 'HEATER_LED', 'pwm': 'true', 'cycle_time': '0.01', 'value': '0.15'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'TEMP_CHM', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'temperature_sensor Pi': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'heater_fan Vent': {'pin': 'BAY_1', 'max_power': '1', 'kick_start_time': '0.5', 'shutdown_speed': '0', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '0.40', 'cycle_time': '0.008'}, 'fan_generic BoomBox': {'pin': 'NMFAN', 'shutdown_speed': '0.0', 'hardware_pwm': 'False', 'kick_start_time': '0.5', 'off_below': '0.05', 'cycle_time': '0.008'}, 'fan_generic BedFans': {'pin': 'BEDFAN', 'kick_start_time': '0.5', 'cycle_time': '0.008'}, 'output_pin beeper': {'pin': 'BUZZ', 'value': '0', 'shutdown_value': '0', 'pwm': 'True', 'cycle_time': '0.0005'}, 'temperature_sensor NitehawkChip': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'nhk', 'min_temp': '0', 'max_temp': '100'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00'}, 'board_pins': {'aliases': '\n\n\nB_MOTOR_EN=PF14,  B_MOTOR_STEP=PF13,  B_MOTOR_DIR=PF12,  B_MOTOR_UART=PC4,\n\nA_MOTOR_EN=PF15,  A_MOTOR_STEP=PG0,  A_MOTOR_DIR=PG1,  A_MOTOR_UART=PD11,\n\nEXTRUDER_EN=PG5,  EXTRUDER_STEP=PF11,  EXTRUDER_DIR=PG3,  EXTRUDER_UART=PC6,\n\n\n\nZ_ZERO_EN=PF1,  Z_ZERO_STEP=PC13,  Z_ZERO_DIR=PF0,  Z_ZERO_UART=PE4,\n\nZ_ONE_EN=PD4,  Z_ONE_STEP=PE2,  Z_ONE_DIR=PE3,  Z_ONE_UART=PE1,\n\nZ_TWO_EN=PE0,  Z_TWO_STEP=PE6,  Z_TWO_DIR=PA14, Z_TWO_UART=PD3,\n\n\n\nHEATER_BED=PA3, HEATER_HE=PA2, HEATER_LED=PB10,\n\nTEMP_BED=PF3, TEMP_HE=PF4, TEMP_CHM=PF5,\n\nBAY_1=PD12, BEDFAN=PA8, NMFAN=PE5, BUZZ=PD15,\n\nENDSTOP_Z=PG10,  ENDSTOP_X=PG6,  ENDSTOP_Y=PG9, BTTFS=PG15'}, 'stepper_z': {'endstop_pin': 'probe:z_virtual_endstop', 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'enable_pin': '!Z_ZERO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200', 'position_max': '200', 'position_min': '-10', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'probe': {'pin': 'nhk:gpio10', 'z_offset': '6.345', 'x_offset': '0', 'y_offset': '19.75', 'speed': '8.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.0075', 'samples_tolerance_retries': '3'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '120', 'retries': '3', 'retry_tolerance': '0.0075', 'horizontal_move_z': '14'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '8', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'probe_count': '5,5', 'zero_reference_position': '150, 150', 'algorithm': 'bicubic', 'fade_start': '0.6', 'fade_end': '10', 'fade_target': '0'}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': '3', 'color_order': 'RGBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'stepper_x': {'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'enable_pin': '!B_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true', 'endstop_pin': 'nhk:gpio12'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'interpolate': 'false', 'run_current': '1', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'enable_pin': '!A_MOTOR_EN', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'ENDSTOP_Y', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '100', 'homing_retract_dist': '3', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'interpolate': 'false', 'run_current': '1', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'enable_pin': '!Z_ONE_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'enable_pin': '!Z_TWO_EN', 'rotation_distance': '4', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00'}, 'output_pin act_led': {'pin': '!nhk:gpio8'}, 'adxl345': {'cs_pin': 'nhk:gpio21', 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_mosi_pin': 'nhk:gpio20', 'spi_software_miso_pin': 'nhk:gpio19'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n155, 155, 20'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor Nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'sensor_pin': 'nhk:gpio26', 'pullup_resistor': '2200', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'filament_motion_sensor filament_sensor': {'detection_length': '14', 'extruder': 'extruder', 'switch_pin': '^BTTFS', 'pause_on_runout': 'True', 'insert_gcode': '\nNozzle_ON', 'runout_gcode': '\nBEEP_ERROR\nPAUSE'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_OFF': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0'}, 'gcode_macro FS_ON': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1'}, 'gcode_macro _AIR_FILTER_VARIABLES': {'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1', 'gcode': ''}, 'gcode_macro RESET_AIR_FILTER': {'description': 'Resets the air-filter replacement timer', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }'}, 'gcode_macro QUERY_AIR_FILTER': {'description': 'Displays the amount of time the air filter has run since it was last reset.', 'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }'}, 'delayed_gcode _AIR_FILTER_TIMER': {'initial_duration': '1', 'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1"}, 'delayed_gcode _AIR_FILTER_FLUSH_TIMER': {'initial_duration': '300', 'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300"}, 'gcode_macro HEATSOAKER': {'description': 'HeatSoak for an Hour', 'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999'}, 'gcode_macro BEEP': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}'}, 'gcode_macro BEEP_SUCCESS': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000'}, 'gcode_macro BEEP_ERROR': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100'}, 'gcode_macro CG28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CHOME': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}'}, 'gcode_macro CENTER_ACCURACY': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY'}, 'gcode_macro Lights_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro Lights_ON': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25'}, 'gcode_macro PID_HOTEND': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260'}, 'gcode_macro PID_BED': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110'}, 'gcode_macro MANUAL_FLOW_CALIBRATION': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'delayed_gcode HEATSOAK_DELAY': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}'}, 'gcode_macro HEATSOAK_TIMER': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}'}, 'gcode_macro PARK_FRONT': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT'}, 'gcode_macro PARK_FRONT_LOW': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW'}, 'gcode_macro PARK_REAR': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR'}, 'gcode_macro PARK_CENTER': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER'}, 'gcode_macro PARK_BED': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED'}, 'gcode_macro FORCE_BED_DOWN': {'description': 'Force move bed down without homing', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_UP': {'description': 'Force move bed down without homing.', 'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84'}, 'gcode_macro FORCE_BED_LOCK': {'description': 'Active Z steppers to lock down the bed, Without Homing', 'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90'}, 'gcode_macro FORCE_BED_UNLOCK': {'description': 'Unlocks the Bed', 'gcode': '\nM84'}, 'delayed_gcode FILTER_AIR_STOP': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}'}, 'gcode_macro PRIME_BLOB': {'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.', 'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state'}, 'gcode_macro RINGING_TOWER': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_MZV': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro TEST_IS_EI': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}'}, 'gcode_macro PRIMING': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107'}, 'gcode_macro CLEAN': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro Z_TILT_ADJUST': {'rename_existing': '_Z_TILT_ADJUST', 'description': '', 'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro Smart_Park': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'exclude_object': {}, 'skew_correction': {}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '10000', 'max_z_velocity': '15', 'max_z_accel': '50', 'square_corner_velocity': '5.0'}, 'input_shaper': {'shaper_freq_x': '58.8', 'shaper_type_x': 'zv', 'shaper_freq_y': '43.4', 'shaper_type_y': 'mzv'}, 'bed_mesh default': {'version': '1', 'points': '\n0.048750, 0.068750, 0.040000, 0.078750, 0.070000\n0.050000, 0.067500, 0.053750, 0.063750, 0.090000\n0.006250, 0.036250, 0.000000, 0.045000, 0.075000\n0.021250, 0.082500, 0.071250, 0.081250, 0.098750\n-0.025000, 0.068750, 0.046250, 0.088750, 0.078750', 'tension': '0.2', 'min_x': '40.0', 'algo': 'bicubic', 'y_count': '5', 'mesh_y_pps': '2', 'min_y': '40.0', 'x_count': '5', 'max_y': '260.0', 'mesh_x_pps': '2', 'max_x': '260.0'}, 'skew_correction my_skew_profile': {'xy_skew': '-0.000802972249612', 'xz_skew': '0.0', 'yz_skew': '0.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_0E003500105053424E363620-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu nhk': {'serial': '/dev/serial/by-id/usb-Klipper_rp2040_E6626005A7811836-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': '\\\\'}, 'gcode_macro cancel_print': {'gcode': '\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nFS_OFF\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F8000\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=5400\n{% endif %}', 'rename_existing': 'BASE_PAUSE', 'description': 'Pauses Print'}, 'gcode_macro resume': {'gcode': "\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer['pause_resume'].is_paused|int == 1 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM118 Reheating Nozzle\nM109 S{etemp|int}\n{% endif %}\n\n\nM106 S102\nG1 E50 F2000\nG1 E75 F250\nG1 E-5 F2000\nM106 S0\nG4 P{1 * 60000}\n\n\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\nG1 Z{zhop * -1} F900\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60\nFS_ON\nM118 RESUMED\nBASE_RESUME\n{% endif %}", 'rename_existing': 'BASE_RESUME', 'description': 'Resumes Print Job, Purges and Cleans Nozzle.', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro polylite_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.026', 'description': 'G-Code macro'}, 'gcode_macro polylite_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro sparta_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0325', 'description': 'G-Code macro'}, 'gcode_macro sparta_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0300', 'description': 'G-Code macro'}, 'gcode_macro sparta_purple': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0275', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0510', 'description': 'G-Code macro'}, 'gcode_macro polylite_black_abs': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polylite_yellow_asa': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro filament_reset': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro abs_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_offset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro print_reset': {'gcode': '\nSET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=0', 'description': 'G-Code macro'}, 'gcode_macro clean_filament_cold_pull': {'gcode': '\n\n{% set TEMP = params.TEMP|default(260)|float %}\n\n{% set REST_TEMP = params.REST_TEMP|default(50)|float %}\n\n{% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}\n\n\nM109 S{TEMP}\nM106 S128\nG1 E50 F2000\nG1 E100 F150\nM400\nM109 S{REST_TEMP}\nM109 S{PULL_TEMP}\nG4 P{2 * 60000}\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nG4 P{1 * 60000}\nM106 S0', 'description': 'Sparta3D Cleaning Filament Cold Pull, Thank you Vince'}, 'gcode_macro manual_clean': {'gcode': '\n\n{% set TEMP = params.TEMP|default(180)|float %}\n\nPARK_FRONT\nM109 S{TEMP}\nM106 S128\nM118 Ready to Clean!\nBEEP I=3 DUR=100 FREQ=1000\nG4 P{1 * 60000}\nM104 S0\nM106 S0', 'description': 'Grab a Brush ready, Start Scrubbing!'}, 'gcode_macro load_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro load_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(50)|float %}\n\nSAVE_GCODE_STATE NAME=LOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG92 E0\nM106 S102\nG1 E{DISTANCE|float} F2000\nG1 E60 F250\nG1 E-8 F2000\nM106 S0\nM400\nG92 E0\nRESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state', 'description': 'Basic load of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_pla': {'gcode': '\n\n{% set TEMP = params.TEMP|default(220)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro unload_filament_abs': {'gcode': '\n\n{% set TEMP = params.TEMP|default(250)|float %}\n{% set DISTANCE = params.DISTANCE|default(105)|float %}\n\nSAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state\nM109 S{TEMP}\nM83\nG1 E-10 F3600\nG4 P{1 * 60000}\nG1 E{DISTANCE|float * -1} F3000\nRESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state', 'description': 'Basic unload of the filament (used with M600/CHANGE_FILAMENT)'}, 'gcode_macro polyterra_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.031', 'description': 'G-Code macro'}, 'gcode_macro polyterra_black': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.05', 'description': 'G-Code macro'}, 'gcode_macro polyterra_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0550', 'description': 'G-Code macro'}, 'gcode_macro polyterra_candy': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.035', 'description': 'G-Code macro'}, 'gcode_macro polyterra_gray': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.03', 'description': 'G-Code macro'}, 'gcode_macro polyterra_blue': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0445', 'description': 'G-Code macro'}, 'gcode_macro polyterra_lav': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.054', 'description': 'G-Code macro'}, 'gcode_macro ziro_marble': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.0252', 'description': 'G-Code macro'}, 'gcode_macro jessie_tan': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.029', 'description': 'G-Code macro'}, 'gcode_macro sunlu_white': {'gcode': '\nSET_PRESSURE_ADVANCE ADVANCE=0.066', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\nPAUSE\nG1 E-80 F4000\nNozzle_PREP\nM117 Unloading Filament', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=X\nM400\nTEST_RESONANCES AXIS=Y\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER', 'description': 'Run standard input shaper test for all axes'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\nCG28\n{% set verbose = params.VERBOSE|default(true) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b\nM400\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a\nM400\n\n{% if verbose %}\nRESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."\n{% endif %}\nRUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS', 'description': 'Run custom demi-axe test to analyze belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\nCG28\n{% set FREQUENCY = params.FREQUENCY|default(25)|int %}\n{% set TIME = params.TIME|default(10)|int %}\n{% set AXIS = params.AXIS|default("x")|string|lower %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}\nM400', 'description': 'Maintain a specified input shaper excitating frequency for some time to diagnose vibrations'}, 'gcode_macro xybelt_tension': {'gcode': '\n{% set x_max = printer.configfile.settings.stepper_x.position_max %}\n{% set travel_speed = printer.configfile.settings.printer.max_velocity %}\nG0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}\n{ action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }', 'description': 'A macro that assists with repeatable belt tensioning.', 'variable_y_tensioning_position': '115'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n{% set fc_extruder = params.EXTRUDER|default(250)|float %}\n{% set fc_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={fc_extruder} BED={fc_bed}\n\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(50)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.95)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(0)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n\n\n\n{% set pa_extruder = params.EXTRUDER|default(250)|float %}\n{% set pa_bed = params.BED|default(110)|float %}\nPRINT_START EXTRUDER={pa_extruder} BED={pa_bed}\n\n\n\n\n\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.0025)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(0.924)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(0)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(80)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(150)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(300)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.6)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\n\n{action_respond_info("")}\n{action_respond_info("Starting Pressure Advance calibration print.")}\n{action_respond_info("")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button once the print starts exhibiting PA values that are obviously too high.")}\n{action_respond_info("")}\n{action_respond_info("PA of first band: %.4f" % pa_start)}\n{action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}\n{action_respond_info("PA increment per band: %.4f" % pa_increment)}\n{action_respond_info("Number of bands: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Inspect the printed model. "\n"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "\n"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "\n"Your final Pressure Advance value would then be:"\n)}\n{action_respond_info("")}\n{action_respond_info("Assuming that first band_number is 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Update your [extruder] config section and set \\"pressure_advance\\" to the value you calculated.")}\n{action_respond_info("")}\n\n\n\n\n\n\n\n\n\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n\n\n\nM221 S100\n\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n\nPRINT_END\nM118 NEW_PA = 0.020 + (0.0025 * band_number)', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_shell_command plot_graph': {'command': 'bash /home/pi/printer_data/config/Calibrate/Scripts/plot_graphs.sh', 'timeout': 300.0, 'verbose': True}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_BED', 'min_temp': -20.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.5, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 33.946, 'pid_ki': 0.997, 'pid_kd': 288.961, 'heater_pin': 'HEATER_BED', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'tmc2209 extruder': {'uart_pin': 'nhk:gpio0', 'tx_pin': 'nhk:gpio1', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.1, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'PT1000', 'pullup_resistor': 2200.0, 'sensor_pin': 'nhk:gpio29', 'min_temp': 10.0, 'max_temp': 280.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.239, 'pid_ki': 1.965, 'pid_kd': 87.574, 'heater_pin': 'nhk:gpio9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'nhk:gpio23', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!nhk:gpio24', 'rotation_distance': 47.088, 'full_steps_per_rotation': 200, 'gear_ratio': [[9.0, 1.0]], 'enable_pin': '!nhk:gpio25'}, 'firmware_retraction': {'retract_length': 0.5, 'retract_speed': 30.0, 'unretract_extra_length': 0.0, 'unretract_speed': 30.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'nhk:gpio5', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'nhk:gpio6'}, 'output_pin caselight': {'pwm': True, 'pin': 'HEATER_LED', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.15, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'TEMP_CHM', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'temperature_sensor pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'heater_fan vent': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BAY_1', 'fan_speed': 0.4}, 'fan_generic boombox': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.05, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'NMFAN'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.008, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'BEDFAN'}, 'output_pin beeper': {'pwm': True, 'pin': 'BUZZ', 'cycle_time': 0.0005, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'temperature_sensor nitehawkchip': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'nhk', 'min_temp': 0.0, 'max_temp': 100.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['B_MOTOR_EN', 'PF14'], ['B_MOTOR_STEP', 'PF13'], ['B_MOTOR_DIR', 'PF12'], ['B_MOTOR_UART', 'PC4'], ['A_MOTOR_EN', 'PF15'], ['A_MOTOR_STEP', 'PG0'], ['A_MOTOR_DIR', 'PG1'], ['A_MOTOR_UART', 'PD11'], ['EXTRUDER_EN', 'PG5'], ['EXTRUDER_STEP', 'PF11'], ['EXTRUDER_DIR', 'PG3'], ['EXTRUDER_UART', 'PC6'], ['Z_ZERO_EN', 'PF1'], ['Z_ZERO_STEP', 'PC13'], ['Z_ZERO_DIR', 'PF0'], ['Z_ZERO_UART', 'PE4'], ['Z_ONE_EN', 'PD4'], ['Z_ONE_STEP', 'PE2'], ['Z_ONE_DIR', 'PE3'], ['Z_ONE_UART', 'PE1'], ['Z_TWO_EN', 'PE0'], ['Z_TWO_STEP', 'PE6'], ['Z_TWO_DIR', 'PA14'], ['Z_TWO_UART', 'PD3'], ['HEATER_BED', 'PA3'], ['HEATER_HE', 'PA2'], ['HEATER_LED', 'PB10'], ['TEMP_BED', 'PF3'], ['TEMP_HE', 'PF4'], ['TEMP_CHM', 'PF5'], ['BAY_1', 'PD12'], ['BEDFAN', 'PA8'], ['NMFAN', 'PE5'], ['BUZZ', 'PD15'], ['ENDSTOP_Z', 'PG10'], ['ENDSTOP_X', 'PG6'], ['ENDSTOP_Y', 'PG9'], ['BTTFS', 'PG15']]}, 'probe': {'z_offset': 6.345, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'nhk:gpio10', 'speed': 8.0, 'lift_speed': 8.0, 'x_offset': 0.0, 'y_offset': 19.75, 'samples': 3, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.0075, 'samples_tolerance_retries': 3}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 3, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 14.0, 'speed': 120.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [150.0, 150.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 8.0, 'speed': 150.0, 'fade_start': 0.6, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.04875, 0.06875, 0.04, 0.07875, 0.07], [0.05, 0.0675, 0.05375, 0.06375, 0.09], [0.00625, 0.03625, 0.0, 0.045, 0.075], [0.02125, 0.0825, 0.07125, 0.08125, 0.09875], [-0.025, 0.06875, 0.04625, 0.08875, 0.07875]], 'min_x': 40.0, 'max_x': 260.0, 'min_y': 40.0, 'max_y': 260.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'nhk:gpio7', 'chain_count': 3, 'color_order': ['RGBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'B_MOTOR_UART', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'B_MOTOR_STEP', 'dir_pin': '!B_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!B_MOTOR_EN', 'endstop_pin': 'nhk:gpio12', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'A_MOTOR_UART', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'A_MOTOR_STEP', 'dir_pin': '!A_MOTOR_DIR', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!A_MOTOR_EN', 'endstop_pin': 'ENDSTOP_Y', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 100.0, 'second_homing_speed': 50.0, 'homing_retract_speed': 100.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'Z_ZERO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'Z_ZERO_STEP', 'dir_pin': '!Z_ZERO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ZERO_EN', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 200.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'Z_ONE_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'Z_ONE_STEP', 'dir_pin': '!Z_ONE_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_ONE_EN'}, 'tmc2209 stepper_z2': {'uart_pin': 'Z_TWO_UART', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'Z_TWO_STEP', 'dir_pin': '!Z_TWO_DIR', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!Z_TWO_EN'}, 'output_pin act_led': {'pwm': False, 'pin': '!nhk:gpio8', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'nhk:gpio21', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'nhk:gpio18', 'spi_software_miso_pin': 'nhk:gpio19', 'spi_software_mosi_pin': 'nhk:gpio20'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[155.0, 155.0, 20.0]], 'accel_chip': 'adxl345'}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor nitehawk': {'sensor_type': 'CMFB103F3950FANT', 'pullup_resistor': 2200.0, 'inline_resistor': 0.0, 'sensor_pin': 'nhk:gpio26', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'filament_motion_sensor filament_sensor': {'switch_pin': '^BTTFS', 'extruder': 'extruder', 'detection_length': 14.0, 'pause_on_runout': True, 'runout_gcode': '\nBEEP_ERROR\nPAUSE', 'insert_gcode': '\nNozzle_ON', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro fs_off': {'gcode': '\n\nM118 Filament Sensor OFF\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro fs_on': {'gcode': '\n\nM118 Filament Sensor ON\nSET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro _air_filter_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_fan': "'fan_generic BoomBox'", 'variable_hours_until_replacement': '100', 'variable_replacement_gcode': "'M117 Replace Filter Media'", 'variable_time': '-1'}, 'gcode_macro reset_air_filter': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE=0\n{ action_respond_info("Air filter timer has been reset.") }', 'description': 'Resets the air-filter replacement timer'}, 'gcode_macro query_air_filter': {'gcode': '\n{% set hours = "%.2f"|format(printer[\'gcode_macro _AIR_FILTER_VARIABLES\'].time|int / 3600) %}\n{ action_respond_info("Air Filter Hours: " + hours) }', 'description': 'Displays the amount of time the air filter has run since it was last reset.'}, 'delayed_gcode _air_filter_timer': {'gcode': "\n{% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}\n{% if cached_time == -1 %}\n{% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }\n{% endif %}\n{% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}\nSET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}\n{% endif %}\n{% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}\n{% if cached_time > replacement_seconds %}\n{ printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1", 'initial_duration': 1.0}, 'delayed_gcode _air_filter_flush_timer': {'gcode': "\n{% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}\n{% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}\n{% if saved_time != actual_time %}\nSAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}\n{% endif %}\nUPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300", 'initial_duration': 300.0}, 'gcode_macro heatsoaker': {'gcode': '\nPARK_CENTER\nM190 S110\nM106 S255\nSET_FAN_SPEED FAN=BoomBox SPEED=1\nG4 P{60 * 60000}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\nG4 P{10 * 60000}\nbeep I=3 DUR=555 FREQ=999', 'description': 'HeatSoak for an Hour'}, 'gcode_macro beep': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro beep_success': {'gcode': '\nBEEP I=1 DUR=100 FREQ=1000', 'description': 'G-Code macro'}, 'gcode_macro beep_error': {'gcode': '\nBEEP I=3 DUR=350 FREQ=100', 'description': 'G-Code macro'}, 'gcode_macro cg28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro chome': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG90\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro center_accuracy': {'gcode': '\nM400\nCG28\nG90\nATTACH_PROBE\nG0  X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F8000\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro lights_on': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.25', 'description': 'G-Code macro'}, 'gcode_macro pid_hotend': {'gcode': '\nPID_CALIBRATE HEATER=extruder TARGET=260', 'description': 'G-Code macro'}, 'gcode_macro pid_bed': {'gcode': '\nPID_CALIBRATE HEATER=heater_bed TARGET=110', 'description': 'G-Code macro'}, 'gcode_macro manual_flow_calibration': {'gcode': '\nM221 S{params.FLOW}\nSET_PRESSURE_ADVANCE ADVANCE={params.PRESSURE_ADVANCE}', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\n\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'delayed_gcode heatsoak_delay': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\npark_center\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110\nG4 P{15 * 60000}\nSET_FAN_SPEED FAN=BedFans SPEED=0.4\nSET_FAN_SPEED FAN=BoomBox SPEED=0.4\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro heatsoak_timer': {'gcode': '\n{% set time_delay = params.START_HEATSOAK_IN_HOURS|default(1.00)|float %}\nUPDATE_DELAYED_GCODE ID=HEATSOAK_DELAY DURATION={time_delay *3600}', 'description': 'G-Code macro'}, 'gcode_macro park_front': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT', 'description': 'G-Code macro'}, 'gcode_macro park_front_low': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_FRONT_LOW\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F10000\nRESTORE_GCODE_STATE NAME=PARK_FRONT_LOW', 'description': 'G-Code macro'}, 'gcode_macro park_rear': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_REAR\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_REAR', 'description': 'G-Code macro'}, 'gcode_macro park_center': {'gcode': '\nCHOME\nSAVE_GCODE_STATE NAME=PARK_CENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F10000\nRESTORE_GCODE_STATE NAME=PARK_CENTER', 'description': 'G-Code macro'}, 'gcode_macro park_bed': {'gcode': '\nCG28\nSAVE_GCODE_STATE NAME=PARK_BED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z25 F10000\nRESTORE_GCODE_STATE NAME=PARK_BED', 'description': 'G-Code macro'}, 'gcode_macro force_bed_down': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing'}, 'gcode_macro force_bed_up': {'gcode': '\n{% set DISTANCE = params.DISTANCE|default(2)|float %}\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z-{DISTANCE|float}\nG90\nM84', 'description': 'Force move bed down without homing.'}, 'gcode_macro force_bed_lock': {'gcode': '\nSET_KINEMATIC_POSITION Z=100\nG91\nG0 Z1\nG90', 'description': 'Active Z steppers to lock down the bed, Without Homing'}, 'gcode_macro force_bed_unlock': {'gcode': '\nM84', 'description': 'Unlocks the Bed'}, 'delayed_gcode filter_air_stop': {'gcode': '\n{% if printer.idle_timeout.state != "Printing" %}\nM117 TURNING OFF FILTER FANS\nSET_FAN_SPEED FAN=BoomBox SPEED=0.0\nM107\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro print_end': {'gcode': '\n\nFS_OFF\nNozzle_OFF\n\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 10.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG1 E-10.0 F4000\nG92 E0\nG91\nG0 Z{z_safe} F4000\nG0 X{x_safe} Y{y_safe} F10000\nM104 S0\nM140 S0\nG90\nG0 X{max_x / 2} Y{max_y} F8000\nM84\n\n\n{% if printer.heater_bed.temperature >= 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.8\nM106 S77\nUPDATE_DELAYED_GCODE ID=FILTER_AIR_STOP DURATION=600\n{% endif %}\n\nM118 Finished!', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("45")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nNozzle_PREP\nCLEAR_PAUSE\nG28\nG90\n\n\n\n{% if params.BED|int > 90 %}\nM118 Chamber HeatSoak Start\nM106 S102\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\nM118 Chamber HeatSoak Complete\nM107\n\n\n{% else %}\nM118 PLA Bed Preheat Start\nG1 X{x_wait} Y{y_wait} Z20 F9000\nM190 S{target_bed}\nG4 P{10 * 60000}\nM118 PLA Bed Preheat Complete\n{% endif %}\n\n\n\nATTACH_PROBE_LOCK\nBED_MESH_CLEAR\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE\nG28 Z\nDOCK_PROBE_UNLOCK\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM109 S{target_extruder}\n\n\nPRIME_BLOB\nFS_ON\nBEEP_SUCCESS\nNozzle_ON\n\n\n{% if params.BED|int > 90 %}\nSET_FAN_SPEED FAN=BoomBox SPEED=0.5\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro prime_blob': {'gcode': '\nSAVE_GCODE_STATE NAME=prime_blob_state\nM117 Priming nozzle with prime blob..\nRESPOND MSG="Priming nozzle with prime blob.."\n\nG90\n\nM83\n\nG1 Z5 F3000\n\nG1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F10000\n\nG1 F50 E30\n\nM106 S128\n\nG1 Z5 F100 E5\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 25} E1\n\n\n\nG1 F400 Y{printer.toolhead.axis_minimum.y + 30} Z3.8  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 35} Z2.6  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 40} Z1.4  E0.5\nG1 F400 Y{printer.toolhead.axis_minimum.y + 45} Z0.25 E0.5\n\nM106 S0\n\nG1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.25 E0.6\n\nG1 F300 Y{printer.toolhead.axis_minimum.y + 100}\nRESTORE_GCODE_STATE NAME=prime_blob_state', 'description': 'Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.'}, 'gcode_macro ringing_tower': {'gcode': '\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n\n{action_respond_info("Preparing to print a ringing tower...")}\n{% if printer.configfile.settings.input_shaper.shaper_freq_x %}\nSET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0\n{action_respond_info("Resetting input shaper.")}\n{% endif %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Disabling pressure advance.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_mzv': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=MZV\n{action_respond_info("Setting input shaper to MZV.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro test_is_ei': {'gcode': '\n{% set freq_x = params.X_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_x)|float %}\n{% set freq_y = params.Y_FREQ|default(printer.configfile.settings.input_shaper.shaper_freq_y)|float %}\n{% set filename = params.GCODE_FILENAME|default("ringing_tower.gcode")|string %}\n{action_respond_info("Setting input shaper values for X={} and Y={}.".format(freq_x, freq_y))}\nSET_INPUT_SHAPER SHAPER_FREQ_X={freq_x} SHAPER_FREQ_Y={freq_y}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000\nSET_PRESSURE_ADVANCE ADVANCE=0\n{action_respond_info("Adjusting SCV and ACCEL_TO_DECEL.")}\nSET_INPUT_SHAPER SHAPER_TYPE=EI\n{action_respond_info("Setting input shaper to EI.")}\nTUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5\n{action_respond_info("Printing ringing tower.")}\nSDCARD_PRINT_FILE FILENAME={filename}', 'description': 'G-Code macro'}, 'gcode_macro priming': {'gcode': '\nM106 S255\nCLEAN\nG1  Z10 F3000\nG1  X15 Y5 F15000\nG1  Z0.3 F3000\nG91\nG1  Z0.2 E30 F3\nG1  Z2.0 E25 F30\nG1  Z4.0 E20 F60\nG1  Z2.0 E10 F240\nG1  Z10  E-0.1 F3600\nG1  Y55 Z-18.25 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y10 F3000\nG1  Y-10 F3000\nG1  Y-55 F3000\nM107\nG1  Z2.0  F3000\nG1  Y55   F7000\nM82\nG92 E0.0\nG90\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean': {'gcode': '\nM204 S6000\nG1 X15 Y35 F15000\nG1 Z0.5 F3000\nG1 Y1 F10000', 'description': 'G-Code macro'}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '10000', 'variable_dock_speed': '100', 'variable_release_speed': '100', 'variable_z_drop_speed': '20', 'variable_safe_z': '18', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '260', 'variable_max_bed_x': '260', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'variable_docklocation_x': '47', 'variable_docklocation_y': '296', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'variable_bypass_probe_docking': 'False'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x, min_points]|max %}\n{% set points_y = [points_y, min_points]|max %}\n{% set points_x = [points_x, probe_count[0]]|min %}\n{% set points_y = [points_y, probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'Perform Mesh Bed Leveling with klicky automount'}, 'gcode_macro z_tilt_adjust': {'gcode': '\n{% set V = printer["gcode_macro _User_Variables"].verbose %}\n{% if V %}\n{ action_respond_info("Z Tilt Adjust") }\n{% endif %}\n\n_CheckProbe action=query\nG90\nAttach_Probe\n_KLICKY_STATUS_LEVELING\n\n_Z_TILT_ADJUST {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\nDock_Probe\nG28 Z0', 'rename_existing': '_Z_TILT_ADJUST', 'description': ''}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'True', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'skew_correction my_skew_profile': {'xy_skew': -0.000802972249612, 'xz_skew': 0.0, 'yz_skew': 0.0}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'zv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 58.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 43.4}, 'printer': {'max_velocity': 300.0, 'max_accel': 10000.0, 'max_accel_to_decel': 5000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 50.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-08 06:02:34,075 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-08 06:02:34,076 [printer.py:reinit()] - Klipper version: v0.12.0-102-g9f41f53c-dirty
2024-02-08 06:02:34,077 [printer.py:reinit()] - # Extruders: 1
2024-02-08 06:02:34,077 [printer.py:reinit()] - # Temperature devices: 6
2024-02-08 06:02:34,077 [printer.py:reinit()] - # Fans: 5
2024-02-08 06:02:34,077 [printer.py:reinit()] - # Output pins: 3
2024-02-08 06:02:34,077 [printer.py:reinit()] - # Leds: 1
2024-02-08 06:02:34,089 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-08 06:02:34,091 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-08 06:02:34,373 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor Pi&temperature_sensor Octopus&temperature_sensor NitehawkChip&temperature_sensor Nitehawk&fan&fan_generic BoomBox&fan_generic BedFans&heater_fan hotend_fan&heater_fan Vent&filament_motion_sensor filament_sensor&output_pin caselight&output_pin beeper&output_pin act_led&neopixel sb_leds
2024-02-08 06:02:34,377 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-08 06:02:34,377 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-08 06:02:34,377 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-08 06:02:34,377 [screen.py:init_klipper()] - Printer initialized
2024-02-08 06:02:34,378 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-08 06:02:34,378 [printer.py:change_state()] - Adding callback for state: ready
2024-02-08 06:02:34,381 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-08 06:02:34,458 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-08 06:02:34,476 [main_menu.py:add_device()] - Adding device: extruder
2024-02-08 06:02:34,483 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-08 06:02:34,488 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-08 06:02:34,492 [main_menu.py:add_device()] - Adding device: temperature_sensor Pi
2024-02-08 06:02:34,496 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus
2024-02-08 06:02:34,500 [main_menu.py:add_device()] - Adding device: temperature_sensor NitehawkChip
2024-02-08 06:02:34,504 [main_menu.py:add_device()] - Adding device: temperature_sensor Nitehawk
2024-02-08 06:02:34,532 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-08 06:02:34,538 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-08 06:02:34,548 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor Pi', 'temperature_sensor Octopus', 'temperature_sensor NitehawkChip', 'temperature_sensor Nitehawk', 'extruder']
2024-02-08 06:02:34,556 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-08 06:02:34,556 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-08 13:58:18,143 [screen.py:_go_to_submenu()] - #### Go to submenu my_macros_menu
2024-02-08 13:58:18,143 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-08 13:58:18,148 [screen.py:_load_panel()] - Loading panel: menu
2024-02-08 13:58:18,229 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > my_macros_menu
2024-02-08 13:58:35,895 [screen.py:_send_action()] - printer.gcode.script: {'script': 'HEATSOAKER'}
2024-02-08 13:59:41,619 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-08 13:59:41,684 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-08 14:00:35,515 [screen.py:_go_to_submenu()] - #### Go to submenu my_macros_menu
2024-02-08 14:00:35,515 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-08 14:00:35,552 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > my_macros_menu
2024-02-08 14:02:35,551 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 15:44:11,402 [files.py:_callback()] - Error in getting metadata for .thumbs/Spool holder regular spool_ABS_1h1m-300x300.png. Retrying in 6 seconds
2024-02-08 15:44:11,403 [files.py:_callback()] - Error in getting metadata for .thumbs/Spool holder regular spool_ABS_1h1m-32x32.png. Retrying in 6 seconds
2024-02-08 15:44:11,408 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 15:44:11,417 [screen.py:wake_screen()] - Screen wake up
2024-02-08 15:44:11,812 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_PREP"
2024-02-08 15:44:11,845 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-08 15:44:11,845 [printer.py:change_state()] - Adding callback for state: printing
2024-02-08 15:44:11,847 [screen.py:_load_panel()] - Loading panel: job_status
2024-02-08 15:44:11,930 [job_status.py:create_status_grid()] - Titlebar items: ['']
2024-02-08 15:44:11,954 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-08 15:44:11,960 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-08 15:44:11,972 [job_status.py:update_file_metadata()] - Update Metadata. File: Spool holder regular spool_ABS_1h1m.gcode Size: 4101675
2024-02-08 15:44:11,978 [job_status.py:show_file_thumbnail()] - Spool holder regular spool_ABS_1h1m.gcode
2024-02-08 15:46:12,551 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 15:48:52,449 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 15:48:52,484 [screen.py:wake_screen()] - Screen wake up
2024-02-08 15:48:52,886 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_ON"
2024-02-08 15:50:53,551 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 16:56:18,098 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 16:56:18,129 [screen.py:wake_screen()] - Screen wake up
2024-02-08 16:56:18,530 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_OFF"
2024-02-08 16:56:22,426 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-08 16:56:22,426 [printer.py:change_state()] - Adding callback for state: ready
2024-02-08 16:56:22,444 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-02-08 16:58:18,571 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 17:14:32,771 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'standby'
2024-02-08 18:25:02,223 [files.py:_callback()] - Error in getting metadata for .thumbs/spool_holder_ABS_44m34s-300x300.png. Retrying in 6 seconds
2024-02-08 18:25:02,227 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 18:25:02,246 [screen.py:wake_screen()] - Screen wake up
2024-02-08 18:25:02,640 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_PREP"
2024-02-08 18:25:02,683 [files.py:_callback()] - Error in getting metadata for .thumbs/spool_holder_ABS_44m34s-32x32.png. Retrying in 6 seconds
2024-02-08 18:25:02,684 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-08 18:25:02,685 [printer.py:change_state()] - Adding callback for state: printing
2024-02-08 18:25:02,690 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-08 18:25:02,694 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-02-08 18:25:02,695 [job_status.py:show_file_thumbnail()] - spool_holder_ABS_44m34s.gcode
2024-02-08 18:25:02,695 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-02-08 18:25:02,728 [files.py:remove_file_callback()] - removing callback <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7804f710>>
2024-02-08 18:25:02,728 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 18:25:02,789 [job_status.py:create_status_grid()] - Titlebar items: ['']
2024-02-08 18:25:02,815 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-08 18:25:02,820 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-08 18:25:02,831 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-02-08 18:25:02,832 [job_status.py:show_file_thumbnail()] - spool_holder_ABS_44m34s.gcode
2024-02-08 18:25:02,832 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-02-08 18:25:02,873 [job_status.py:update_file_metadata()] - Update Metadata. File: spool_holder_ABS_44m34s.gcode Size: 2031219
2024-02-08 18:25:02,880 [job_status.py:show_file_thumbnail()] - spool_holder_ABS_44m34s.gcode
2024-02-08 18:25:02,881 [files.py:remove_file_callback()] - removing callback <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7804f710>>
2024-02-08 18:25:02,881 [job_status.py:update_file_metadata()] - Update Metadata. File: spool_holder_ABS_44m34s.gcode Size: 2031219
2024-02-08 18:25:02,886 [job_status.py:show_file_thumbnail()] - spool_holder_ABS_44m34s.gcode
2024-02-08 18:25:02,886 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7804f710>>
2024-02-08 18:25:02,900 [job_status.py:update_file_metadata()] - Update Metadata. File: spool_holder_ABS_44m34s.gcode Size: 2031219
2024-02-08 18:25:02,905 [job_status.py:show_file_thumbnail()] - spool_holder_ABS_44m34s.gcode
2024-02-08 18:25:02,906 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7804f710>>
2024-02-08 18:27:03,552 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 18:38:48,197 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 18:38:48,240 [screen.py:wake_screen()] - Screen wake up
2024-02-08 18:38:48,640 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_ON"
2024-02-08 18:40:49,552 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 19:27:36,267 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 19:27:36,303 [screen.py:wake_screen()] - Screen wake up
2024-02-08 19:27:36,705 [screen.py:show_popup_message()] - error: // Unknown command:"NOZZLE_OFF"
2024-02-08 19:27:39,871 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-08 19:27:39,871 [printer.py:change_state()] - Adding callback for state: ready
2024-02-08 19:27:39,877 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-02-08 19:29:37,552 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-08 19:48:56,577 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-08 19:48:56,577 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-08 19:48:56,579 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-08 19:48:56,579 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-08 19:48:56,581 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-08 19:48:56,624 [screen.py:wake_screen()] - Screen wake up
2024-02-08 19:48:57,020 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f7804f710>>
2024-02-08 19:48:57,020 [screen.py:show_panel()] - Reinitializing panel
2024-02-08 19:48:57,050 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-08 19:49:00,557 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
